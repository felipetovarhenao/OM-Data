; OM File Header - Saved 2021/06/02 12:32:32
; (6.18 :patc (om-make-point 118 260) (om-make-point 575 48) (om-make-point 762 798) "" 183 0 "2021/05/21 10:45:59" "2021/06/02 12:06:04")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "list-symmetries" (quote ((let ((box (om-load-boxcomment "comment 6" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 119 54) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 143 31) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 424 80) (quote "List-symmetries searches for symmetric or near-symmetric orderings of a list, based on an assymmetry tolerance factor (0.0 - 1.0). The search can be done on all permutations or rotations only.") "" (om-make-point 25 80) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 394 549) (om-make-point 152 30) (list 2 1 2 3 10 10 11 11 3) "(2 1 2 3 10 10 11 11 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 483 668) (om-make-point 163 91) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 139 71) "untitled"))) (om-set-dialog-item-text rep "(11 11 3 2 1 2 3 10 10)
(2 3 10 10 11 11 3 2 1)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 621 547) (om-make-point 38 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 550 547) (om-make-point 69 30) (quote rotations) "rotations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES 3" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote permutations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))) (om-load-inputfun (quote input-funbox) "number" "TOLERANCE" 0.0))) (om-make-point 536 585) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 179 672) (om-make-point 112 123) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 88 103) "untitled"))) (om-set-dialog-item-text rep "(a b c a c b a)
(a c b a b c a)
(b a c a c a b)
(b c a a a c b)
(c a b a b a c)
(c b a a a b c)
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 311 550) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 208 551) (om-make-point 93 30) (quote permutations) "permutations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 91 551) (om-make-point 98 30) (list (quote a) (quote a) (quote a) (quote b) (quote b) (quote c) (quote c)) "(a a a b b c c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES 2" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote permutations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))) (om-load-inputfun (quote input-funbox) "number" "TOLERANCE" 0.0))) (om-make-point 206 589) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 148 261) (om-make-point 48 30) 4800 "4800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 4800) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 156 297) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 215 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 68 30) (quote "intervals") "" (om-make-point 77 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 12 184) (om-make-point 200 30) (list 800 900 200 200 700 500 300) "(800 900 200 200 700 500 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 93 30) (quote "search mode") "" (om-make-point 222 156) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 144 30) (quote "asymmetry tolerance") "" (om-make-point 324 155) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 327 185) (om-make-point 38 30) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 220 185) (om-make-point 93 30) (quote permutations) "permutations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 100))) (om-make-point 93 412) (om-make-point 649 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 5600 5800 6500 6800 7300 7500 8400) (4800 5600 5800 6300 7200 7500 7700 8400) (4800 5600 5800 6300 7000 7300 7500 8400) (4800 5600 5800 6300 6600 7300 7500 8400) (4800 5600 5800 6100 7000 7500 7700 8400) (4800 5600 5800 6100 6800 7300 7500 8400) (4800 5600 6300 6500 6800 7000 7500 8400) (4800 5600 6100 6300 7200 7400 7700 8400) (4800 5600 6100 6300 7000 7200 7500 8400) (4800 5600 6100 6300 6600 6800 7500 8400) (4800 5600 5900 6100 7000 7200 7700 8400) (4800 5600 5900 6100 6800 7000 7500 8400) (4800 5700 5900 6600 6900 7400 7600 8400) (4800 5700 5900 6400 7100 7400 7600 8400) (4800 5700 5900 6400 6700 7400 7600 8400) (4800 5700 5900 6200 6900 7400 7600 8400) (4800 5700 6400 6600 6900 7100 7600 8400) (4800 5700 6200 6400 7100 7300 7600 8400) (4800 5700 6200 6400 6700 6900 7600 8400) (4800 5700 6000 6200 6900 7100 7600 8400) (4800 5000 5800 6500 6800 7300 8200 8400) (4800 5000 5800 6300 7200 7500 8200 8400) (4800 5000 5800 6300 7000 7300 8200 8400) (4800 5000 5800 6300 6600 7300 8200 8400) (4800 5000 5800 6100 7000 7500 8200 8400) (4800 5000 5800 6100 6800 7300 8200 8400) (4800 5000 5900 6600 6900 7400 8200 8400) (4800 5000 5900 6400 7100 7400 8200 8400) (4800 5000 5900 6400 6700 7400 8200 8400) (4800 5000 5900 6200 6900 7400 8200 8400) (4800 5000 5700 6500 6800 7700 8200 8400) (4800 5000 5700 6600 6900 7700 8200 8400) (4800 5000 5700 6200 7100 7400 8200 8400) (4800 5000 5700 6000 6900 7400 8200 8400) (4800 5000 5500 6300 7200 7900 8200 8400) (4800 5000 5500 6300 7000 7900 8200 8400) (4800 5000 5500 6300 6600 7500 8200 8400) (4800 5000 5500 6400 7100 7900 8200 8400) (4800 5000 5500 6400 6700 7500 8200 8400) (4800 5000 5500 6200 7100 7900 8200 8400) (4800 5000 5300 6100 7000 7700 8200 8400) (4800 5000 5300 6100 6800 7700 8200 8400) (4800 5000 5300 6200 6900 7700 8200 8400) (4800 5000 5300 6000 6900 7700 8200 8400) (4800 5500 6300 6500 6800 7000 7900 8400) (4800 5500 6400 6600 6900 7100 7900 8400) (4800 5500 5700 6500 6800 7700 7900 8400) (4800 5500 5700 6600 6900 7700 7900 8400) (4800 5500 5700 6200 7100 7400 7600 8400) (4800 5500 5700 6000 6900 7400 7600 8400) (4800 5500 6000 6200 7100 7300 7600 8400) (4800 5500 5800 6000 6900 7100 7600 8400) (4800 5300 6100 6300 7200 7400 8100 8400) (4800 5300 6100 6300 7000 7200 8100 8400) (4800 5300 6100 6300 6600 6800 7700 8400) (4800 5300 6200 6400 7100 7300 8100 8400) (4800 5300 6200 6400 6700 6900 7700 8400) (4800 5300 5500 6300 7200 7900 8100 8400) (4800 5300 5500 6300 7000 7900 8100 8400) (4800 5300 5500 6300 6600 7500 7700 8400) (4800 5300 5500 6400 7100 7900 8100 8400) (4800 5300 5500 6400 6700 7500 7700 8400) (4800 5300 5500 6200 7100 7900 8100 8400) (4800 5300 6000 6200 7100 7300 8100 8400) (4800 5100 5900 6100 7000 7200 7900 8400) (4800 5100 5900 6100 6800 7000 7900 8400) (4800 5100 6000 6200 6900 7100 7900 8400) (4800 5100 5300 6100 7000 7700 7900 8400) (4800 5100 5300 6100 6800 7700 7900 8400) (4800 5100 5300 6200 6900 7700 7900 8400) (4800 5100 5300 6000 6900 7700 7900 8400) (4800 5100 5800 6000 6900 7100 7900 8400))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50))) :loffset (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 100)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 4) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 543 340) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote permutations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))) (om-load-inputfun (quote input-funbox) "number" "TOLERANCE" 0.2))) (om-make-point 218 238) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 4 0 nil 0) (3 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (12 0 8 0 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0) (9 0 12 2 nil 0) (13 0 14 0 nil 0) (14 0 15 0 nil 0) (23 0 15 1 nil 0) (15 0 22 1 nil 0) (17 0 23 0 nil 0) (21 0 23 1 nil 0) (20 0 23 2 nil 0))) nil 6.18))
