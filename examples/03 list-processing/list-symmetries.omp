; OM File Header - Saved 2021/06/05 12:12:24
; (6.18 :patc (om-make-point 118 260) (om-make-point 575 48) (om-make-point 746 837) "" 183 0 "2021/05/21 10:45:59" "2021/06/05 12:09:13")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "list-symmetries" (quote ((let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 21 165) (om-make-point 175 30) (list 800 800 600 500 200 200) "(800 800 600 500 200 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 273 365) (om-make-point 184 72) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (800 600 200 200 500 800)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.828194 0.71059 0.19779754)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (800 500 200 200 600 800)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.40552354 0.39175403 0.14885879)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (800 200 600 500 200 800)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.55487824 0.6992117 0.33695674)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (800 200 500 600 200 800)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.32945812 0.93113924 0.051422477)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (600 800 200 200 800 500)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.5546863 0.1402607 0.08946502)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (600 200 800 800 200 500)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.38162398 0.7206392 0.6304667)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (500 800 200 200 800 600)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.35846853 0.43148732 0.011063099)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (500 200 800 800 200 600)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.912171 0.25284958 0.829538)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (200 800 600 500 800 200)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.6733718 0.19241584 0.94415737)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (200 800 500 600 800 200)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.17793143 0.7765622 0.026320219)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (200 600 800 800 500 200)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.50916255 0.9427401 0.835219)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (200 500 800 800 600 200)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.31651855 0.15396703 0.72990025)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1147 413))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "mc->bpf-lib" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 360 305) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "SET-COLOR" (quote set-color) (quote ((om-load-inputfun (quote input-funbox) "a BPF or BPC" "SELF" nil) (om-load-inputfun (quote input-funbox) " color" "COLOR" (quote :random)))) (om-make-point 60 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 73 162) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 75 95) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 64 283) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 79 31) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 95 358) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 19 360) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 2 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "mc->bpf-lib" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 109 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 133 11) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 424 80) (quote "List-symmetries searches for symmetric or near-symmetric orderings of a list, based on an assymmetry tolerance factor (0.0 - 1.0). The search can be done on all permutations or rotations only.") "" (om-make-point 15 60) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 384 569) (om-make-point 152 30) (list 2 1 2 3 10 10 11 11 3) "(2 1 2 3 10 10 11 11 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 473 688) (om-make-point 163 91) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 139 71) "untitled"))) (om-set-dialog-item-text rep "(11 11 3 2 1 2 3 10 10)
(2 3 10 10 11 11 3 2 1)
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 611 567) (om-make-point 38 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 540 567) (om-make-point 69 30) (quote rotations) "rotations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES 3" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote permutations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))) (om-load-inputfun (quote input-funbox) "number" "TOLERANCE" 0.0))) (om-make-point 526 605) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 169 692) (om-make-point 112 123) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 88 103) "untitled"))) (om-set-dialog-item-text rep "(a b c a c b a)
(a c b a b c a)
(b a c a c a b)
(b c a a a c b)
(c a b a b a c)
(c b a a a b c)
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 301 570) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 198 571) (om-make-point 93 30) (quote permutations) "permutations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 81 571) (om-make-point 98 30) (list (quote a) (quote a) (quote a) (quote b) (quote b) (quote c) (quote c)) "(a a a b b c c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES 2" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote permutations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))) (om-load-inputfun (quote input-funbox) "number" "TOLERANCE" 0.0))) (om-make-point 196 609) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 138 241) (om-make-point 48 30) 4800 "4800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 4800) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 146 277) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 205 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 68 30) (quote "intervals") "" (om-make-point 67 137) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 93 30) (quote "search mode") "" (om-make-point 212 136) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 144 30) (quote "asymmetry tolerance") "" (om-make-point 314 135) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 317 165) (om-make-point 38 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 210 165) (om-make-point 93 30) (quote permutations) "permutations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 100))) (om-make-point 83 442) (om-make-point 649 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 5600 6200 6400 6600 7100 7900) (4800 5600 6100 6300 6500 7100 7900) (4800 5600 5800 6400 6900 7100 7900) (4800 5600 5800 6300 6900 7100 7900) (4800 5400 6200 6400 6600 7400 7900) (4800 5400 5600 6400 7200 7400 7900) (4800 5300 6100 6300 6500 7300 7900) (4800 5300 5500 6300 7100 7300 7900) (4800 5000 5800 6400 6900 7700 7900) (4800 5000 5800 6300 6900 7700 7900) (4800 5000 5600 6400 7200 7700 7900) (4800 5000 5500 6300 7100 7700 7900))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50))) :loffset (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1))) :legato 100)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 543 340) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 4) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote permutations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))) (om-load-inputfun (quote input-funbox) "number" "TOLERANCE" 0.2))) (om-make-point 208 218) nil nil "&" nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (25 0 2 0 nil 0) (10 0 7 0 nil 0) (6 0 10 0 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (15 0 11 0 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (12 0 15 2 nil 0) (16 0 17 0 nil 0) (17 0 18 0 nil 0) (25 0 18 1 nil 0) (18 0 24 1 nil 0) (0 0 25 0 nil 0) (23 0 25 1 nil 0) (22 0 25 2 nil 0))) nil 6.18))
