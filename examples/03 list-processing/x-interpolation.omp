; OM File Header - Saved 2021/06/02 13:17:29
; (6.18 :patc (om-make-point 118 10) (om-make-point 634 25) (om-make-point 661 997) "" 183 0 "2021/03/30 13:38:29" "2021/06/02 13:17:20")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../04 midicents/fill-range.omp\"" "#P\"../04 midicents/distortion.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "x-interpolation" (quote ((let ((box (om-load-boxcall (quote patch-box) "fill-range" (quote ("elements" "examples" "04 midicents" "fill-range")) (quote nil) (om-make-point 99 465) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "distortion" (quote ("elements" "examples" "04 midicents" "distortion")) (quote nil) (om-make-point 64 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 84 11) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 539 135) (quote "x-interpolation performs a controlled approximation from a source list to a target list, $given an interpolation trajectory/path. In other words, it mutates the source list into $the target list. The trajectory list must have at least two values (starting and ending $points), all between 0.0 and 1.0, which represent the normalized percentage of linear $interpolation from source to target.$$The source list can be a nested list or arbitrary depth and length, while the target list $must be a flatten (depth 1) list.") "" (om-make-point 25 68) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 70 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 90 45) (quote "target pitch $collection") "" (om-make-point 438 631) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 30) (quote "original pitches") "" (om-make-point 437 709) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "INTERPOLATION PATH" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1 5 6)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 0 100 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 1))) (om-make-point 220 629) (om-make-point 215 111) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 5.0 6.0)) (quote (0.0 0.0 100.0 100.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CROSS-INTERPOLATED CHORD SEQUENCE" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 79 846) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8804 8352 8012 8012 8352 8804 6992 6652 7446 3934) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (8012 7446 6992 6992 7446 8012 3366) (6652) (8804 8352 8012 8012 8352 8804 6086 6992) (4272) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (3934) (8012 7446 6992 6992 7446 8012) (6652) (8804 8352 8012 8012 8352 8804 3480) (6992) (8692 8238 7672 7672 8238 8692 6878 7558) (4160) (9032 8692 8012 8012 8692 9032 3480) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8238 7786 7446 7446 7786 8238 6426 7446) (7786 7446 6878 6878 7446 7786 2800) (6878) (8352 8012 7446 7446 8012 8352 6992) (4160) (8238 7786 7446 7446 7786 8238 6878 6426 7446) (3366) (6878 6426 7446) (2800) (6878) (6652 7106) (6878 7218 4160) (6878 7332) (7332 6878 6312 6312 6878 7332 6878 6312 7332 3594) (8352 8012 7332 7332 8012 8352 7672) (8012 7672 6878 6878 7672 8012 7332 2800) (6878) (8804 8352 7786 7786 8352 8804 7332) (4161) (8688 8233 7669 7669 8233 8688 7335 6879 6654 7669) (3594) (8224 7665 7339 7339 7665 8224 6657) (7341 6881 7663) (9137 8803 8216 8216 8803 9137 2848) (9045 8675 8029 8029 8675 9045) (4190) (8803 8204 7814 7814 8204 8803 6883 6420 7435 3350) (8803 8200 7818 7818 8200 8803 6884 6419 7433 3348) (8803 8196 7821 7821 8196 8803 6885 6418 7432 3346) (8803 8192 7824 7824 8192 8803 6885 6417 7431 3344) (8803 8187 7828 7828 8187 8803 6886 6416 7429 3342) (8802 8183 7831 7831 8183 8802 6887 6416 7428 3340) (6887 6479 7210 3338) (6888 6475 7210 3336) (6889 6471 7209 3334) (6889 6467 7209 3332) (6890 6463 7208 3330) (6891 6459 7420 3328) (8802 8381 8065 8065 8381 8802 6936 6681 7418 3974) (8382 8068 7417 7417 8068 8382 6934 6682 7417) (8070 7415 6931 6931 7415 8070 3322) (6685) (8801 8387 8076 8076 8387 8801 6024 6926) (4293) (8390 8081 7410 7410 8081 8390 6920 6690 7410) (3988) (8086 7407 6915 6915 7407 8086) (6694) (8800 8395 8091 8091 8395 8800 3588) (6906) (8604 8105 7603 7603 8105 8604 6899 7598) (4299) (9100 8600 8100 8100 8600 9100 3600) (8800 8100 7900 7900 8100 8800 6900 6400 7400 3300) (8100 7900 7400 7400 7900 8100 6400 7400) (7900 7400 6900 6900 7400 7900 3100) (6900) (8400 8100 7400 7400 8100 8400 6900) (4300) (8100 7900 7400 7400 7900 8100 6900 6400 7400) (3300) (6900 6400 7400) (3100) (6900) (6700 7200) (6900 7200 4300) (6900 7400) (7400 6900 6400 6400 6900 7400 6900 6400 7400 3600) (8400 8100 7400 7400 8100 8400 7600) (8100 7600 6900 6900 7600 8100 7400 3100) (6900) (8800 8400 7900 7900 8400 8800 7400) (4300) (8600 8100 7600 7600 8100 8600 7400 6900 6700 7600) (3600) (8100 7600 7400 7400 7600 8100 6700) (7400 6900 7600) (9100 8800 8100 8100 8800 9100 3100) (9100 8600 8100 8100 8600 9100) (4300) (8800 8100 7900 7900 8100 8800 6900 6400 7400 3300) (8800 8100 7900 7900 8100 8800 6900 6400 7400 3300) (8800 8100 7900 7900 8100 8800 6900 6400 7400 3300) (8800 8100 7900 7900 8100 8800 6900 6400 7400 3300) (8800 8100 7900 7900 8100 8800 6900 6400 7400 3300) (8800 8100 7900 7900 8100 8800 6900 6400 7400 3300))) :lonset (quoteldur (quote ((174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (349 349 349 349 349 349 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174) (86 86 86 86) (86 86 86 86) (86 86 86 86) (86 86 86 86) (174 174 174 174) (174 174 174 174) (174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (174 174 174 349 349 174 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174))) :lvel (quoteloffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1080 393) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-INTERPOLATION" (quote x-interpolation) (quote ((om-load-inputfun (quote input-funbox) "list" "A-LIST" (list (list 7200 7700 8100) (list 6200 6700 7100) (list 7600 8100 7200) (list 5300 5900 5000) (list 7900 7200 7600) (list 5700 5000 5300) (list 7100 6400 6700) (list 6000 6500 6900))) (om-load-inputfun (quote input-funbox) "list" "B-LIST" (list 4500 5700 6402 6900 7286 7602 7868 8100 8304 8486)) (om-load-inputfun (quote input-funbox) "list" "TRAJ" (list 0.0 1.0 0.0)))) (om-make-point 43 765) (om-make-point 189 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TARGET PC" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 111 539) (om-make-point 96 201) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100 3300 3600 3800 4000 4300 4500 4800 5000 5200 5500 5700 6000 6200 6400 6700 6900 7200 7400 7600 7900 8100 8400 8600 8800 9100 9300 9600)) :ldur (quote (150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RANDOM CHORDS WITH SMOOTH VOICE LEADING" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 36 261) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8804 8352 8012 8012 8352 8804 6992 6652 7446 3934) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (8012 7446 6992 6992 7446 8012 3366) (6652) (8804 8352 8012 8012 8352 8804 6086 6992) (4272) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (3934) (8012 7446 6992 6992 7446 8012) (6652) (8804 8352 8012 8012 8352 8804 3480) (6992) (8692 8238 7672 7672 8238 8692 6878 7558) (4160) (9032 8692 8012 8012 8692 9032 3480) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8238 7786 7446 7446 7786 8238 6426 7446) (7786 7446 6878 6878 7446 7786 2800) (6878) (8352 8012 7446 7446 8012 8352 6992) (4160) (8238 7786 7446 7446 7786 8238 6878 6426 7446) (3366) (6878 6426 7446) (2800) (6878) (6652 7106) (6878 7218 4160) (6878 7332) (7332 6878 6312 6312 6878 7332 6878 6312 7332 3594) (8352 8012 7332 7332 8012 8352 7672) (8012 7672 6878 6878 7672 8012 7332 2800) (6878) (8804 8352 7786 7786 8352 8804 7332) (4160) (8692 8238 7672 7672 8238 8692 7332 6878 6652 7672) (3594) (8238 7672 7332 7332 7672 8238 6652) (7332 6878 7672) (9144 8804 8238 8238 8804 9144 2800) (9032 8692 8012 8012 8692 9032) (4160) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (6878 6538 7218 3366) (6878 6538 7218 3366) (6878 6538 7218 3366) (6878 6538 7218 3366) (6878 6538 7218 3366) (6878 6538 7446 3366) (8804 8352 8012 8012 8352 8804 6992 6652 7446 3934) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (8012 7446 6992 6992 7446 8012 3366) (6652) (8804 8352 8012 8012 8352 8804 6086 6992) (4272) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (3934) (8012 7446 6992 6992 7446 8012) (6652) (8804 8352 8012 8012 8352 8804 3480) (6992) (8692 8238 7672 7672 8238 8692 6878 7558) (4160) (9032 8692 8012 8012 8692 9032 3480) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8238 7786 7446 7446 7786 8238 6426 7446) (7786 7446 6878 6878 7446 7786 2800) (6878) (8352 8012 7446 7446 8012 8352 6992) (4160) (8238 7786 7446 7446 7786 8238 6878 6426 7446) (3366) (6878 6426 7446) (2800) (6878) (6652 7106) (6878 7218 4160) (6878 7332) (7332 6878 6312 6312 6878 7332 6878 6312 7332 3594) (8352 8012 7332 7332 8012 8352 7672) (8012 7672 6878 6878 7672 8012 7332 2800) (6878) (8804 8352 7786 7786 8352 8804 7332) (4160) (8692 8238 7672 7672 8238 8692 7332 6878 6652 7672) (3594) (8238 7672 7332 7332 7672 8238 6652) (7332 6878 7672) (9144 8804 8238 8238 8804 9144 2800) (9032 8692 8012 8012 8692 9032) (4160) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366))) :lonset (quoteldur (quote ((174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (349 349 349 349 349 349 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174) (86 86 86 86) (86 86 86 86) (86 86 86 86) (86 86 86 86) (174 174 174 174) (174 174 174 174) (174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (174 174 174 349 349 174 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174))) :lvel (quoteloffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 8 0 nil 0) (11 0 9 0 nil 0) (10 1 9 1 nil 0) (7 2 9 2 nil 0) (0 0 10 0 nil 0) (1 0 11 0 nil 0))) nil 6.18))
