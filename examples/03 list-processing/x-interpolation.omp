; OM File Header - Saved 2021/06/10 8:45:31
; (6.19 :patc (om-make-point 118 10) (om-make-point 634 25) (om-make-point 661 997) "" 183 0 "2021/03/30 13:38:29" "2021/06/10 8:45:31")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "x-interpolation" (quote ((let ((box (om-load-boxinstance "CHORD" (let ((copy (make-instance (quote ominstance) :name "CHORD" :icon 139))) (setf (instance copy) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100 3300 3600 3800 3900 4300 4500 4800 5000 5100 5500 5700 6000 6200 6300 6700 6900 7200 7400 7500 7900 8100 8400 8600 8700 9100 9300 9600)) :ldur (quote (150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) (setf (edition-params copy) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil))) (setf (create-info copy) (quote ("2021/06/10 8:42:15" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 107 476) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 267 589) (om-make-point 59 30) (list 0 5 6) "(0 5 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "bembon" (let ((copy (make-instance (quote ominstance) :name "bembon" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6900 3300) (8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300))) :lonset (quoteldur (quote ((174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (349 349 349 349 349 349 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174) (86 86 86 86) (86 86 86 86) (86 86 86 86) (86 86 86 86) (174 174 174 174) (174 174 174 174) (174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (174 174 174 349 349 174 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174))) :lvel (quoteloffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil))) (setf (create-info copy) (quote ("2021/06/09 9:45:51" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 68 204) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 347 589) (om-make-point 87 30) (list 0 100 100) "(0 100 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 84 11) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 539 135) (quote "x-interpolation performs a controlled approximation from a source list to a target list, $given an interpolation trajectory/path. In other words, it mutates the source list into $the target list. The trajectory list must have at least two values (starting and ending $points), all between 0.0 and 1.0, which represent the normalized percentage of linear $interpolation from source to target.$$The source list can be a nested list or arbitrary depth and length, while the target list $must be a flatten (depth 1) list.") "" (om-make-point 25 68) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 70 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 90 45) (quote "target pitch $collection") "" (om-make-point 438 631) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 30) (quote "original pitches") "" (om-make-point 437 709) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "INTERPOLATION PATH" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 5 6)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 0 100 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 1))) (om-make-point 220 629) (om-make-point 215 111) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 5.0 6.0)) (quote (0.0 100.0 100.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "INTERPOLATION PATH") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CROSS-INTERPOLATED CHORD SEQUENCE" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 79 846) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7696 7400 6900 6900 7400 7696 6496 6200 6900) (7400 6900 6492 6492 6900 7400 3300) (6200) (8100 7684 7400 7400 7684 8100 5700 6484) (4080) (7676 7400 6900 6900 7400 7676 6476 6200 6900) (3800) (7400 6900 6468 6468 6900 7400) (6200) (8100 7660 7400 7400 7660 8100 3380) (6456) (7976 7576 7124 7124 7576 7976 6376 6976) (3974) (8328 7972 7400 7400 7972 8328 3372) (8100 7570 7200 7200 7570 8100 6370 6000 6900 3300) (7568 7200 6900 6900 7200 7568 6000 6900) (7200 6900 6366 6366 6900 7200 2901) (6364) (7625 7400 6900 6900 7400 7625 6425) (3960) (7558 7200 6900 6900 7200 7558 6358 6000 6900) (3300) (6354 6000 6900) (2943) (6350) (6200 6651) (6347 6700 3947) (6345 6745) (6743 6343 5957 5957 6343 6743 6343 5957 6743 3557) (7581 7400 6741 6741 7400 7581 7159) (7400 7161 6339 6339 7161 7400 6739 2984) (6337) (8100 7569 7200 7200 7569 8100 6735) (3933) (7931 7531 7169 7169 7531 7931 6731 6331 6200 7169) (3571) (7527 7173 6727 6727 7173 7527 6200) (6725 6325 7175) (8400 8100 7523 7523 8100 8400 3032) (8379 7921 7400 7400 7921 8379) (3919) (8100 7517 7200 7200 7517 8100 6317 6000 6900 3300) (8100 7515 7200 7200 7515 8100 6315 6000 6900 3300) (8100 7513 7200 7200 7513 8100 6313 6000 6900 3300) (8100 7511 7200 7200 7511 8100 6311 6000 6900 3300) (8100 7509 7200 7200 7509 8100 6309 6000 6900 3300) (8100 7507 7200 7200 7507 8100 6307 6000 6900 3300) (6305 6005 6700 3300) (6303 6003 6700 3300) (6301 6001 6700 3300) (6300 6000 6700 3300) (6300 6000 6700 3300) (6300 6000 6900 3300) (8100 7500 7400 7400 7500 8100 6300 6200 6900 3800) (7500 7400 6900 6900 7400 7500 6300 6200 6900) (7400 6900 6300 6300 6900 7400 3300) (6200) (8100 7500 7400 7400 7500 8100 5700 6300) (3900) (7500 7400 6900 6900 7400 7500 6300 6200 6900) (3800) (7400 6900 6300 6300 6900 7400) (6200) (8100 7500 7400 7400 7500 8100 3300) (6300) (7900 7500 7200 7200 7500 7900 6300 6900) (3900) (8400 7900 7400 7400 7900 8400 3300) (8100 7500 7200 7200 7500 8100 6300 6000 6900 3300) (7500 7200 6900 6900 7200 7500 6000 6900) (7200 6900 6300 6300 6900 7200 3100) (6300) (7500 7400 6900 6900 7400 7500 6300) (3900) (7500 7200 6900 6900 7200 7500 6300 6000 6900) (3300) (6300 6000 6900) (3100) (6300) (6200 6700) (6300 6700 3900) (6300 6700) (6700 6300 6000 6000 6300 6700 6300 6000 6700 3600) (7500 7400 6700 6700 7400 7500 7200) (7400 7200 6300 6300 7200 7400 6700 3100) (6300) (8100 7500 7200 7200 7500 8100 6700) (3900) (7900 7500 7200 7200 7500 7900 6700 6300 6200 7200) (3600) (7500 7200 6700 6700 7200 7500 6200) (6700 6300 7200) (8400 8100 7500 7500 8100 8400 3100) (8400 7900 7400 7400 7900 8400) (3900) (8100 7500 7200 7200 7500 8100 6300 6000 6900 3300) (8100 7500 7200 7200 7500 8100 6300 6000 6900 3300) (8100 7500 7200 7200 7500 8100 6300 6000 6900 3300) (8100 7500 7200 7200 7500 8100 6300 6000 6900 3300) (8100 7500 7200 7200 7500 8100 6300 6000 6900 3300) (8100 7500 7200 7200 7500 8100 6300 6000 6900 3300))) :lonset (quoteldur (quote ((174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (349 349 349 349 349 349 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174) (86 86 86 86) (86 86 86 86) (86 86 86 86) (86 86 86 86) (174 174 174 174) (174 174 174 174) (174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (174 174 174 349 349 174 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174))) :lvel (quoteloffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1080 393) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-INTERPOLATION" (quote x-interpolation) (quote ((om-load-inputfun (quote input-funbox) "list" "A-LIST" (list (list 7200 7700 8100) (list 6200 6700 7100) (list 7600 8100 7200) (list 5300 5900 5000) (list 7900 7200 7600) (list 5700 5000 5300) (list 7100 6400 6700) (list 6000 6500 6900))) (om-load-inputfun (quote input-funbox) "list" "B-LIST" (list 4500 5700 6402 6900 7286 7602 7868 8100 8304 8486)) (om-load-inputfun (quote input-funbox) "list" "TRAJ" (list 0.0 1.0 0.0)))) (om-make-point 43 765) (om-make-point 189 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TARGET PC" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 111 539) (om-make-point 96 201) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100 3300 3600 3800 3900 4300 4500 4800 5000 5100 5500 5700 6000 6200 6300 6700 6900 7200 7400 7500 7900 8100 8400 8600 8700 9100 9300 9600)) :ldur (quote (150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RANDOM CHORDS WITH SMOOTH VOICE LEADING" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 36 261) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6900 3300) (8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300))) :lonset (quoteldur (quote ((174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (349 349 349 349 349 349 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174) (86 86 86 86) (86 86 86 86) (86 86 86 86) (86 86 86 86) (174 174 174 174) (174 174 174 174) (174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (174 174 174 349 349 174 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174))) :lvel (quoteloffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 9 1 nil 0) (3 0 9 2 nil 0) (11 0 10 0 nil 0) (13 0 11 0 nil 0) (12 1 11 1 nil 0) (9 2 11 2 nil 0) (0 0 12 0 nil 0) (2 0 13 0 nil 0))) nil 6.19))
