; OM File Header - Saved 2021/04/01 0:20:52
; (6.18 :patc (om-make-point 118 60) (om-make-point 434 25) (om-make-point 968 987) "" 183 0 "2021/03/31 23:09:59" "2021/03/31 23:34:46")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "_k-means-2" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 74 30) (quote "k clusters") "" (om-make-point 186 496) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-chords" (om-load-patch-abs1 "random-chords" (quote ((let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 143 472) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 25 404) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 35 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -5) (om-load-inputfun (quote input-funbox) "max" "HIGH" 5))) (om-make-point 8 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 64 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 129 509) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 111 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 108 10) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DISTORTION" (quote distortion) (quote ((om-load-inputfun (quote input-funbox) "midicent list" "MC-LIST" (list 100 200 300 400 500)) (om-load-inputfun (quote input-funbox) "distortion index" "DIST" 0.25))) (om-make-point 151 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 110.0))) (om-make-point 132 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 119 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERPOLATION" (quote interpolation) (quote ((om-load-inputfun (quote input-funbox) "number or list" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "number or list" "END" 1) (om-load-inputfun (quote input-funbox) "integer" "SAMPLES" 20) (om-load-inputfun (quote input-funbox) "number" "CURVE" 0.0))) (om-make-point 122 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (6 0 0 1 nil 0) (2 0 1 0 nil 0) (4 0 1 1 nil 0) (3 0 2 0 nil 0) (11 0 4 0 nil 0) (0 0 5 0 nil 0) (11 0 6 0 nil 0) (10 0 8 0 nil 0) (7 0 9 0 nil 0) (9 0 10 0 nil 0) (10 0 11 0 nil 0) (8 0 11 1 nil 0))) 6.18 nil "" (om-make-point 568 193) (om-make-point 243 582)) (quote nil) (om-make-point 563/6 1039/6) nil (list (list (list 4100.0 5157.8945 5776.8423 6215.7896 6556.0 6834.737 7069.1577 7273.684 7453.684 7613.8945) (list 4600.0 5231.579 5601.3687 5863.158 6066.0 6232.9473 6372.632 6494.737 6602.737 6697.579) (list 4500.0 5036.8423 5351.263 5573.684 5746.0 5888.1055 6006.737 6110.5264 6202.5264 6282.842) (list 4700.0 5710.5264 6301.7896 6721.0527 7046.0 7312.316 7536.2105 7731.579 7903.579 8056.5264) (list 4000.0 4726.316 5151.4736 5452.6314 5686.0 5877.7896 6038.5264 6178.9473 6302.9473 6412.3154) (list 5000.0 6105.263 6751.8945 7210.5264 7566.0 7857.1577 8102.1055 8315.789 8503.789 8671.264) (list 4800.0 5100.0 5276.0 5400.0 5496.0 5576.0 5642.0 5700.0 5752.0 5796.0) (list 4500.0 5652.6314 6326.9473 6805.263 7176.0 7479.579 7735.0527 7957.8945 8153.8945 8328.632) (list 4600.0 5373.684 5826.5264 6147.368 6396.0 6600.2105 6771.4736 6921.0527 7053.0527 7169.684) (list 4400.0 5600.0 6302.0 6800.0 7186.0 7502.0 7768.0 8000.0 8204.0 8386.0) (list 4200.0 4689.4736 4976.2105 5178.9473 5336.0 5465.684 5573.7896 5668.421 5752.421 5825.4736) (list 4100.0 4494.737 4726.1055 4889.4736 5016.0 5120.842 5207.8945 5284.2105 5352.2105 5410.737) (list 4300.0 4884.2105 5226.316 5468.421 5656.0 5810.5264 5939.684 6052.632 6152.632 6240.2105) (list 4300.0 5168.421 5676.632 6036.8423 6316.0 6545.0527 6737.368 6905.263 7053.263 7184.421) (list 4800.0 5621.0527 6101.579 6442.1055 6706.0 6922.632 7104.421 7263.1577 7403.1577 7527.0527) (list 4700.0 5047.368 5251.0527 5394.737 5506.0 5598.421 5674.9473 5742.1055 5802.1055 5853.368) (list 5000.0 5678.9473 6076.421 6357.8945 6576.0 6755.368 6905.579 7036.8423 7152.8423 7254.9473) (list 4400.0 4842.1055 5101.1577 5284.2105 5426.0 5543.263 5640.842 5726.3154 5802.3154 5868.1055) (list 4800.0 5763.1577 6326.737 6726.316 7036.0 7289.8945 7503.263 7689.4736 7853.4736 7999.1577) (list 4200.0 5115.7896 5651.684 6031.579 6326.0 6567.4736 6770.316 6947.3687 7103.3687 7241.7896))) nil "random-chords"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "A SEQUENCE OF CHORDS" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 74 242) (om-make-point 284 185) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4100 5158 5777 6216 6556 6835 7069 7274 7454 7614) (4600 5232 5601 5863 6066 6233 6373 6495 6603 6698) (4500 5037 5351 5574 5746 5888 6007 6111 6203 6283) (4700 5711 6302 6721 7046 7312 7536 7732 7904 8057) (4000 4726 5151 5453 5686 5878 6039 6179 6303 6412) (5000 6105 6752 7211 7566 7857 8102 8316 8504 8671) (4800 5100 5276 5400 5496 5576 5642 5700 5752 5796) (4500 5653 6327 6805 7176 7480 7735 7958 8154 8329) (4600 5374 5827 6147 6396 6600 6771 6921 7053 7170) (4400 5600 6302 6800 7186 7502 7768 8000 8204 8386) (4200 4689 4976 5179 5336 5466 5574 5668 5752 5825) (4100 4495 4726 4889 5016 5121 5208 5284 5352 5411) (4300 4884 5226 5468 5656 5811 5940 6053 6153 6240) (4300 5168 5677 6037 6316 6545 6737 6905 7053 7184) (4800 5621 6102 6442 6706 6923 7104 7263 7403 7527) (4700 5047 5251 5395 5506 5598 5675 5742 5802 5853) (5000 5679 6076 6358 6576 6755 6906 7037 7153 7255) (4400 4842 5101 5284 5426 5543 5641 5726 5802 5868) (4800 5763 6327 6726 7036 7290 7503 7689 7853 7999) (4200 5116 5652 6032 6326 6567 6770 6947 7103 7242))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4100)) :ldur (quote ((300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 746 776) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 516 777) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CLUSTER 4 " (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 714 821) (om-make-point 225 148) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4700 5711 6302 6721 7046 7312 7536 7732 7904 8057) (5000 6105 6752 7211 7566 7857 8102 8316 8504 8671) (4500 5653 6327 6805 7176 7480 7735 7958 8154 8329) (4400 5600 6302 6800 7186 7502 7768 8000 8204 8386) (4800 5763 6327 6726 7036 7290 7503 7689 7853 7999))) :lonset (quote (0 200 400 600 800 1100)) :ldur (quote ((300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CLUSTER 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 481 821) (om-make-point 225 148) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4100 5158 5777 6216 6556 6835 7069 7274 7454 7614) (4600 5374 5827 6147 6396 6600 6771 6921 7053 7170) (4300 5168 5677 6037 6316 6545 6737 6905 7053 7184) (4800 5621 6102 6442 6706 6923 7104 7263 7403 7527) (5000 5679 6076 6358 6576 6755 6906 7037 7153 7255) (4200 5116 5652 6032 6326 6567 6770 6947 7103 7242))) :lonset (quote (0 200 400 600 800 1000 1300)) :ldur (quote ((300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 278 778) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 156 501) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CLUSTER 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 249 823) (om-make-point 225 148) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4600 5232 5601 5863 6066 6233 6373 6495 6603 6698) (4500 5037 5351 5574 5746 5888 6007 6111 6203 6283) (4000 4726 5151 5453 5686 5878 6039 6179 6303 6412) (4300 4884 5226 5468 5656 5811 5940 6053 6153 6240))) :lonset (quote (0 200 400 600 900)) :ldur (quote ((300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 57 778) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CLUSTER 1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 20 823) (om-make-point 225 148) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 5100 5276 5400 5496 5576 5642 5700 5752 5796) (4200 4689 4976 5179 5336 5466 5574 5668 5752 5825) (4100 4495 4726 4889 5016 5121 5208 5284 5352 5411) (4700 5047 5251 5395 5506 5598 5675 5742 5802 5853) (4400 4842 5101 5284 5426 5543 5641 5726 5802 5868))) :lonset (quote (0 200 400 600 800 1100)) :ldur (quote ((300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NESTED-NTH" (quote nested-nth) (quote ((om-load-inputfun (quote input-funbox) "list" "A" (list (list 0) 1 (list (list 2) 3) (list (list (list 4))))) (om-load-inputfun (quote input-funbox) "integer" "B-LIST" (list "a" "b" "c" "d" "e")))) (om-make-point 90 700) nil (list (list (list (list 4800 5100 5276 5400 5496 5576 5642 5700 5752 5796) (list 4200 4689 4976 5179 5336 5466 5574 5668 5752 5825) (list 4100 4495 4726 4889 5016 5121 5208 5284 5352 5411) (list 4700 5047 5251 5395 5506 5598 5675 5742 5802 5853) (list 4400 4842 5101 5284 5426 5543 5641 5726 5802 5868)) (list (list 4600 5232 5601 5863 6066 6233 6373 6495 6603 6698) (list 4500 5037 5351 5574 5746 5888 6007 6111 6203 6283) (list 4000 4726 5151 5453 5686 5878 6039 6179 6303 6412) (list 4300 4884 5226 5468 5656 5811 5940 6053 6153 6240)) (list (list 4100 5158 5777 6216 6556 6835 7069 7274 7454 7614) (list 4600 5374 5827 6147 6396 6600 6771 6921 7053 7170) (list 4300 5168 5677 6037 6316 6545 6737 6905 7053 7184) (list 4800 5621 6102 6442 6706 6923 7104 7263 7403 7527) (list 5000 5679 6076 6358 6576 6755 6906 7037 7153 7255) (list 4200 5116 5652 6032 6326 6567 6770 6947 7103 7242)) (list (list 4700 5711 6302 6721 7046 7312 7536 7732 7904 8057) (list 5000 6105 6752 7211 7566 7857 8102 8316 8504 8671) (list 4500 5653 6327 6805 7176 7480 7735 7958 8154 8329) (list 4400 5600 6302 6800 7186 7502 7768 8000 8204 8386) (list 4800 5763 6327 6726 7036 7290 7503 7689 7853 7999)))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NESTED-POSITION" (quote nested-position) (quote ((om-load-inputfun (quote input-funbox) "list" "A" (list (list "a") "b" (list (list "c") "d") (list (list (list "e"))))) (om-load-inputfun (quote input-funbox) "integer" "B-LIST" (list "a" "b" "c" "d" "e")))) (om-make-point 19 618) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "K-MEANS" (quote k-means) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list (list 0 1 0) (list -3 -1 2) (list 4 0 9) (list -3 -5 -1) (list 0 4 -3) (list 2 1 -4))) (om-load-inputfun (quote input-funbox) "k (integer)" "K" 4) (om-load-inputfun (quote input-funbox) "weights (optional)" "WEIGHTS" nil))) (om-make-point 24 541) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MOMENTS" (quote list-moments) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "list" "MOMENTS" (list 0 1 2 3)))) (om-make-point 43 438) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 74 1) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 319 135) (quote "k-means is an unsupervised clustering algorithm. $It takes a data set and groups it into k groups, $where k is the number of assumed classes in the $data. The clustering can be optionally weighted. $By default, all elements have equal weights.$$The weights and every data item/list must have $the same length.") "" (om-make-point 14 47) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 59 24) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 1 nil 0) (12 0 3 0 nil 0) (12 0 4 0 nil 0) (3 0 5 1 nil 0) (4 0 6 1 nil 0) (12 0 7 0 nil 0) (7 0 9 1 nil 0) (12 0 10 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (2 1 12 1 nil 0) (14 0 13 0 nil 0) (15 0 13 1 nil 0) (15 0 14 0 nil 0) (8 0 14 1 nil 0) (2 1 15 0 nil 0))) nil 6.18))
