; OM File Header - Saved 2021/03/30 15:37:45
; (6.18 :patc (om-make-point 118 10) (om-make-point 488 82) (om-make-point 670 907) "" 183 0 "2021/03/30 13:38:29" "2021/03/30 15:36:42")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"_fill-range.omp\"" "#P\"_list-path.omp\""))
(in-package :om)(load-lib-for (quote ("OM-FTH")))(setf *om-current-persistent* (om-load-patch1 "_x-interpolation" (quote ((let ((box (om-load-editor-box1 "INTERPOLATION PATH" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100 0)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 311 469) (om-make-point 215 111) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200)) (quote (0 100 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CROSS-INTERPOLATED CHORD SEQUENCE" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 114 686) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3867 4268 5261 6912 7853) (4048 4162 5050 7101 7918) (3738 4054 5083 6816 7576) (3944 4821 5466 6780 7360) (4453 4886 5233 7113 7514) (3863 4606 5015 7384 7555) (3956 4435 5754 7347 7852) (3725 4024 5954 7546 7696) (4535 5018 6170 7441 8142) (4095 5193 6643 7476 7883) (3947 5547 6688 7268 8032) (4269 5170 6606 7114 7818) (3941 5172 6761 7334 7384) (4238 6001 6897 7225 7634) (4774 6211 6698 7427 7595) (4452 5949 6486 7621 7639) (4961 6037 6461 7596 7858) (4955 5771 6434 7254 7946) (5458 5693 6868 7125 7856) (5546 6035 6642 6897 7655) (5160 6014 6400 6409 7892) (4297 6035 6167 6230 7846) (4292 5712 6164 6407 8074) (4336 5464 6415 6644 8372) (3777 4786 6381 6422 8091) (3604 4993 6201 6391 7890) (3791 5512 5710 5979 8089) (5020 5699 5730 6186 8379) (5019 5189 5681 6212 7922) (4522 4524 5015 6387 8087) (4005 4496 5203 5999 7913) (4013 4308 5494 6391 8120) (4007 4507 5994 6713 8392) (3796 4794 5501 6909 8110) (3794 4807 5005 6705 8399) (3804 5696 5705 6404 7203) (4002 5701 5996 6198 6903) (4000 5200 6200 6200 6900) (3601 5204 5997 5998 6403) (4796 5201 6195 6197 6398) (5205 5496 6006 6202 6695) (4494 4504 5706 6010 6902) (4298 4496 5712 6000 7184) (4011 4484 4998 5702 7181) (4024 4319 5016 5497 7398) (3794 4310 4481 5720 7181) (3602 3983 4505 5718 6919) (3611 4261 4296 5025 6701) (4269 4327 4474 5009 6720) (3817 4322 4984 5229 6385) (4025 4486 4779 5470 5980) (4295 4306 4317 5034 5724) (3808 4274 4526 4809 5455) (3961 3980 3999 4790 6037) (4301 4315 4507 6026 6237) (3969 4018 4070 6444 6649) (4062 4560 6450 6653 7349) (4544 5470 6670 6704 7214) (3635 6039 6473 6708 7399) (4742 6740 6886 7437 7604) (4591 6888 7432 7621 7954) (4360 6388 7553 7557 7957) (4291 6052 7553 7845 7872) (4439 5548 6904 7813 7919) (4850 5292 7123 7407 7809) (5450 5472 6662 7620 7693) (4378 6477 6981 7264 8289) (6003 6765 6883 7415 8310) (6431 7352 7644 8158 8316) (5270 6267 7638 8177 8364) (3930 5401 7482 8077 8233) (4704 4875 8011 8340 8385) (4362 4364 6890 8194 8369) (3766 4222 6925 7845 8095) (4370 6664 6687 8217 8266))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15100)) :ldur (quote ((300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-INTERPOLATION" (quote x-interpolation) (quote ((om-load-inputfun (quote input-funbox) "list" "A-LIST" (list (list 7200 7700 8100) (list 6200 6700 7100) (list 7600 8100 7200) (list 5300 5900 5000) (list 7900 7200 7600) (list 5700 5000 5300) (list 7100 6400 6700) (list 6000 6500 6900))) (om-load-inputfun (quote input-funbox) "list" "B-LIST" (list 4500 5700 6402 6900 7286 7602 7868 8100 8304 8486)) (om-load-inputfun (quote input-funbox) "list" "TRAJ" (list 0.0 1.0 0.0)))) (om-make-point 184 605) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "_fill-range" (quote ("elements" "examples" "_fill-range")) (quote nil) (om-make-point 186 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TARGET PC" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 202 379) (om-make-point 96 201) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 3800 4000 4300 4500 4800 5000 5200 5500 5700 6000 6200 6400 6700 6900 7200 7400 7600 7900 8100 8400)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RANDOM CHORDS WITH SMOOTH VOICE LEADING" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 36 101) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3867 4268 5261 6912 7853) (4049 4158 5051 7098 7918) (3734 4057 5088 6811 7575) (3939 4823 5463 6787 7356) (4447 4896 5237 7103 7504) (3873 4622 5017 7382 7548) (3948 4423 5764 7337 7843) (3708 4030 5943 7534 7718) (4545 5023 6162 7452 8153) (4126 5191 6625 7500 7877) (3928 5565 6683 7293 8007) (4256 5157 6566 7077 7783) (3912 5158 6791 7303 7377) (4204 6001 6895 7239 7653) (4758 6218 6697 7444 7592) (4420 5914 6544 7635 7666) (4931 6065 6507 7593 7826) (4916 5832 6462 7300 7986) (5418 5686 6838 7054 7814) (5594 6072 6580 6894 7713) (5112 6030 6401 6419 7883) (4294 6080 6123 6269 7775) (4280 5730 6111 6418 8037) (4396 5404 6440 6553 8326) (3735 4759 6347 6462 8074) (3612 4979 6202 6371 7870) (3770 5542 5733 5929 8062) (5074 5697 5812 6147 8322) (5080 5153 5623 6251 7992) (4604 4612 5069 6339 8040) (4029 4478 5218 5993 7968) (4078 4347 5466 6344 8221) (4051 4553 5954 6793 8341) (3763 4748 5512 6987 8194) (3722 4887 5067 6766 8386) (3869 5630 5788 6470 7260) (4092 5719 5861 6138 7017) (4131 5216 6136 6247 6825) (3639 5345 5878 5921 6516) (4734 5217 6109 6149 6369) (5265 5450 6074 6220 6640) (4443 4537 5760 6094 6914) (4287 4470 5789 6002 7079) (4070 4401 4988 5711 7081) (4126 4400 5087 5486 7391) (3771 4345 4412 5793 7114) (3608 3930 4519 5775 6980) (3641 4156 4285 5094 6705) (4195 4391 4411 5031 6766) (3852 4369 4950 5289 6355) (4071 4461 4741 5414 5942) (4288 4316 4344 5090 5764) (3820 4236 4564 4823 5388) (3910 3954 3998 4776 6086) (4302 4332 4515 6057 6280) (3936 4038 4144 6491 6596) (4121 4616 6497 6608 7301) (4581 5444 6645 6708 7225) (3662 6068 6529 6714 7398) (4703 6768 6877 7463 7606) (4646 6881 7452 7634 7987) (4392 6381 7528 7534 7988) (4286 6077 7530 7818 7859) (4413 5568 6906 7776 7927) (4868 5326 7095 7409 7775) (5434 5463 6650 7626 7723) (4400 6498 7003 7282 8259) (6004 6780 6879 7419 8289) (6437 7343 7652 8169 8300) (5281 6277 7644 8189 8358) (3921 5389 7492 8074 8249) (4695 4882 8003 8335 8384) (4366 4368 6889 8199 8367) (3765 4220 6926 7843 8095) (4370 6664 6687 8217 8266))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15100)) :ldur (quote ((300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "_list-path" (quote ("elements" "examples" "_list-path")) (quote nil) (om-make-point 64 32) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (5 1 2 0 ((om-make-point 146 291) (om-make-point 146 455) (om-make-point 146 596) (om-make-point 206 605)) 0) (4 1 2 1 nil 0) (0 2 2 2 nil 0) (3 0 4 0 nil 0) (6 0 5 0 nil 0))) nil 6.18))
