; OM File Header - Saved 2021/03/31 10:38:38
; (6.18 :patc (om-make-point 118 10) (om-make-point 257 25) (om-make-point 661 997) "" 183 0 "2021/03/30 13:38:29" "2021/03/31 10:38:38")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"_fill-range.omp\"" "#P\"_list-path.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "_x-interpolation" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 84 11) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 539 135) (quote "x-interpolation performs a controlled approximation from a source list to a target list, $given an interpolation trajectory/path. In other words, it mutates the source list into $the target list. The trajectory list must have at least two values (starting and ending $points), all between 0.0 and 1.0, which represent the normalized percentage of linear $interpolation from source to target.$$The source list can be a nested list or arbitrary depth and length, while the target list $must be a flatten (depth 1) list.") "" (om-make-point 25 68) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 70 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 90 45) (quote "target pitch $collection") "" (om-make-point 529 631) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 30) (quote "original pitches") "" (om-make-point 528 709) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "INTERPOLATION PATH" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 75 100 25 0)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 311 629) (om-make-point 215 111) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400)) (quote (0 75 100 25 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CROSS-INTERPOLATED CHORD SEQUENCE" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 114 846) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3867 4268 5261 6912 7853) (4047 4164 5049 7102 7917) (3739 4052 5081 6818 7577) (3946 4820 5468 6776 7361) (4456 4880 5231 7119 7520) (3858 4597 5014 7386 7559) (3961 4442 5748 7352 7857) (3734 4021 5959 7553 7685) (4530 5016 6174 7435 8136) (4080 5194 6652 7464 7885) (3957 5539 6690 7255 8045) (4276 5176 6626 7132 7835) (3955 5178 6747 7350 7388) (4255 6000 6898 7218 7625) (4782 6208 6699 7419 7597) (4469 5966 6456 7614 7626) (4976 6023 6438 7598 7874) (4974 5741 6419 7231 7927) (5478 5696 6883 7161 7877) (5523 6018 6671 6899 7627) (5180 6007 6400 6404 7896) (4299 6017 6183 6215 7873) (4296 5706 6182 6404 8087) (4318 5482 6408 6672 8386) (3789 4793 6391 6411 8095) (3602 4997 6200 6395 7895) (3796 5506 5705 5989 8094) (5010 5700 5715 6193 8389) (5010 5194 5691 6206 7911) (4511 4512 5007 6393 8094) (4003 4498 5202 5999 7906) (4006 4304 5497 6395 8110) (4003 4504 5997 6706 8396) (3798 4797 5501 6905 8105) (3797 4804 5003 6703 8399) (3802 5698 5702 6402 7202) (4001 5700 5998 6199 6902) (4000 5200 6200 6200 6900) (3602 5206 5995 5997 6405) (4795 5201 6193 6196 6397) (5208 5494 6009 6202 6693) (4491 4506 5710 6015 6902) (4297 4494 5718 6000 7175) (4017 4476 4997 5703 7171) (4036 4328 5025 5496 7397) (3791 4315 4471 5730 7172) (3603 3974 4507 5727 6929) (3617 4242 4294 5038 6702) (4253 4341 4460 5014 6729) (3825 4334 4976 5243 6378) (4037 4479 4769 5455 5969) (4293 4309 4325 5051 5736) (3812 4261 4539 4814 5432) (3942 3970 3999 4784 6056) (4301 4322 4510 6039 6255) (3953 4028 4105 6466 6624) (4092 4588 6473 6630 7325) (4562 5457 6658 6706 7219) (3649 6053 6501 6711 7398) (4723 6754 6882 7450 7605) (4618 6885 7442 7628 7971) (4376 6384 7541 7546 7973) (4288 6065 7541 7831 7866) (4426 5558 6905 7794 7923) (4859 5309 7109 7408 7792) (5442 5468 6656 7623 7708) (4389 6487 6992 7273 8274) (6004 6772 6881 7417 8300) (6434 7348 7648 8163 8308) (5276 6272 7641 8183 8361) (3925 5395 7487 8075 8241) (4699 4879 8007 8338 8385) (4364 4366 6889 8196 8368) (3765 4221 6926 7844 8095) (4370 6664 6687 8217 8266))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15100)) :ldur (quote ((300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-INTERPOLATION" (quote x-interpolation) (quote ((om-load-inputfun (quote input-funbox) "list" "A-LIST" (list (list 7200 7700 8100) (list 6200 6700 7100) (list 7600 8100 7200) (list 5300 5900 5000) (list 7900 7200 7600) (list 5700 5000 5300) (list 7100 6400 6700) (list 6000 6500 6900))) (om-load-inputfun (quote input-funbox) "list" "B-LIST" (list 4500 5700 6402 6900 7286 7602 7868 8100 8304 8486)) (om-load-inputfun (quote input-funbox) "list" "TRAJ" (list 0.0 1.0 0.0)))) (om-make-point 184 765) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "_fill-range" (quote ("elements" "examples" "_fill-range")) (quote nil) (om-make-point 186 465) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TARGET PC" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 202 539) (om-make-point 96 201) (let ((thechord (make-instance (quote chord) :lmidic (quote (2400 2600 2800 3100 3300 3600 3800 4000 4300 4500 4800 5000 5200 5500 5700 6000 6200 6400 6700 6900 7200 7400 7600 7900 8100 8400 8600 8800 9100 9300 9600)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RANDOM CHORDS WITH SMOOTH VOICE LEADING" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 36 261) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3867 4268 5261 6912 7853) (4049 4158 5051 7098 7918) (3734 4057 5088 6811 7575) (3939 4823 5463 6787 7356) (4447 4896 5237 7103 7504) (3873 4622 5017 7382 7548) (3948 4423 5764 7337 7843) (3708 4030 5943 7534 7718) (4545 5023 6162 7452 8153) (4126 5191 6625 7500 7877) (3928 5565 6683 7293 8007) (4256 5157 6566 7077 7783) (3912 5158 6791 7303 7377) (4204 6001 6895 7239 7653) (4758 6218 6697 7444 7592) (4420 5914 6544 7635 7666) (4931 6065 6507 7593 7826) (4916 5832 6462 7300 7986) (5418 5686 6838 7054 7814) (5594 6072 6580 6894 7713) (5112 6030 6401 6419 7883) (4294 6080 6123 6269 7775) (4280 5730 6111 6418 8037) (4396 5404 6440 6553 8326) (3735 4759 6347 6462 8074) (3612 4979 6202 6371 7870) (3770 5542 5733 5929 8062) (5074 5697 5812 6147 8322) (5080 5153 5623 6251 7992) (4604 4612 5069 6339 8040) (4029 4478 5218 5993 7968) (4078 4347 5466 6344 8221) (4051 4553 5954 6793 8341) (3763 4748 5512 6987 8194) (3722 4887 5067 6766 8386) (3869 5630 5788 6470 7260) (4092 5719 5861 6138 7017) (4131 5216 6136 6247 6825) (3639 5345 5878 5921 6516) (4734 5217 6109 6149 6369) (5265 5450 6074 6220 6640) (4443 4537 5760 6094 6914) (4287 4470 5789 6002 7079) (4070 4401 4988 5711 7081) (4126 4400 5087 5486 7391) (3771 4345 4412 5793 7114) (3608 3930 4519 5775 6980) (3641 4156 4285 5094 6705) (4195 4391 4411 5031 6766) (3852 4369 4950 5289 6355) (4071 4461 4741 5414 5942) (4288 4316 4344 5090 5764) (3820 4236 4564 4823 5388) (3910 3954 3998 4776 6086) (4302 4332 4515 6057 6280) (3936 4038 4144 6491 6596) (4121 4616 6497 6608 7301) (4581 5444 6645 6708 7225) (3662 6068 6529 6714 7398) (4703 6768 6877 7463 7606) (4646 6881 7452 7634 7987) (4392 6381 7528 7534 7988) (4286 6077 7530 7818 7859) (4413 5568 6906 7776 7927) (4868 5326 7095 7409 7775) (5434 5463 6650 7626 7723) (4400 6498 7003 7282 8259) (6004 6780 6879 7419 8289) (6437 7343 7652 8169 8300) (5281 6277 7644 8189 8358) (3921 5389 7492 8074 8249) (4695 4882 8003 8335 8384) (4366 4368 6889 8199 8367) (3765 4220 6926 7843 8095) (4370 6664 6687 8217 8266))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15100)) :ldur (quote ((300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "_list-path" (quote ("elements" "examples" "_list-path")) (quote nil) (om-make-point 64 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 6 1 nil 0) (10 1 7 0 ((om-make-point 146 451) (om-make-point 146 455) (om-make-point 146 596) (om-make-point 206 765)) 0) (9 1 7 1 nil 0) (5 2 7 2 nil 0) (8 0 9 0 nil 0) (11 0 10 0 nil 0))) nil 6.18))