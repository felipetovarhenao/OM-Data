; OM File Header - Saved 2021/05/27 8:59:23
; (6.18 :patc (om-make-point 172 110) (om-make-point 425 29) (om-make-point 939 881) "" 183 0 "2021/05/04 17:11:06" "2021/05/26 16:01:09")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "markov-run" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 188 61) (quote "if no initial state is specified (i.e. nil), the initial state is randomly chosen.") "" (om-make-point 669 401) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 146 30) (quote "initial state (optional)") "" (om-make-point 550 332) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 552 359) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "chords" (let ((copy (make-instance (quote omlistinstance) :name "chords" :icon 129))) (setf (instance copy) (list (list 5300 6500 6900 7200) (list 5500 6500 7100 7400) (list 5200 6400 6900 7200) (list 4600 6500 7000 7400) (list 4800 6400 7000 7200) (list 4900 6500 6800 7200) (list 5200 6700 7000 7200))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2021/05/04 18:19:52" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 256 214) "chords" (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 6 434) (om-make-point 219 30) (list (list 0 1) 3 2 3 (list 0 2) 3 1 2 1 2 (list 0 3) 2) "((0 1) 3 2 3 (0 2) 3 1 2 1 2 (0 3) 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NESTED-NTH" (quote nested-nth) (quote ((om-load-inputfun (quote input-funbox) "list" "A" (list (list 0) 1 (list (list 2) 3) (list (list (list 4))))) (om-load-inputfun (quote input-funbox) "integer" "B-LIST" (list "a" "b" "c" "d" "e")))) (om-make-point 123 469) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 101 2) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 77 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 366 158) (quote "markov-run takes a transition probability matrix and outputs a sequence of a given length.$$In this example, a 'hand-made' matrix specifies the transition probabilities between 7 chords. The states in the matrix are not the chords themselves, but their positions in the CHORD-SEQ.$$The output chord sequence is then mapped into an arpeggio pattern.") "" (om-make-point 12 48) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 80 64) (quote "transition probability matrix") "" (om-make-point 641 181) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 123 30) (quote "number of chords") "" (om-make-point 478 313) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 195 30) (quote "positions for arpeggio pattern") "" (om-make-point 14 403) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 500 339) (om-make-point 34 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 225 597) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 212 545) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH 2" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 305 479) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MARKOV-GENERATED SEQUENCE" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 110)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 100)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 126 659) (om-make-point 493 198) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300 6500) (7200) (6900) (7200) (5300 6900) (7200) (6500) (6900) (6500) (6900) (5300 7200) (6900) (5500 6500) (7400) (7100) (7400) (5500 7100) (7400) (6500) (7100) (6500) (7100) (5500 7400) (7100) (4800 6400) (7200) (7000) (7200) (4800 7000) (7200) (6400) (7000) (6400) (7000) (4800 7200) (7000) (5300 6500) (7200) (6900) (7200) (5300 6900) (7200) (6500) (6900) (6500) (6900) (5300 7200) (6900) (4900 6500) (7200) (6800) (7200) (4900 6800) (7200) (6500) (6800) (6500) (6800) (4900 7200) (6800) (4800 6400) (7200) (7000) (7200) (4800 7000) (7200) (6400) (7000) (6400) (7000) (4800 7200) (7000) (4900 6500) (7200) (6800) (7200) (4900 6800) (7200) (6500) (6800) (6500) (6800) (4900 7200) (6800) (4800 6400) (7200) (7000) (7200) (4800 7000) (7200) (6400) (7000) (6400) (7000) (4800 7200) (7000) (4600 6500) (7400) (7000) (7400) (4600 7000) (7400) (6500) (7000) (6500) (7000) (4600 7400) (7000) (5200 6700) (7200) (7000) (7200) (5200 7000) (7200) (6700) (7000) (6700) (7000) (5200 7200) (7000) (5300 6500) (7200) (6900) (7200) (5300 6900) (7200) (6500) (6900) (6500) (6900) (5300 7200) (6900) (5200 6400) (7200) (6900) (7200) (5200 6900) (7200) (6400) (6900) (6400) (6900) (5200 7200) (6900) (4800 6400) (7200) (7000) (7200) (4800 7000) (7200) (6400) (7000) (6400) (7000) (4800 7200) (7000) (4900 6500) (7200) (6800) (7200) (4900 6800) (7200) (6500) (6800) (6500) (6800) (4900 7200) (6800) (5200 6700) (7200) (7000) (7200) (5200 7000) (7200) (6700) (7000) (6700) (7000) (5200 7200) (7000) (4800 6400) (7200) (7000) (7200) (4800 7000) (7200) (6400) (7000) (6400) (7000) (4800 7200) (7000))) :lonset (quote (0 110 220 330 440 550 660 770 880 990 1100 1210 1320 1430 1540 1650 1760 1870 1980 2090 2200 2310 2420 2530 2640 2750 2860 2970 3080 3190 3300 3410 3520 3630 3740 3850 3960 4070 4180 4290 4400 4510 4620 4730 4840 4950 5060 5170 5280 5390 5500 5610 5720 5830 5940 6050 6160 6270 6380 6490 6600 6710 6820 6930 7040 7150 7260 7370 7480 7590 7700 7810 7920 8030 8140 8250 8360 8470 8580 8690 8800 8910 9020 9130 9240 9350 9460 9570 9680 9790 9900 10010 10120 10230 10340 10450 10560 10670 10780 10890 11000 11110 11220 11330 11440 11550 11660 11770 11880 11990 12100 12210 12320 12430 12540 12650 12760 12870 12980 13090 13200 13310 13420 13530 13640 13750 13860 13970 14080 14190 14300 14410 14520 14630 14740 14850 14960 15070 15180 15290 15400 15510 15620 15730 15840 15950 16060 16170 16280 16390 16500 16610 16720 16830 16940 17050 17160 17270 17380 17490 17600 17710 17820 17930 18040 18150 18260 18370 18480 18590 18700 18810 18920 19030 19140 19250 19360 19470 19580 19690 19800 19910 20020 20130 20240 20350 20460 20570 20680 20790 20900 21010 21110)) :ldur (quotelvel (quoteloffset (quote ((0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0))) :lchan (quote ((1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 996 334) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 497 177) (om-make-point 141 130) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 117 110) "untitled"))) (om-set-dialog-item-text rep "((0) 0 3 1 3 5 2 4)
((1) 0 0 0 0 2 0 1)
((2) 0 1 0 4 5 1 3)
((3) 1 2 0 0 5 0 2)
((4) 10 0 2 1 0 3 2)
((5) 0 3 1 3 6 0 2)
((6) 5 0 1 0 4 3 0)
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "matrix" (let ((copy (make-instance (quote omlistinstance) :name "matrix" :icon 129))) (setf (instance copy) (list (list (list 0) 0 3 1 3 5 2 4) (list (list 1) 0 0 0 0 2 0 1) (list (list 2) 0 1 0 4 5 1 3) (list (list 3) 1 2 0 0 5 0 2) (list (list 4) 10 0 2 1 0 3 2) (list (list 5) 0 3 1 3 6 0 2) (list (list 6) 5 0 1 0 4 3 0))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2021/05/04 17:24:46" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 446 105) "matrix" (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORDS" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 350)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 350)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 238 274) (om-make-point 175 190) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300 6500 6900 7200) (5500 6500 7100 7400) (5200 6400 6900 7200) (4600 6500 7000 7400) (4800 6400 7000 7200) (4900 6500 6800 7200) (5200 6700 7000 7200))) :lonset (quote (0 350 700 1050 1400 1750 2100 2450)) :ldur (quote ((350 350 350 350) (350 350 350 350) (350 350 350 350) (350 350 350 350) (350 350 350 350) (350 350 350 350) (350 350 350 350))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MARKOV-RUN" (quote markov-run) (quote ((om-load-inputfun (quote input-funbox) "list" "MATRIX" (list (list (list 0) 0 0 1 0 0) (list (list 1) 1/2 0 0 1/2 0) (list (list 2) 0 2/3 0 0 1/3) (list (list 3) 0 0 1 0 0) (list (list 4) 0 0 0 1 0))) (om-load-inputfun (quote input-funbox) "integer" "ITERATIONS" 5) (om-load-inputfun (quote input-funbox) "atom or list" "INITIAL" nil) (om-load-inputfunmenu1 (quote input-funmenu) "atom or list" "MODE" 1 (list (list "no reset" 0) (list "allow reset" 1))))) (om-make-point 417 389) (om-make-point 245 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 5 0 nil 0) (14 0 13 0 nil 0) (5 0 14 0 nil 0) (15 0 14 1 nil 0) (19 1 15 0 nil 0) (20 0 15 1 nil 0) (13 0 16 1 nil 0) (18 0 17 0 nil 0) (3 0 19 1 nil 0) (18 0 20 0 nil 0) (12 0 20 1 nil 0) (2 0 20 2 nil 0))) nil 6.18))
