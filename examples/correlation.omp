; OM File Header - Saved 2021/05/27 8:59:23
; (6.18 :patc (om-make-point 10 10) (om-make-point 50 50) (om-make-point 1129 905) "" 183 0 "2021/05/16 15:34:32" "2021/05/27 8:59:23")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "correlation" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 381 535) (om-make-point 263 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 235 20) "(-0.9761419 0.97809244 0.26879787)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC-LIB 3" (quote bpc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPC objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 570 257) (om-make-point 177 109) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1 0.1)) (quote (0.3 0.3)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1 0.1)) (quote (0.0 0.0)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05 0.05)) (quote (-0.12 -0.12)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01 0.01)) (quote (0.08 0.08)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04 0.04)) (quote (-0.22 -0.22)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.0)) (quote (0.01 0.01)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03 0.03)) (quote (-0.1 -0.1)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09 0.09)) (quote (0.11 0.11)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06 0.06)) (quote (0.0 0.0)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 0.07)) (quote (0.0 0.0)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05 0.05)) (quote (-0.1 -0.1)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 0.07)) (quote (-0.26 -0.26)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08 0.08)) (quote (0.18 0.18)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06 0.06)) (quote (-0.08 -0.08)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1 0.1)) (quote (0.0 0.0)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06 0.06)) (quote (0.0 0.0)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.0)) (quote (0.14 0.14)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08 0.08)) (quote (-0.18 -0.18)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1 0.1)) (quote (0.2 0.2)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05 0.05)) (quote (0.22 0.22)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04 0.04)) (quote (0.13 0.13)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03 0.03)) (quote (0.0 0.0)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 0.07)) (quote (0.28 0.28)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03 0.03)) (quote (-0.13 -0.13)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1 0.1)) (quote (-0.38 -0.38)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1 0.1)) (quote (-0.34 -0.34)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.0)) (quote (0.03 0.03)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08 0.08)) (quote (-0.24 -0.24)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09 0.09)) (quote (0.12 0.12)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06 0.06)) (quote (-0.18 -0.18)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 446 283) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLOT-POINTS 3" (quote plot-points) (quote ((om-load-inputfun (quote input-funbox) "list" "POINTS" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 597 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC-LIB 2" (quote bpc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPC objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 326 259) (om-make-point 177 109) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01956805 0.01956805)) (quote (0.03526805 0.03526805)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06193904 0.06193904)) (quote (0.06423904 0.06423904)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.020783544 0.020783544)) (quote (0.027683545 0.027683545)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03882246 0.03882246)) (quote (0.05772246 0.05772246)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08598119 0.08598119)) (quote (0.09728119 0.09728119)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0963647 0.0963647)) (quote (0.099564694 0.099564694)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06733272 0.06733272)) (quote (0.082732715 0.082732715)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08519749 0.08519749)) (quote (0.0999975 0.0999975)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.046306268 0.046306268)) (quote (0.054606267 0.054606267)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.051529408 0.051529408)) (quote (0.06132941 0.06132941)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01018033 0.01018033)) (quote (0.02238033 0.02238033)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09953686 0.09953686)) (quote (0.11543686 0.11543686)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09849766 0.09849766)) (quote (0.11489766 0.11489766)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0040392755 0.0040392755)) (quote (0.020339275 0.020339275)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.011540413 0.011540413)) (quote (0.027840414 0.027840414)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09280424 0.09280424)) (quote (0.10310424 0.10310424)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.011535859 0.011535859)) (quote (0.015335859 0.015335859)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.014044965 0.014044965)) (quote (0.024444964 0.024444964)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07200609 0.07200609)) (quote (0.07360609 0.07360609)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.011141693 0.011141693)) (quote (0.021141693 0.021141693)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09135236 0.09135236)) (quote (0.09355236 0.09355236)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09764454 0.09764454)) (quote (0.10054454 0.10054454)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07028036 0.07028036)) (quote (0.08618036 0.08618036)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.091299676 0.091299676)) (quote (0.10699967 0.10699967)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0036841869 0.0036841869)) (quote (0.004484187 0.004484187)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06325707 0.06325707)) (quote (0.06995706 0.06995706)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.012238001 0.012238001)) (quote (0.019638002 0.019638002)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07084631 0.07084631)) (quote (0.08884631 0.08884631)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08081402 0.08081402)) (quote (0.08591402 0.08591402)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07295538 0.07295538)) (quote (0.07425538 0.07425538)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLOT-POINTS 2" (quote plot-points) (quote ((om-load-inputfun (quote input-funbox) "list" "POINTS" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 353 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC-LIB" (quote bpc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPC objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 38 266) (om-make-point 177 109) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0468423 0.0468423)) (quote (-0.0479423 -0.0479423)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03610952 0.03610952)) (quote (-0.04560952 -0.04560952)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0075370073 0.0075370073)) (quote (-0.010237007 -0.010237007)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08168167 0.08168167)) (quote (-0.091181666 -0.091181666)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06448541 0.06448541)) (quote (-0.07748541 -0.07748541)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.025037636 0.025037636)) (quote (-0.034037635 -0.034037635)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.055497494 0.055497494)) (quote (-0.057897494 -0.057897494)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04369526 0.04369526)) (quote (-0.05829526 -0.05829526)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.036358975 0.036358975)) (quote (-0.04645898 -0.04645898)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08848033 0.08848033)) (quote (-0.10108033 -0.10108033)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.029595579 0.029595579)) (quote (-0.04049558 -0.04049558)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.018007815 0.018007815)) (quote (-0.023707815 -0.023707815)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09854308 0.09854308)) (quote (-0.11604308 -0.11604308)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05918218 0.05918218)) (quote (-0.064482175 -0.064482175)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02755469 0.02755469)) (quote (-0.03435469 -0.03435469)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.019313967 0.019313967)) (quote (-0.03381397 -0.03381397)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.076259606 0.076259606)) (quote (-0.091259606 -0.091259606)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.036349334 0.036349334)) (quote (-0.049649336 -0.049649336)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.009719002 0.009719002)) (quote (-0.021319004 -0.021319004)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.043311857 0.043311857)) (quote (-0.046411857 -0.046411857)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04168967 0.04168967)) (quote (-0.055089675 -0.055089675)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06649202 0.06649202)) (quote (-0.07319202 -0.07319202)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.017512596 0.017512596)) (quote (-0.027812595 -0.027812595)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.040596627 0.040596627)) (quote (-0.047696628 -0.047696628)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05823408 0.05823408)) (quote (-0.06803408 -0.06803408)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.00722605 0.00722605)) (quote (-0.017826049 -0.017826049)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.006808889 0.006808889)) (quote (-0.012008889 -0.012008889)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.019347573 0.019347573)) (quote (-0.035747573 -0.035747573)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.011275482 0.011275482)) (quote (-0.02807548 -0.02807548)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07420683 0.07420683)) (quote (-0.07880683 -0.07880683)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLOT-POINTS" (quote plot-points) (quote ((om-load-inputfun (quote input-funbox) "list" "POINTS" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 65 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-CORRELATION 3" (quote list-correlation) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 473 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "positively-correlated-data" (om-load-patch-abs1 "positively-correlated-data" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 98 392) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 2.0))) (om-make-point 191 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 131 197) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 126 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 0) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 2))) (om-make-point 204 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10.0))) (om-make-point 50 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 30))) (om-make-point 116 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (4 0 2 1 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 4 0 nil 0) (3 0 6 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 1330/3 317/3) nil nil "&" "positively-correlated-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-CORRELATION 2" (quote list-correlation) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 187 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "negatively-correlated-data" (om-load-patch-abs1 "negatively-correlated-data" (quote ((let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" (list 1 -1)))) (om-make-point 127 301) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 120 409) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 2.0))) (om-make-point 191 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 131 197) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 126 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 0) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 2))) (om-make-point 204 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10.0))) (om-make-point 50 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 30))) (om-make-point 116 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (7 0 1 0 nil 0) (5 0 3 1 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (0 0 7 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 466/3 338/3) nil nil "&" "negatively-correlated-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 403 480) (om-make-point 223 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-CORRELATION" (quote list-correlation) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 753 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "uncorrelated-data" (om-load-patch-abs1 "uncorrelated-data" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 209 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -2) (om-load-inputfun (quote input-funbox) "max" "HIGH" 2))) (om-make-point 241 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" (list 1 1)))) (om-make-point 78 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10))) (om-make-point 191 52) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 71 419) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 131 197) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 77 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 0) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 2))) (om-make-point 204 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10))) (om-make-point 50 59) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 30))) (om-make-point 67 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 1 nil 0) (6 0 2 0 nil 0) (0 0 2 1 nil 0) (9 0 4 0 nil 0) (7 0 5 1 nil 0) (8 0 6 0 nil 0) (5 0 6 1 nil 0) (3 0 7 0 nil 0) (2 0 9 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 2236/3 106) nil (list (list (list 10 30.0) (list 10 0.0) (list 5 -12.0) (list 1 8.0) (list 4 -22.0) (list 0 1.0) (list 3 -10.0) (list 9 11.0) (list 6 0.0) (list 7 0.0) (list 5 -10.0) (list 7 -26.0) (list 8 18.0) (list 6 -8.0) (list 10 0.0) (list 6 0.0) (list 0 14.0) (list 8 -18.0) (list 10 20.0) (list 5 22.0) (list 4 13.0) (list 3 0.0) (list 7 28.0) (list 3 -13.0) (list 10 -38.0) (list 10 -34.0) (list 0 3.0) (list 8 -24.0) (list 9 12.0) (list 6 -18.0))) nil "uncorrelated-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (2 0 1 0 nil 0) (13 0 2 0 nil 0) (4 0 3 0 nil 0) (8 0 4 0 nil 0) (6 0 5 0 nil 0) (10 0 6 0 nil 0) (8 0 7 0 nil 0) (10 0 9 0 nil 0) (9 0 11 0 nil 0) (7 0 11 1 nil 0) (12 0 11 2 nil 0) (13 0 12 0 nil 0))) nil 6.18))
