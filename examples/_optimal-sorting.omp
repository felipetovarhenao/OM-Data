; OM File Header - Saved 2021/03/31 23:06:48
; (6.18 :patc (om-make-point 10 10) (om-make-point 480 42) (om-make-point 592 966) "" 183 0 "2021/03/30 13:20:10" "2021/03/31 23:06:48")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "_optimal-sorting" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 94 21) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OPTIMAL-SORTING" (quote optimal-sorting) (quote ((om-load-inputfun (quote input-funbox) "list (initial)" "ST-LIST" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "list of lists" "OTHER-LISTS" (list (list 0 1 2 3) (list 1 2 3 4) (list 2 3 4 5))) (om-load-inputfun (quote input-funbox) "list (optional)" "WEIGHTS" nil))) (om-make-point 122 627) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 105 571) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 62 30) (quote "weights") "" (om-make-point 282 579) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 144 45) (quote "number of randomly $generated chords") "" (om-make-point 166 246) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 79 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 334 180) (quote "optimal-sorting sorts a list of lists such that the $distance between adjacent lists is optimally $minimized, given a starting list. As shown in this $example, this is musically equivalent to ordering a $list of chords to achieve smooth/parsimonious $voice leading, specifying the first chord. The sorting $can be optionally weighted. By default, all elements $have equal weights.$$The weights and every data item/list must have $the same length.") "" (om-make-point 34 70) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 200 583) (om-make-point 80 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-chord-generator 2" (om-load-patch-abs1 "random-chord-generator" (quote ((let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 5))) (om-make-point 20 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 76 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "chord-list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 19 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n-chords" 0 (om-make-point 90 239) "" "n-chords" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 80 382) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 15 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1200) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1200))) (om-make-point 30 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 3.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 7.0))) (om-make-point 3 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 2 0 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0) (0 0 5 0 nil 0) (7 0 6 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 200 528)) (quote ((om-load-inputfun (quote input-funbox) "" "n-chords" nil))) (om-make-point 72 293) nil (list (list (list 3867 4268 5261 6912 7853) (list 3735 4759 6347 6462 8074) (list 4029 4478 5218 5993 7968) (list 4126 4400 5087 5486 7391) (list 4070 4401 4988 5711 7081) (list 5594 6072 6580 6894 7713) (list 4420 5914 6544 7635 7666) (list 4280 5730 6111 6418 8037) (list 3939 4823 5463 6787 7356) (list 4195 4391 4411 5031 6766) (list 5074 5697 5812 6147 8322) (list 3734 4057 5088 6811 7575) (list 4396 5404 6440 6553 8326) (list 3852 4369 4950 5289 6355) (list 4916 5832 6462 7300 7986) (list 4400 6498 7003 7282 8259) (list 3662 6068 6529 6714 7398) (list 3869 5630 5788 6470 7260) (list 6004 6780 6879 7419 8289) (list 5418 5686 6838 7054 7814) (list 4126 5191 6625 7500 7877) (list 4695 4882 8003 8335 8384) (list 3948 4423 5764 7337 7843) (list 3641 4156 4285 5094 6705) (list 4703 6768 6877 7463 7606) (list 4931 6065 6507 7593 7826) (list 3763 4748 5512 6987 8194) (list 4078 4347 5466 6344 8221) (list 3910 3954 3998 4776 6086) (list 3722 4887 5067 6766 8386) (list 5112 6030 6401 6419 7883) (list 4604 4612 5069 6339 8040) (list 4302 4332 4515 6057 6280) (list 4545 5023 6162 7452 8153) (list 5080 5153 5623 6251 7992) (list 4447 4896 5237 7103 7504) (list 3708 4030 5943 7534 7718) (list 5265 5450 6074 6220 6640) (list 4366 4368 6889 8199 8367) (list 5434 5463 6650 7626 7723) (list 3770 5542 5733 5929 8062) (list 4092 5719 5861 6138 7017) (list 5281 6277 7644 8189 8358) (list 4131 5216 6136 6247 6825) (list 3771 4345 4412 5793 7114) (list 4868 5326 7095 7409 7775) (list 3820 4236 4564 4823 5388) (list 3921 5389 7492 8074 8249) (list 4646 6881 7452 7634 7987) (list 4443 4537 5760 6094 6914) (list 4049 4158 5051 7098 7918) (list 4734 5217 6109 6149 6369) (list 4413 5568 6906 7776 7927) (list 4758 6218 6697 7444 7592) (list 3608 3930 4519 5775 6980) (list 3765 4220 6926 7843 8095) (list 3912 5158 6791 7303 7377) (list 3612 4979 6202 6371 7870) (list 3928 5565 6683 7293 8007) (list 4256 5157 6566 7077 7783) (list 4287 4470 5789 6002 7079) (list 4204 6001 6895 7239 7653) (list 4392 6381 7528 7534 7988) (list 4071 4461 4741 5414 5942) (list 4294 6080 6123 6269 7775) (list 4581 5444 6645 6708 7225) (list 4286 6077 7530 7818 7859) (list 6437 7343 7652 8169 8300) (list 4051 4553 5954 6793 8341) (list 3873 4622 5017 7382 7548) (list 4121 4616 6497 6608 7301) (list 4370 6664 6687 8217 8266) (list 3936 4038 4144 6491 6596) (list 3639 5345 5878 5921 6516) (list 4288 4316 4344 5090 5764))) "x" "random-chord-generator"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 86 904) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RANDOM CHORDS WITH SMOOTHER VOICE LEADING" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 54 706) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3867 4268 5261 6912 7853) (4049 4158 5051 7098 7918) (3734 4057 5088 6811 7575) (3939 4823 5463 6787 7356) (4447 4896 5237 7103 7504) (3873 4622 5017 7382 7548) (3948 4423 5764 7337 7843) (3708 4030 5943 7534 7718) (4545 5023 6162 7452 8153) (4126 5191 6625 7500 7877) (3928 5565 6683 7293 8007) (4256 5157 6566 7077 7783) (3912 5158 6791 7303 7377) (4204 6001 6895 7239 7653) (4758 6218 6697 7444 7592) (4420 5914 6544 7635 7666) (4931 6065 6507 7593 7826) (4916 5832 6462 7300 7986) (5418 5686 6838 7054 7814) (5594 6072 6580 6894 7713) (5112 6030 6401 6419 7883) (4294 6080 6123 6269 7775) (4280 5730 6111 6418 8037) (4396 5404 6440 6553 8326) (3735 4759 6347 6462 8074) (3612 4979 6202 6371 7870) (3770 5542 5733 5929 8062) (5074 5697 5812 6147 8322) (5080 5153 5623 6251 7992) (4604 4612 5069 6339 8040) (4029 4478 5218 5993 7968) (4078 4347 5466 6344 8221) (4051 4553 5954 6793 8341) (3763 4748 5512 6987 8194) (3722 4887 5067 6766 8386) (3869 5630 5788 6470 7260) (4092 5719 5861 6138 7017) (4131 5216 6136 6247 6825) (3639 5345 5878 5921 6516) (4734 5217 6109 6149 6369) (5265 5450 6074 6220 6640) (4443 4537 5760 6094 6914) (4287 4470 5789 6002 7079) (4070 4401 4988 5711 7081) (4126 4400 5087 5486 7391) (3771 4345 4412 5793 7114) (3608 3930 4519 5775 6980) (3641 4156 4285 5094 6705) (4195 4391 4411 5031 6766) (3852 4369 4950 5289 6355) (4071 4461 4741 5414 5942) (4288 4316 4344 5090 5764) (3820 4236 4564 4823 5388) (3910 3954 3998 4776 6086) (4302 4332 4515 6057 6280) (3936 4038 4144 6491 6596) (4121 4616 6497 6608 7301) (4581 5444 6645 6708 7225) (3662 6068 6529 6714 7398) (4703 6768 6877 7463 7606) (4646 6881 7452 7634 7987) (4392 6381 7528 7534 7988) (4286 6077 7530 7818 7859) (4413 5568 6906 7776 7927) (4868 5326 7095 7409 7775) (5434 5463 6650 7626 7723) (4400 6498 7003 7282 8259) (6004 6780 6879 7419 8289) (6437 7343 7652 8169 8300) (5281 6277 7644 8189 8358) (3921 5389 7492 8074 8249) (4695 4882 8003 8335 8384) (4366 4368 6889 8199 8367) (3765 4220 6926 7843 8095) (4370 6664 6687 8217 8266))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15100)) :ldur (quote ((300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 157 572) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RANDOM CHORDS IN RANDOM ORDER" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 30 365) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3867 4268 5261 6912 7853) (3735 4759 6347 6462 8074) (4029 4478 5218 5993 7968) (4126 4400 5087 5486 7391) (4070 4401 4988 5711 7081) (5594 6072 6580 6894 7713) (4420 5914 6544 7635 7666) (4280 5730 6111 6418 8037) (3939 4823 5463 6787 7356) (4195 4391 4411 5031 6766) (5074 5697 5812 6147 8322) (3734 4057 5088 6811 7575) (4396 5404 6440 6553 8326) (3852 4369 4950 5289 6355) (4916 5832 6462 7300 7986) (4400 6498 7003 7282 8259) (3662 6068 6529 6714 7398) (3869 5630 5788 6470 7260) (6004 6780 6879 7419 8289) (5418 5686 6838 7054 7814) (4126 5191 6625 7500 7877) (4695 4882 8003 8335 8384) (3948 4423 5764 7337 7843) (3641 4156 4285 5094 6705) (4703 6768 6877 7463 7606) (4931 6065 6507 7593 7826) (3763 4748 5512 6987 8194) (4078 4347 5466 6344 8221) (3910 3954 3998 4776 6086) (3722 4887 5067 6766 8386) (5112 6030 6401 6419 7883) (4604 4612 5069 6339 8040) (4302 4332 4515 6057 6280) (4545 5023 6162 7452 8153) (5080 5153 5623 6251 7992) (4447 4896 5237 7103 7504) (3708 4030 5943 7534 7718) (5265 5450 6074 6220 6640) (4366 4368 6889 8199 8367) (5434 5463 6650 7626 7723) (3770 5542 5733 5929 8062) (4092 5719 5861 6138 7017) (5281 6277 7644 8189 8358) (4131 5216 6136 6247 6825) (3771 4345 4412 5793 7114) (4868 5326 7095 7409 7775) (3820 4236 4564 4823 5388) (3921 5389 7492 8074 8249) (4646 6881 7452 7634 7987) (4443 4537 5760 6094 6914) (4049 4158 5051 7098 7918) (4734 5217 6109 6149 6369) (4413 5568 6906 7776 7927) (4758 6218 6697 7444 7592) (3608 3930 4519 5775 6980) (3765 4220 6926 7843 8095) (3912 5158 6791 7303 7377) (3612 4979 6202 6371 7870) (3928 5565 6683 7293 8007) (4256 5157 6566 7077 7783) (4287 4470 5789 6002 7079) (4204 6001 6895 7239 7653) (4392 6381 7528 7534 7988) (4071 4461 4741 5414 5942) (4294 6080 6123 6269 7775) (4581 5444 6645 6708 7225) (4286 6077 7530 7818 7859) (6437 7343 7652 8169 8300) (4051 4553 5954 6793 8341) (3873 4622 5017 7382 7548) (4121 4616 6497 6608 7301) (4370 6664 6687 8217 8266) (3936 4038 4144 6491 6596) (3639 5345 5878 5921 6516) (4288 4316 4344 5090 5764))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15100)) :ldur (quote ((300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 129 257) (om-make-point 34 30) 75 "75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (11 0 1 1 nil 0) (7 0 1 2 nil 0) (12 1 2 0 nil 0) (13 0 8 0 nil 0) (10 0 9 0 nil 0) (1 0 10 1 nil 0) (12 1 11 0 nil 0) (8 0 12 1 nil 0))) nil 6.18))
