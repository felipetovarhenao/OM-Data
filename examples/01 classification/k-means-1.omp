; OM File Header - Saved 2021/06/10 8:45:31
; (6.19 :patc (om-make-point 118 60) (om-make-point 148 108) (om-make-point 990 751) "" 183 0 "2021/03/30 14:02:24" "2021/06/10 8:45:31")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "k-means-1" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 455 699) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "clusters->3dc-lib" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "clusters" nil))) (om-make-point 835 413) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "SET-COLOR" (quote set-color) (quote ((om-load-inputfun (quote input-funbox) "a BPF or BPC" "SELF" nil) (om-load-inputfun (quote input-funbox) " color" "COLOR" (quote :random)))) (om-make-point 58 506) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 1))) (om-make-point 69 440) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj) nil nil (pairlis (quote (winsize winpos mode show-axes show-room room-size line-width bg-color picture)) (list (om-make-point 800 800) (om-make-point 600 200) 0 1 1 2 1.0 nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 154 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OPTIMAL-SORTING" (quote optimal-sorting) (quote ((om-load-inputfun (quote input-funbox) "list (initial)" "ST-LIST" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "list of lists" "OTHER-LISTS" (list (list 0 1 2 3) (list 1 2 3 4) (list 2 3 4 5))) (om-load-inputfun (quote input-funbox) "list (optional)" "WEIGHTS" nil))) (om-make-point 74 237) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 62 563) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 143 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 75 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 78 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 30 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 71 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 99 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "clusters" 0 (om-make-point 99 39) "" "clusters" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 87 639) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 13 638) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (8 0 1 1 nil 0) (7 0 1 2 nil 0) (2 0 1 3 nil 0) (9 0 2 0 nil 0) (6 0 3 0 nil 0) (5 0 3 1 nil 0) (0 0 4 0 nil 0) (10 0 5 0 nil 0) (10 0 6 0 nil 0) (9 0 7 0 nil 0) (9 0 8 0 nil 0) (3 0 9 0 nil 0) (11 0 10 0 nil 0) (4 1 12 0 nil 0) (4 0 13 0 nil 0))) 1 "clusters->3dc-lib" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLOT-POINTS 2" (quote plot-points) (quote ((om-load-inputfun (quote input-funbox) "list" "POINTS" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 51 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLOT-POINTS" (quote plot-points) (quote ((om-load-inputfun (quote input-funbox) "list" "POINTS" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 529 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 202 30) (quote "(double-click to visualize data)") "" (om-make-point 381 640) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CLUSTERED 3D DATA" (quote 3dc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of 3DC objects" "bpf-list" (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj))))) (om-make-point 726 475) (om-make-point 238 164) (if (find-class (quote 3dc-lib) nil) (make-instance (quote 3dc-lib) :bpf-list (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-17.5 -17.6 -16.4 -16.2 -13.9 -14.7 -11.8 -9.7)) (quote (-16.3 -17.5 -13.6 -10.6 -8.0 -12.1 -17.8 -15.5)) (quote (-7.1 -10.4 -11.9 -12.1 -8.7 -7.6 -7.7 -13.4)) (quote 3dc) 1))) (setf (bpfcolor newbpf) (om-make-color 0.0439142 0.28319204 0.9421793)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -7.1 -10.4 -11.9 -12.1 -8.7 -7.6 -7.7 -13.4))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-13.7 -11.5 -8.8 -9.1 -9.0 -8.1 -15.2 -15.2)) (quote (16.9 15.3 13.4 13.9 16.4 18.0 11.8 6.7)) (quote (-13.5 -16.3 -16.4 -10.9 -10.3 -11.1 -10.5 -17.2)) (quote 3dc) 1))) (setf (bpfcolor newbpf) (om-make-color 0.89690066 0.6519681 0.22860551)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -13.5 -16.3 -16.4 -10.9 -10.3 -11.1 -10.5 -17.2))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-12.1 -8.8 -8.5 -10.1 -9.8 -14.1)) (quote (-16.2 -16.5 -15.9 -12.2 -13.7 -16.6)) (quote (15.3 13.4 16.4 17.1 12.0 10.0)) (quote 3dc) 1))) (setf (bpfcolor newbpf) (om-make-color 0.9741262 0.41215026 0.93949974)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 15.3 13.4 16.4 17.1 12.0 10.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-11.9 -11.8 -10.6 -6.9 -6.9 -11.4 -15.5)) (quote (8.3 12.9 14.0 17.2 10.1 18.3 16.9)) (quote (6.7 7.7 8.7 7.0 11.6 15.1 8.0)) (quote 3dc) 1))) (setf (bpfcolor newbpf) (om-make-color 0.09559572 0.8595129 0.5880368)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 6.7 7.7 8.7 7.0 11.6 15.1 8.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (6.7 8.0 15.1 10.7 17.1)) (quote (10.8 8.5 11.7 17.3 17.5)) (quote (-9.7 -8.9 -16.2 -15.3 -11.5)) (quote 3dc) 1))) (setf (bpfcolor newbpf) (om-make-color 0.15807164 0.64872265 0.6579908)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -9.7 -8.9 -16.2 -15.3 -11.5))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (8.6 9.8 7.9 11.1 11.8 11.9)) (quote (-9.1 -10.3 -7.3 -8.9 -8.8 -18.2)) (quote (7.4 8.7 12.5 14.3 18.2 7.6)) (quote 3dc) 1))) (setf (bpfcolor newbpf) (om-make-color 0.39864814 0.5808003 0.26677156)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 7.4 8.7 12.5 14.3 18.2 7.6))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (13.2 14.3 14.6 8.6)) (quote (-8.6 -7.9 -13.9 -16.8)) (quote (-15.2 -13.9 -11.3 -16.4)) (quote 3dc) 1))) (setf (bpfcolor newbpf) (om-make-color 0.37082374 0.48918724 0.026972652)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -15.2 -13.9 -11.3 -16.4))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (15.7 18.1 16.4 10.2 8.6 6.8)) (quote (9.3 8.2 11.2 8.5 15.2 16.1)) (quote (15.4 13.0 6.7 13.3 10.6 11.7)) (quote 3dc) 1))) (setf (bpfcolor newbpf) (om-make-color 0.87971175 0.12659753 0.5392411)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 15.4 13.0 6.7 13.3 10.6 11.7))) newobj)) :from-file t)) nil nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize)) (list nil nil 1.0 2 1 1 0 (om-make-point 600 200) (om-make-point 800 800))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RAW 3D DATA" (quote 3dc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of 3DC objects" "bpf-list" (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj))))) (om-make-point 482 474) (om-make-point 238 164) (if (find-class (quote 3dc-lib) nil) (make-instance (quote 3dc-lib) :bpf-list (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.12 -0.12)) (quote (0.08 0.08)) (quote (0.07 0.07)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.07 0.07))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.11 -0.11)) (quote (0.18 0.18)) (quote (0.15 0.15)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.15 0.15))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.14 -0.14)) (quote (0.17 0.17)) (quote (-0.13 -0.13)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.13 -0.13))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.09 0.09)) (quote (-0.09 -0.09)) (quote (0.07 0.07)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.07 0.07))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.16 0.16)) (quote (0.09 0.09)) (quote (0.15 0.15)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.15 0.15))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.17 -0.17)) (quote (-0.16 -0.16)) (quote (-0.07 -0.07)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.07 -0.07))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.16 -0.16)) (quote (-0.11 -0.11)) (quote (-0.12 -0.12)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.12 -0.12))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.07 0.07)) (quote (0.11 0.11)) (quote (-0.1 -0.1)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.1 -0.1))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.15 0.15)) (quote (0.12 0.12)) (quote (-0.16 -0.16)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.16 -0.16))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.08 -0.08)) (quote (0.18 0.18)) (quote (-0.11 -0.11)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.11 -0.11))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.18 -0.18)) (quote (-0.18 -0.18)) (quote (-0.1 -0.1)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.1 -0.1))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.12 0.12)) (quote (-0.09 -0.09)) (quote (0.18 0.18)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.18 0.18))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.11 -0.11)) (quote (0.14 0.14)) (quote (0.09 0.09)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.09 0.09))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.18 0.18)) (quote (0.08 0.08)) (quote (0.13 0.13)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.13 0.13))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.16 0.16)) (quote (0.11 0.11)) (quote (0.07 0.07)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.07 0.07))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.13 0.13)) (quote (-0.09 -0.09)) (quote (-0.15 -0.15)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.15 -0.15))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.1 -0.1)) (quote (-0.15 -0.15)) (quote (-0.13 -0.13)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.13 -0.13))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.12 -0.12)) (quote (-0.16 -0.16)) (quote (0.15 0.15)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.15 0.15))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.15 -0.15)) (quote (0.12 0.12)) (quote (-0.11 -0.11)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.11 -0.11))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.14 -0.14)) (quote (-0.17 -0.17)) (quote (0.1 0.1)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.1 0.1))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.08 0.08)) (quote (-0.07 -0.07)) (quote (0.12 0.12)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.12 0.12))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.15 -0.15)) (quote (0.07 0.07)) (quote (-0.17 -0.17)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.17 -0.17))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.12 -0.12)) (quote (-0.18 -0.18)) (quote (-0.08 -0.08)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.08 -0.08))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.14 -0.14)) (quote (-0.08 -0.08)) (quote (-0.09 -0.09)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.09 -0.09))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.16 -0.16)) (quote (-0.14 -0.14)) (quote (-0.12 -0.12)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.12 -0.12))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.14 0.14)) (quote (-0.08 -0.08)) (quote (-0.14 -0.14)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.14 -0.14))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.09 -0.09)) (quote (0.14 0.14)) (quote (-0.11 -0.11)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.11 -0.11))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.09 -0.09)) (quote (-0.16 -0.16)) (quote (0.16 0.16)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.16 0.16))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.12 -0.12)) (quote (0.15 0.15)) (quote (-0.16 -0.16)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.16 -0.16))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.09 -0.09)) (quote (-0.17 -0.17)) (quote (0.13 0.13)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.13 0.13))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.07 -0.07)) (quote (0.1 0.1)) (quote (0.12 0.12)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.12 0.12))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.07 0.07)) (quote (0.16 0.16)) (quote (0.12 0.12)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.12 0.12))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.11 0.11)) (quote (0.17 0.17)) (quote (-0.15 -0.15)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.15 -0.15))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.15 0.15)) (quote (-0.14 -0.14)) (quote (-0.11 -0.11)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.11 -0.11))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.09 0.09)) (quote (-0.17 -0.17)) (quote (-0.16 -0.16)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.16 -0.16))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.16 -0.16)) (quote (0.17 0.17)) (quote (0.08 0.08)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.08 0.08))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.08 0.08)) (quote (0.09 0.09)) (quote (-0.09 -0.09)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.09 -0.09))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.07 -0.07)) (quote (0.17 0.17)) (quote (0.07 0.07)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.07 0.07))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.09 -0.09)) (quote (0.16 0.16)) (quote (-0.1 -0.1)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.1 -0.1))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.12 0.12)) (quote (-0.18 -0.18)) (quote (0.08 0.08)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.08 0.08))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.11 0.11)) (quote (-0.09 -0.09)) (quote (0.14 0.14)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.14 0.14))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.1 -0.1)) (quote (-0.12 -0.12)) (quote (0.17 0.17)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.17 0.17))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.15 -0.15)) (quote (-0.12 -0.12)) (quote (-0.08 -0.08)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.08 -0.08))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.12 -0.12)) (quote (0.13 0.13)) (quote (0.08 0.08)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.08 0.08))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.17 0.17)) (quote (0.18 0.18)) (quote (-0.12 -0.12)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.12 -0.12))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.1 0.1)) (quote (0.09 0.09)) (quote (0.13 0.13)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.13 0.13))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.09 0.09)) (quote (0.15 0.15)) (quote (0.11 0.11)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.11 0.11))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.09 -0.09)) (quote (0.13 0.13)) (quote (-0.16 -0.16)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.16 -0.16))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.1 -0.1)) (quote (-0.14 -0.14)) (quote (0.12 0.12)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.12 0.12))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.1 0.1)) (quote (-0.1 -0.1)) (quote (0.09 0.09)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.09 0.09))) newobj)) :from-file t)) nil nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize)) (list nil nil 1.0 2 1 1 0 (om-make-point 600 200) (om-make-point 800 800))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-3D-data" (om-load-patch-abs1 "random-3D-data" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0.5))) (om-make-point 36 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 58 188) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -6.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 6.0))) (om-make-point 70 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 3))) (om-make-point 48 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n-data" 0 (om-make-point 113 227) "" "n-data" 20 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 78 386) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 74 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 25))) (om-make-point 37 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 9 42) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (7 0 1 0 nil 0) (2 0 1 1 nil 0) (1 0 3 0 nil 0) (6 0 5 0 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0) (0 0 7 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 200 451)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 710 233) nil (list (list (list -11.863854 8.273917 6.7014876) (list -11.40136 18.25589 15.130862) (list -13.691496 16.858386 -13.491135) (list 8.607564 -9.08691 7.405923) (list 15.721071 9.344616 15.378817) (list -17.488118 -16.255909 -7.111746) (list -16.229739 -10.603653 -12.110771) (list 6.709417 10.791004 -9.6649685) (list 15.141426 11.702251 -16.208088) (list -8.05175 17.950037 -11.092883) (list -17.593808 -17.506016 -10.372042) (list 11.849447 -8.838368 18.189553) (list -10.631807 14.038908 8.685707) (list 18.099318 8.212633 13.006451) (list 16.378476 11.220296 6.6688433) (list 13.178809 -8.648508 -15.223593) (list -9.664394 -15.466549 -13.399385) (list -12.105496 -16.196015 15.281471) (list -15.245659 11.754116 -10.537806) (list -14.124619 -16.578368 9.993244) (list 7.9293027 -7.349415 12.469564) (list -15.158546 6.671178 -17.156035) (list -11.802136 -17.750508 -7.687105) (list -13.90344 -8.027092 -8.71496) (list -16.379189 -13.592747 -11.941908) (list 14.2657795 -7.942631 -13.879462) (list -9.098304 13.867912 -10.853588) (list -8.517935 -15.948559 16.446578) (list -11.504843 15.318848 -16.300015) (list -8.819668 -16.516493 13.447436) (list -6.935794 10.116344 11.598789) (list 6.7693167 16.071396 11.74015) (list 10.721899 17.283616 -15.332983) (list 14.620178 -13.916447 -11.25853) (list 8.563868 -16.7723 -16.377472) (list -15.539669 16.87842 8.006509) (list 8.028639 8.548754 -8.888708) (list -6.901558 17.163498 6.9709373) (list -8.952288 16.415223 -10.305372) (list 11.858356 -18.198338 7.5755115) (list 11.124384 -8.939686 14.287586) (list -10.069209 -12.164207 17.11286) (list -14.65275 -12.117616 -7.6148176) (list -11.7596245 12.90454 7.653161) (list 17.067723 17.500218 -11.534948) (list 10.23871 8.51701 13.323723) (list 8.616949 15.202778 10.6002445) (list -8.783248 13.422443 -16.433796) (list -9.787178 -13.725435 11.983025) (list 9.815245 -10.337906 8.682274))) "x" "random-3D-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 745 202) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "K-MEANS 2" (quote k-means) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list (list 0 1 0) (list -3 -1 2) (list 4 0 9) (list -3 -5 -1) (list 0 4 -3) (list 2 1 -4))) (om-load-inputfun (quote input-funbox) "k (integer)" "K" 2) (om-load-inputfun (quote input-funbox) "weights (optional)" "WEIGHTS" nil))) (om-make-point 869 334) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 885 282) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 74 30) (quote "k clusters") "" (om-make-point 866 252) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 74 30) (quote "data items") "" (om-make-point 780 198) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 74 1) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 319 135) (quote "k-means is an unsupervised clustering algorithm. $It takes a data set and groups it into k groups, $where k is the number of assumed classes in the $data. The clustering can be optionally weighted. $By default, all elements have equal weights.$$The weights and every data item/list must have $the same length.") "" (om-make-point 14 57) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 59 24) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 74 30) (quote "data items") "" (om-make-point 302 198) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 74 30) (quote "k clusters") "" (om-make-point 381 252) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CLUSTERED 2D DATA" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 243 474) (om-make-point 233 165) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-29.866)) (quote (19.376)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0.49830937 0.4962436 0.02959454)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-30.435 -30.32 -29.53 -28.959 -28.011 -25.386 -24.65 -19.531)) (quote (-25.078 -27.756 -23.93 -30.023 -25.905 -26.592 -23.953 -22.422)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0.7274114 0.49532664 0.84350825)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-28.8 -27.945 -27.443 -24.422)) (quote (-5.794 5.075 3.687 3.039)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0.7332417 0.7331108 0.7540374)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-26.438 -25.584 -25.54 -25.323 -19.093)) (quote (22.295 24.093 29.344 20.292 25.24)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0.55354584 0.8733381 0.5928998)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-5.872 -5.546 -1.062 -0.214 2.376 3.359)) (quote (-26.218 -19.348 -21.631 -22.341 -25.769 -27.896)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0.97046054 0.13502574 0.95914186)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-5.267 -4.187 -1.337 -0.82)) (quote (-4.953 -4.866 -5.135 3.101)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0.52200306 0.3574444 0.39427757)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-5.441 -4.534 -3.88 -3.768 -1.372 -1.37 2.985)) (quote (24.384 25.04 24.006 24.318 28.071 24.883 20.185)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0.6563932 0.4627632 0.4687755)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (20.155 21.119 22.5 22.924 23.751 27.235 27.527 29.916)) (quote (-23.636 -27.767 -25.162 -23.811 -4.161 -24.514 -23.319 -25.718)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0.10783768 0.70205987 0.068520665)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (20.446 20.595 21.192 23.187 25.89 26.501 29.159)) (quote (27.393 5.721 20.89 20.154 26.338 20.511 22.358)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0.49582386 0.052856326 0.03332281)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "clusters->bpf-lib" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "clusters" nil))) (om-make-point 351 414) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "SET-COLOR" (quote set-color) (quote ((om-load-inputfun (quote input-funbox) "a BPF or BPC" "SELF" nil) (om-load-inputfun (quote input-funbox) " color" "COLOR" (quote :random)))) (om-make-point 67 511) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OPTIMAL-SORTING" (quote optimal-sorting) (quote ((om-load-inputfun (quote input-funbox) "list (initial)" "ST-LIST" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "list of lists" "OTHER-LISTS" (list (list 0 1 2 3) (list 1 2 3 4) (list 2 3 4 5))) (om-load-inputfun (quote input-funbox) "list (optional)" "WEIGHTS" nil))) (om-make-point 64 227) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 71 572) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 133 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 65 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 80 440) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 656 289))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 112 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 64 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 76 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 89 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "clusters" 0 (om-make-point 89 29) "" "clusters" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 96 648) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 22 647) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 2 0 nil 0) (9 0 3 0 nil 0) (9 0 4 0 nil 0) (7 0 5 1 nil 0) (6 0 5 2 nil 0) (8 0 6 0 nil 0) (8 0 7 0 nil 0) (1 0 8 0 nil 0) (10 0 9 0 nil 0) (2 1 11 0 nil 0) (2 0 12 0 nil 0))) 1 "clusters->bpf-lib" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 400 282) (om-make-point 27 30) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "K-MEANS" (quote k-means) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list (list 0 1 0) (list -3 -1 2) (list 4 0 9) (list -3 -5 -1) (list 0 4 -3) (list 2 1 -4))) (om-load-inputfun (quote input-funbox) "k (integer)" "K" 2) (om-load-inputfun (quote input-funbox) "weights (optional)" "WEIGHTS" nil))) (om-make-point 384 334) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RAW 2D DATA" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 5 474) (om-make-point 233 165) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.28 -0.28)) (quote (-0.26 -0.26)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02 0.02)) (quote (-0.26 -0.26)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2 0.2)) (quote (0.27 0.27)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.04 -0.04)) (quote (-0.05 -0.05)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.3 -0.3)) (quote (0.19 0.19)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.28 -0.28)) (quote (0.05 0.05)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.01 -0.01)) (quote (0.25 0.25)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.01 -0.01)) (quote (-0.05 -0.05)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23 0.23)) (quote (-0.24 -0.24)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.01 -0.01)) (quote (0.28 0.28)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.0)) (quote (-0.22 -0.22)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.3 -0.3)) (quote (-0.25 -0.25)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.06 -0.06)) (quote (-0.19 -0.19)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.05 -0.05)) (quote (0.24 0.24)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.06 -0.06)) (quote (-0.26 -0.26)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21 0.21)) (quote (0.06 0.06)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.25 -0.25)) (quote (-0.24 -0.24)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28 0.28)) (quote (-0.23 -0.23)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03 0.03)) (quote (0.2 0.2)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21 0.21)) (quote (-0.28 -0.28)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24 0.24)) (quote (-0.04 -0.04)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.29 -0.29)) (quote (-0.06 -0.06)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03 0.03)) (quote (-0.28 -0.28)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.3 -0.3)) (quote (-0.24 -0.24)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29 0.29)) (quote (0.22 0.22)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22 0.22)) (quote (-0.25 -0.25)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.04 -0.04)) (quote (0.24 0.24)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27 0.27)) (quote (0.21 0.21)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27 0.27)) (quote (-0.25 -0.25)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.25 -0.25)) (quote (0.2 0.2)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.05 -0.05)) (quote (0.25 0.25)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.26 -0.26)) (quote (0.29 0.29)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2 0.2)) (quote (-0.24 -0.24)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.29 -0.29)) (quote (-0.3 -0.3)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.04 -0.04)) (quote (0.24 0.24)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.27 -0.27)) (quote (0.04 0.04)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.01 -0.01)) (quote (-0.22 -0.22)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21 0.21)) (quote (0.21 0.21)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.2 -0.2)) (quote (-0.22 -0.22)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.05 -0.05)) (quote (-0.05 -0.05)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.26 -0.26)) (quote (0.22 0.22)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23 0.23)) (quote (0.2 0.2)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.26 -0.26)) (quote (0.24 0.24)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.24 -0.24)) (quote (0.03 0.03)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3 0.3)) (quote (-0.26 -0.26)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.3 -0.3)) (quote (-0.28 -0.28)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.25 -0.25)) (quote (-0.27 -0.27)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26 0.26)) (quote (0.26 0.26)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.01 -0.01)) (quote (0.03 0.03)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.19 -0.19)) (quote (0.25 0.25)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 851 541))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 267 202) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-2D-data" (om-load-patch-abs1 "random-2D-data" (quote ((let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 68 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -6.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 6.0))) (om-make-point 90 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 2))) (om-make-point 58 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n-data" 0 (om-make-point 153 282) "" "n-data" 20 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 98 431) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 94 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 25))) (om-make-point 47 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 20 62) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (1 0 0 1 nil 0) (0 0 2 0 nil 0) (5 0 4 0 nil 0) (2 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 438 534)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 232 233) nil (list (list (list -28.011137 -25.905217) (list 2.375969 -25.76883) (list 20.446333 27.392735) (list -4.186997 -4.8663297) (list -29.866347 19.376093) (list -27.945345 5.0747538) (list -1.3704858 24.883286) (list -1.3373852 -5.13502) (list 22.923819 -23.81109) (list -1.3717318 28.071412) (list -0.21368695 -22.3408) (list -30.434769 -25.077563) (list -5.5464807 -19.34841) (list -5.4406915 24.384276) (list -5.8719664 -26.217724) (list 20.595053 5.7213106) (list -24.649863 -23.953125) (list 27.526942 -23.319314) (list 2.9846707 20.185044) (list 21.119385 -27.767279) (list 23.750739 -4.1608186) (list -28.799914 -5.7944484) (list 3.358615 -27.89608) (list -29.529625 -23.929907) (list 29.159022 22.35809) (list 22.499691 -25.162362) (list -3.768352 24.31778) (list 26.500998 20.511422) (list 27.23546 -24.51412) (list -25.323023 20.292212) (list -4.5342064 25.039597) (list -25.539557 29.343987) (list 20.154612 -23.635899) (list -28.958523 -30.023192) (list -3.8803325 24.005572) (list -27.442624 3.6873417) (list -1.0623407 -21.63097) (list 21.191517 20.890492) (list -19.531279 -22.42206) (list -5.2668185 -4.9528313) (list -26.43787 22.2947) (list 23.187018 20.15444) (list -25.583693 24.093092) (list -24.421729 3.0393257) (list 29.916359 -25.718319) (list -30.319886 -27.75615) (list -25.385605 -26.592387) (list 25.89022 26.337813) (list -0.8199105 3.1007223) (list -19.093438 25.240124))) "x" "random-2D-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((22 0 0 0 nil 0) (18 0 0 1 nil 0) (6 0 0 2 nil 0) (5 0 0 3 nil 0) (9 0 1 0 nil 0) (24 0 2 0 nil 0) (7 0 3 0 nil 0) (1 0 5 1 nil 0) (3 0 6 0 nil 0) (8 0 7 0 nil 0) (7 0 9 0 nil 0) (10 0 9 1 nil 0) (19 0 18 1 nil 0) (21 0 19 0 nil 0) (24 0 21 0 nil 0) (20 0 21 1 nil 0) (2 0 22 0 nil 0) (23 0 24 0 nil 0))) nil 6.19))
