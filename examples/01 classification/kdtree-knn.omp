; OM File Header - Saved 2021/06/25 10:23:23
; (6.19 :patc (om-make-point 280 160) (om-make-point 501 25) (om-make-point 705 979) "" 183 0 "2021/06/25 9:54:58" "2021/06/25 10:23:09")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "kdtree-knn" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 1))) (om-make-point 344 559) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 130 30) (quote "max k dimensions ") nil (om-make-point 535 502) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 73 30) (quote "k nearest") nil (om-make-point 627 613) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 103 0) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 79 22) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 383 224) (quote "KDTREE computes a non-recursive k-dimensional tree to be used in tandem with KNN.$KNN finds the K-nearest neighbors within a given KDTREE.$$In this example, a KDTREE is built with normalized chroma vectors of several randomly generated chords.$$KNN uses that tree to efficiently find the k nearest neighbors of a chord, based on its chroma vector. The positions from the KNN's 2nd output is used to retrieve the chords themselves.$$This is musically equivalent to taking a chord and finding chords with common pitch classes.$") "" (om-make-point 26 50) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 112 726) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 188 780) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 0) (om-load-inputfun (quote input-funbox) "number or list" "B" 1/2))) (om-make-point 464 497) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHROMA-COUNT 2" (quote chroma-count) (quote ((om-load-inputfun (quote input-funbox) "list" "MC" (list 6000 6400 6700 7000 7200)))) (om-make-point 318 472) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 599 597) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 509 505) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 1))) (om-make-point 444 434) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 5 318) (om-make-point 249 30) (list 4800 5200 5500 6000 6400 6700 7200) "(4800 5200 5500 6000 6400 6700 7200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TARGET" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 101 352) (om-make-point 92 116) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5200 5500 6000 6400 6700 7200)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 681 289) (om-make-point 400 25) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 278 712) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORDS WITH SIMILAR CHROMA CONTENT" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 132 823) (om-make-point 350 126) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 5200 5500 6000 6400 6700 7200) (6400 6700 7200 8400) (5200 6000 6400 6700 7900) (5300 6000 7200 7600 7900))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 723 345) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "KNN" (quote knn) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list 0 0)) (om-load-inputfun (quote input-funbox) "list" "TREE-NODES" (list 1.0 -0.5)) (om-load-inputfun (quote input-funbox) "list" "KD-TREE" (list (list (list 1 -2) (list 2 -4)) (list (list 3 -2) (list 4 -3)) (list (list -4 4)) (list (list 3 -1) (list 3 4) (list 3 4)))) (om-load-inputfun (quote input-funbox) "list" "TREE-POSNS" (list (list 2 6) (list 0 4) (list 5 7) (list 1 3))) (om-load-inputfun (quote input-funbox) "integer" "K" 1))) (om-make-point 311 632) (om-make-point 357 75) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHROMA-COUNT" (quote chroma-count) (quote ((om-load-inputfun (quote input-funbox) "list" "MC" (list 6000 6400 6700 7000 7200)))) (om-make-point 418 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-chords" (om-load-patch-abs1 "random-chords" (quote ((let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 72 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 4) (om-load-inputfun (quote input-funbox) "max" "HIGH" 13))) (om-make-point 115 77) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 132 491) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 192 360) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 20 75) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 10 40) (om-make-point 34 30) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 68 41) (om-make-point 34 30) 86 "86" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 66 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 60) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 128 424) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 85 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 68 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (8 0 2 0 nil 0) (5 0 4 0 nil 0) (6 0 4 1 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0) (0 0 8 0 nil 0) (3 0 8 1 nil 0) (7 0 9 0 nil 0) (9 0 10 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 517/2 2311/8) nil nil "&" "random-chords"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "KDTREE" (quote kdtree) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA-SET" (list (list 4 0) (list 4 3) (list -4 1) (list 1 3) (list 1 -3) (list 0 3) (list -2 -2) (list -2 3))) (om-load-inputfun (quote input-funbox) "list" "MAX-K" 2))) (om-make-point 431 541) (om-make-point 124 75) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 282 255) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (14 1 6 0 nil 0) (6 0 7 0 nil 0) (15 0 7 1 nil 0) (12 0 8 0 nil 0) (14 1 9 0 nil 0) (18 0 12 0 nil 0) (13 0 14 1 nil 0) (19 0 15 0 nil 0) (17 1 15 1 nil 0) (7 0 16 1 nil 0) (0 0 17 0 nil 0) (20 0 17 1 nil 0) (20 1 17 2 nil 0) (20 2 17 3 nil 0) (10 0 17 4 nil 0) (19 0 18 0 nil 0) (21 0 19 0 nil 0) (8 0 20 0 nil 0) (11 0 20 1 nil 0))) nil 6.19))
