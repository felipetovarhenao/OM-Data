; OM File Header - Saved 2021/06/02 13:20:41
; (6.18 :patc (om-make-point 10 160) (om-make-point 550 25) (om-make-point 840 982) "" 183 0 "2021/05/08 20:08:02" "2021/06/02 13:20:26")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "multi-join" (quote ((let ((box (om-load-boxcomment "comment 4" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 75 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 90 11) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 401 133) (quote "Segment-seq extracts a segment from a CHORD-SEQ, given a list of time points and duration for all segments.$$Outputs a list of onsets corresponding to detected transients in a score object.$$Joins a list of score objects, either by merging or concatenating them.") "" (om-make-point 20 63) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 141 30) (quote "number of segments") "" (om-make-point 418 870) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 190 30) (quote "transient detection threshold") "" (om-make-point 432 622) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 195 30) (quote "note merging threshold (ms) ") "" (om-make-point 188 562) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 30) (quote "sequence index") "" (om-make-point 10 304) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "oscar" (let ((copy (make-instance (quote ominstance) :name "oscar" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3300 6900 5700 7100) (6000) (4000 6400) (5700 6900) (3100 5500 6700) (3800 5900 6200) (3600 5500 6700) (5900 6000) (3100 6400) (5500 6700) (3600) (5700 6900) (3800) (6200) (6500) (3300 5700 6900) (6200 6500) (3800) (5900 7100) (4000) (6400) (6800) (3500 5900 7100) (6400 6800) (4000) (5900 7100) (3300 5700 6900) (6000) (4000 6400) (5700 6900) (3100 5500 6700) (5900) (3800 6200) (5500 6700) (3600) (6000 6400) (3100 5500 6700) (6000 6400) (3600) (5500 6700) (3800 5700 6900) (6200) (6500) (3300 5700 6900) (6200 6500) (3800) (3900 5900 7100) (4000) (6400) (6800) (3500 5900 7100) (5900 6800 6400) (4000) (5900 7100) (3300 5700 6900) (6000) (4000 6400) (5700 6900) (3100 5500 6700) (5900) (3800 6200) (5500 6700) (6000 6400 3600 7200 6000) (6400 6000 6700) (6000 6400 3100 6000 5500 7200 6200) (6400 6000 6700) (3600) (6000 5500 7200) (5900 6200 3800 7200 6200 5700 7400) (6000 6400 6500 6900) (3300 6400 6200 5700 7400) (6200 6500) (6500 6200 6900) (6500 6900 3800) (5900 6400 7600) (6400 6800 4000) (6800) (7100) (6400 3500 6400 5900 7600) (5900) (6400 6200 7400 6400) (4000) (5900 6000 7200) (5700 6000 3300 5700) (6400) (6000 6400 4000 6700) (5900 6200 7000 6000 5700 7200) (5700 6000 3100 5900 5500 7100) (5500 5900) (3800 6200 6500) (5500) (6000 6400 3600) (6000 6400) (6000 6400 3100 5500 6700) (6000 6400) (3600) (5500 6700) (5900 6200 3800 5700 6900) (6000 6400 6200 6500) (3300 5700 6900) (6200 6500) (6200 6500) (5700 6200 3800) (3900 5900 7100) (5600 6400 4000) (6400) (6800) (5200 5900 3500 5900 7100) (6400 6800) (4000) (5900 7100) (5700 5700 3300 6000 7200) (6400 6500) (6000 6000 4000 6700) (6000 7200) (5500 5900 3100 5900 7100) (6200 6400) (5900 6200 3800 6500) (5900 7200 7100 6000) (6000 6400 3600 7200 6000) (6400 6700) (6000 6400 3100 6000 7200 6200) (6400 6700) (3600) (6000 7200) (5900 6200 3800 7200 6200 7400) (6000 6400 6500 6900) (3300 6400 6200 7400) (6200 6500) (6500 6900) (6500 6900 3800) (6400 7600) (6400 6800 4000) (6800) (7100) (6400 3500 6400 7600) (5900) (6200 7400 6400) (4000) (6000 7200) (5700 6000 3300) (6400) (6000 6400 4000 6700) (5900 6200 7000 6000 7200) (5700 6000 3100 5900 7100) (5500 5900) (3800 6200 6500) (6000 6400 3600) (6000 6400) (6000 6400 3100 5500 6700) (6000 6400) (3600) (5500 6700) (5900 6200 3800 5700 6900) (6000 6400 6200 6500) (3300 5700 6900) (6200 6500) (6200 6500) (5700 6200 3800) (3900 5900 7100) (5600 6400 4000) (6800) (7100) (5200 5900 3500 6400 7600) (6800 6400 7100) (5900 4000) (6400 7600) (3300 6000 7200) (6400) (4000 6500 6700) (6000 7200) (3100 5900 7100) (6200) (3800 6500) (6000 7200) (3600) (6400 6700) (3100 6000 7200) (6400) (3600 6700) (6000 7200) (3800 6200 7400) (6500) (6900) (3300 6200 7400) (6500 6900) (3800) (6400 7600) (4000) (6800) (7100) (3500 6400 7600) (6800 6400 7100) (4000) (5700 6900) (3300) (6000) (4000 6400) (5700 6900) (3100 5500 6700) (5900) (3800 6200) (5500 6700) (3600) (6000 6400) (3100 5500 6700) (6000) (3600 6400) (5500 6700) (3800 5700 6900) (6100) (6500) (3300 5700 6900) (6200 6500) (3800) (5900 7100) (4000) (6400) (6800) (3500 5900 7100) (5900 6800 6400) (4000) (5700 6900 6700) (3300) (6000 6400) (3300) (5500 6700) (3100) (5900 6200) (3100) (6000 7200) (3600) (6700) (3100 6000 7200) (6400 6700) (3600) (6200 7400) (3800) (6500) (6900) (3300 6200 7400) (6500 6900) (3800) (3900 6400 7600) (4000) (6800) (7100) (3500 6400 7600) (6400 7600) (6800) (4000 7100) (6400 7600) (3300 6900 8100) (7200) (4000 7600) (6900 8100) (3100 6700 7900) (7100) (3800 7400) (6700 7900) (3600) (7200 7600) (3100 6700 7900) (7200 6700 7600) (3600) (6500 7700) (3800) (6900) (7200) (3300 6500 7700) (6900 6500 7200) (3800) (6800 8000) (4000) (7100) (7600) (3500 6800 8000) (7100 7600 6800) (4000) (3300 6000 8100))) :lonset (quote (1000 1125 1250 1375 1500 1750 2000 2250 2375 2625 2750 2875 3000 3125 3250 3375 3625 3750 3875 4000 4125 4250 4375 4625 4750 4875 5000 5125 5250 5375 5500 5625 5750 5875 6000 6125 6375 6625 6750 6875 7000 7125 7250 7375 7625 7750 7875 8000 8125 8250 8375 8625 8750 8875 9000 9125 9250 9375 9500 9625 9750 9875 10000 10125 10375 10625 10750 10875 11000 11250 11375 11500 11625 11750 11875 12000 12125 12250 12375 12500 12625 12750 12875 13000 13125 13250 13375 13500 13625 13750 13875 14000 14125 14375 14625 14750 14875 15000 15250 15375 15500 15625 15750 15875 16000 16125 16250 16375 16625 16750 16875 17000 17125 17250 17375 17500 17625 17750 17875 18000 18125 18375 18625 18750 18875 19000 19250 19375 19500 19625 19750 19875 20000 20125 20250 20375 20500 20625 20750 20875 21000 21125 21250 21375 21500 21625 21750 22000 22125 22375 22625 22750 22875 23000 23250 23375 23500 23625 23750 23875 24000 24125 24250 24375 24625 24750 24875 25000 25125 25250 25375 25500 25625 25750 25875 26000 26125 26375 26625 26750 26875 27000 27125 27250 27375 27625 27750 27875 28000 28125 28250 28375 28625 28750 28875 29000 29125 29250 29375 29500 29625 29750 29875 30000 30125 30375 30625 30750 30875 31000 31125 31250 31375 31625 31750 31875 32000 32125 32250 32375 32625 32750 32875 33000 33125 33250 33375 33500 33625 33750 33875 34000 34250 34375 34625 34750 34875 35000 35125 35250 35375 35625 35750 35875 36000 36125 36250 36375 36500 36625 36750 36875 37000 37125 37250 37375 37500 37625 37750 37875 38000 38125 38375 38625 38750 38875 39000 39125 39250 39375 39625 39750 39875 40000 40125 40250 40375 40625 40750 41000 41249)) :ldur (quote ((249 186 186 118) (118) (124 118) (118 118) (249 124 124) (124 124 124) (374 124 124) (124 118) (374 118) (124 124) (124) (118 236) (374) (118) (118) (374 118 118) (124 124) (124) (118 118) (374) (118) (118) (374 118 118) (124 124) (124) (118 118) (249 186 118) (118) (124 118) (118 118) (249 186 118) (118) (124 118) (118 118) (374) (124 124) (374 118 118) (124 124) (124) (118 118) (374 186 118) (118) (118) (374 118 118) (124 124) (124) (124 118 118) (374) (118) (118) (374 118 118) (124 124 124) (124) (118 118) (249 186 118) (118) (124 118) (118 118) (249 118 186) (118) (124 118) (118 118) (186 186 374 118 118) (124 124 124) (624 499 374 118 118 118 118) (124 124 124) (124) (118 118 118) (249 249 374 124 124 124 236) (249 124 118 118) (374 118 118 118 118) (249 124) (124 124 124) (249 124 124) (500 118 118) (499 374 374) (118) (118) (499 374 118 118 118) (499) (124 124 124 13242) (124) (118 236 236) (124 124 249 355) (1124) (124 124 124 118) (124 124 118 118 118 118) (124 62 249 236 236 236) (186 186) (124 118 124) (118) (186 186 374) (124 624) (624 624 374 118 118) (124 1618) (124) (118 118) (249 249 374 124 124) (249 249 118 118) (374 118 118) (249 249) (124 124) (249 124 124) (124 118 118) (374 374 374) (1624) (118) (499 374 374 118 118) (124 124) (124) (118 118) (249 249 249 118 118) (124 118) (249 124 124 118) (118 118) (249 249 249 118 118) (118 3124) (249 124 124 118) (118 118 118 118) (186 186 374 118 118) (124 124) (624 499 374 118 118 118) (124 124) (124) (118 118) (249 249 374 124 124 236) (249 124 118 118) (374 118 118 118) (249 124) (124 124) (249 124 124) (118 118) (499 374 374) (118) (118) (499 374 118 118) (499) (124 124 618) (124) (236 236) (124 124 249) (1124) (124 124 124 118) (124 124 118 118 118) (124 62 249 236 236) (186 186) (124 124 124) (186 186 374) (124 624) (624 624 374 118 118) (124 2618) (124) (118 118) (249 249 374 124 124) (249 249 118 118) (374 118 118) (249 249) (124 124) (249 124 124) (124 118 118) (374 374 374) (118) (118) (374 374 374 118 118) (124 124 236) (124 124) (118 118) (249 124 118) (1618) (124 118 118) (118 118) (249 186 118) (118) (124 118) (118 118) (374) (124 124) (374 118 118) (2742) (124 118) (118 118) (374 186 118) (118) (118) (374 118 118) (124 124) (124) (118 118) (374) (118) (118) (374 118 118) (124 124 124) (124) (118 118) (249) (118) (124 999) (118 118) (249 186 118) (118) (124 118) (118 118) (374) (124 742) (249 118 118) (118) (124 1492) (118 118) (374 186 118) (118) (118) (374 118 118) (124 124) (124) (118 236) (374) (624) (118) (374 118 118) (124 124 624) (124) (118 236 118) (124) (124 1118) (124) (118 118) (124) (124 124) (124) (118 236) (374) (118) (374 118 118) (124 124) (124) (118 118) (374) (118) (118) (374 118 118) (124 124) (124) (124 118 236) (374) (118) (118) (374 118 118) (186 118) (118) (124 118) (118 118) (249 186 118) (118) (124 118) (118 118) (249 186 118) (118) (124 118) (118 236) (374) (124 124) (374 118 118) (124 124 124) (124) (118 118) (374) (118) (118) (374 118 118) (124 124 124) (124) (118 236) (374) (118) (118) (374 118 118) (186 186 186) (124) (249 249 249))) :lvel (quote ((105 89 105 89) (89) (110 76) (115 120) (100 110 115) (105 92 86) (110 110 100) (65 66) (105 115) (105 105) (105) (100 105) (110) (83) (96) (100 105 110) (100 105) (105) (92 100) (105) (92) (125) (96 100 105) (110 121) (105) (100 105) (105 110 100) (89) (105 92) (105 120) (92 105 105) (100) (110 96) (110 120) (105) (110 105) (100 105 110) (110 105) (96) (100 96) (110 105 110) (80) (86) (100 105 115) (105 105) (83) (93 100 105) (110) (92) (121) (105 96 110) (92 116 105) (105) (105 100) (96 110 96) (86) (115 83) (115 115) (100 110 100) (100) (105 96) (115 115) (127 127 96 115 86) (105 120 110) (127 127 89 80 105 115 86) (115 115 115) (86) (105 110 115) (127 127 89 74 96 105 80) (127 127 96 89) (100 105 110 100 110) (127 127) (110 100 115) (127 127 100) (96 96 105) (127 127 105) (125) (96) (127 96 100 92 115) (127) (110 100 105 72) (110) (105 115 110) (127 127 89 105) (100) (127 127 105 92) (127 127 60 105 110 110) (127 127 100 110 115 105) (127 127) (100 105 120) (115) (127 127 120) (105 100) (127 127 100 105 110) (115 105) (86) (115 105) (127 127 105 110 115) (127 127 115 105) (100 115 120) (127 127) (115 115) (127 127 86) (109 110 105) (127 127 105) (100) (125) (127 127 100 105 105) (110 121) (105) (96 96) (127 127 96 100 105) (68 70) (127 127 110 86) (110 115) (127 127 92 105 100) (68 67) (127 127 96 83) (92 115 105 86) (127 127 96 115 86) (105 110) (127 127 89 80 115 86) (115 115) (86) (105 115) (127 127 89 74 96 80) (127 127 96 89) (100 105 110 110) (127 127) (110 115) (127 127 100) (96 105) (127 127 105) (125) (96) (127 96 100 115) (127) (100 105 72) (110) (115 110) (127 127 89) (100) (127 127 105 92) (127 127 60 105 110) (127 127 100 110 105) (127 127) (100 105 120) (127 127 120) (105 100) (127 127 100 105 110) (115 105) (86) (115 105) (127 127 105 110 115) (127 127 115 105) (100 115 120) (127 127) (115 115) (127 127 86) (109 110 105) (127 127 110) (121) (89) (127 127 96 100 115) (121 92 105) (115 105) (96 100) (96 110 92) (83) (105 70 57) (105 110) (100 105 92) (86) (105 68) (100 120) (110) (105 110) (105 105 110) (110) (105 83) (110 100) (105 100 100) (83) (92) (96 105 105) (115 115) (105) (96 105) (110) (116) (89) (100 92 110) (121 100 100) (105) (115 110) (92) (96) (110 86) (110 115) (100 105 105) (105) (100 92) (110 115) (110) (100 100) (100 105 110) (120) (110 83) (110 115) (105 105 110) (71) (80) (100 100 105) (105 105) (105) (100 105) (110) (96) (116) (100 100 110) (100 116 96) (110) (115 100 78) (115) (100 105) (115) (110 110) (110) (110 105) (105) (105 115) (115) (96) (105 100 115) (105 105) (110) (92 105) (105) (89) (89) (105 96 110) (105 110) (86) (116 89 100) (110) (116) (80) (100 92 105) (89 86) (93) (110 80) (62 96) (105 86 105) (74) (115 80) (115 115) (96 100 110) (80) (115 83) (105 115) (115) (110 96) (105 110 110) (105 96 96) (100) (105 105) (110) (92) (96) (105 92 105) (96 92 96) (96) (116 109) (115) (83) (80) (105 109 121) (83 86 101) (115) (110 105 110))) :loffset (quote ((0 0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0 0 0) (0 0) (0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0) (0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0) (0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0) (0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0))) :lchan (quote ((2 1 1 1) (1) (2 1) (1 1) (2 1 1) (2 1 1) (2 1 1) (1 1) (2 1) (1 1) (2) (1 1) (2) (1) (1) (2 1 1) (1 1) (2) (1 1) (2) (1) (1) (2 1 1) (1 1) (2) (1 1) (2 1 1) (1) (2 1) (1 1) (2 1 1) (1) (2 1) (1 1) (2) (1 1) (2 1 1) (1 1) (2) (1 1) (2 1 1) (1) (1) (2 1 1) (1 1) (2) (2 1 1) (2) (1) (1) (2 1 1) (1 1 1) (2) (1 1) (2 1 1) (1) (2 1) (1 1) (2 1 1) (1) (2 1) (1 1) (4 3 2 1 1) (1 1 1) (4 3 2 1 1 1 1) (1 1 1) (2) (1 1 1) (4 3 2 1 1 1 1) (4 3 1 1) (2 1 1 1 1) (4 3) (1 1 1) (4 3 2) (1 1 1) (4 3 2) (1) (1) (3 2 1 1 1) (4) (1 1 1 1) (2) (1 1 1) (4 3 2 1) (1) (4 3 2 1) (4 3 1 1 1 1) (4 3 2 1 1 1) (4 3) (2 1 1) (1) (4 3 2) (1 1) (4 3 2 1 1) (1 1) (2) (1 1) (4 3 2 1 1) (4 3 1 1) (2 1 1) (4 3) (1 1) (4 3 2) (2 1 1) (4 3 2) (1) (1) (4 3 2 1 1) (1 1) (2) (1 1) (4 3 2 1 1) (1 1) (4 3 2 1) (1 1) (4 3 2 1 1) (1 1) (4 3 2 1) (1 1 1 1) (4 3 2 1 1) (1 1) (4 3 2 1 1 1) (1 1) (2) (1 1) (4 3 2 1 1 1) (4 3 1 1) (2 1 1 1) (4 3) (1 1) (4 3 2) (1 1) (4 3 2) (1) (1) (3 2 1 1) (4) (1 1 1) (2) (1 1) (4 3 2) (1) (4 3 2 1) (4 3 1 1 1) (4 3 2 1 1) (4 3) (2 1 1) (4 3 2) (1 1) (4 3 2 1 1) (1 1) (2) (1 1) (4 3 2 1 1) (4 3 1 1) (2 1 1) (4 3) (1 1) (4 3 2) (2 1 1) (4 3 2) (1) (1) (4 3 2 1 1) (1 1 1) (3 2) (1 1) (2 1 1) (1) (2 1 1) (1 1) (2 1 1) (1) (2 1) (1 1) (2) (1 1) (2 1 1) (1) (2 1) (1 1) (2 1 1) (1) (1) (2 1 1) (1 1) (2) (1 1) (2) (1) (1) (2 1 1) (1 1 1) (2) (1 1) (2) (1) (2 1) (1 1) (2 1 1) (1) (2 1) (1 1) (2) (1 1) (2 1 1) (1) (2 1) (1 1) (2 1 1) (1) (1) (2 1 1) (1 1) (2) (1 1) (2) (1) (1) (2 1 1) (1 1 1) (2) (1 1 1) (2) (1 1) (2) (1 1) (2) (1 1) (2) (1 1) (2) (1) (2 1 1) (1 1) (2) (1 1) (2) (1) (1) (2 1 1) (1 1) (2) (2 1 1) (2) (1) (1) (2 1 1) (1 1) (1) (2 1) (1 1) (2 1 1) (1) (2 1) (1 1) (2 1 1) (1) (2 1) (1 1) (2) (1 1) (2 1 1) (1 1 1) (2) (1 1) (2) (1) (1) (2 1 1) (1 1 1) (2) (1 1) (2) (1) (1) (2 1 1) (1 1 1) (2) (2 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0 0 0) (0 0) (0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0) (0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0) (0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0) (0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 784 316) 0 1000 nil 149/25 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4))) (setf (create-info copy) (quote ("2021/05/08 20:07:58" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 260 200) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MULTI-JOIN" (quote multi-join) (quote ((om-load-inputfun (quote input-funbox) "multi-seq or poly" "SELF" nil))) (om-make-point 338 967) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORIGINAL SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 310 1041) (om-make-point 508 185) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600 7800 6200 5700) (7600 4800) (5500) (6900 6400 5000) (6200) (6200) (6800) (7200 6200 5300) (7400) (8300 6900) (8100 7200) (8300 5500) (5900) (6400) (6700) (6700 6900) (6900 6600 5000) (6000) (6000) (6800) (7100 6300) (6900 6600 5000) (6000) (6000) (6800) (6900 4500) (5200) (5700) (6000) (7600 7100) (7600 4800) (5500) (6900 7700 8100 5000 5900 4300) (6400 7200 7600 5400 4500) (7500 8100 8400) (4700) (5400) (7200 6400) (7600 5500) (5700) (6000) (6400) (7100 6400) (8200 7000 5300) (5800) (6200) (6900 7700 8100 5900 4300 5000) (6400 7200 7600 5400 4500) (7000 7400 6400 5500) (7000) (8100 6000 4800 6400) (5900) (6500 7100) (6900 7700 8100 5900 4300 5000) (6400 7200 7600 5400 4500) (7500 8100 8400) (4700) (5400) (7500 6000) (7100 7700 8300) (4000) (4700) (8300 6900) (8100 7200) (8300 5500) (5900) (6400) (6700) (7200 6400) (7600 5500) (6400) (5700) (6000) (7200 6400) (7600 5500) (6400) (5700) (6000) (7100 6400) (6800 7100) (7100 7600) (7600 4800) (5500) (6900 6400 5000) (6200) (6200) (6800) (7200 6200 5300) (7400) (8000 8300 6300) (8100 8400) (6800 7200) (6900 4500) (5200) (5700) (5700) (6000) (6400) (4500) (5200) (5700) (5700) (6100) (6400) (8100 6200) (7900 6700) (7500 6000) (7500 6000) (7900 6400) (8100 5800 4800) (6400) (5700) (7200 6200 5300) (7400) (6900 4500) (5200) (5700) (6000) (7800 8100 5200) (7600 8000 5900) (6400) (7200 6200 5300) (7400) (8100 5800 4800) (6400) (5700) (6900 8100 5200) (5500) (5700) (6100) (7200 6200 5300) (7400) (7600 5800) (7200 6200 5300) (7400) (7100 6300) (7100 7700 8300) (4000) (4700) (6700 6900) (6800 7200) (6900 4500) (5200) (5700) (5700) (6000) (6400) (4500) (5200) (5700) (5700) (6100) (6400) (7600 5800) (8300 6900) (7200 8100) (8300 5500) (5900) (6400) (6700) (7600 6700 5900 5500) (7700) (7200 6900 5700 5400) (6900) (6500 7100) (6900 6600 5000) (6000) (6000) (6800) (7200 6400) (7600 5500) (5700) (6000) (6400) (7200 6200 5300) (7400) (7600 7100) (7600 4800) (5500) (7200 6200 5300) (7400) (6700 6000) (7400) (6900 7300 6400 5400) (6900))) :lonset (quote (0 250 375 500 625 750 875 1000 1375 1500 1625 1875 2000 2125 2250 2375 2611 2736 2861 2986 3111 3347 3472 3597 3722 3847 3972 4097 4222 4347 4597 4722 4847 5597 6347 6472 6597 6715 6965 7090 7215 7340 7465 7701 7826 7951 8076 8826 9576 9951 10069 10350 10475 10711 11461 12211 12336 12461 12579 12815 12940 13065 13183 13308 13558 13683 13808 13933 14058 14308 14433 14558 14683 14808 15058 15183 15308 15433 15558 15794 15912 16162 16287 16412 16537 16662 16787 16912 17287 17412 17537 17773 18023 18148 18273 18398 18523 18648 18773 18898 19023 19148 19273 19398 19516 19641 19877 20113 20349 20585 20835 20960 21085 21460 21585 21710 21835 21960 22085 22210 22335 22453 22828 22953 23203 23328 23453 23578 23703 23828 23953 24328 24453 24689 25064 25189 25425 25550 25675 25793 26029 26279 26404 26529 26654 26779 26904 27029 27154 27279 27404 27529 27654 27772 28008 28133 28383 28508 28633 28758 28883 29258 29383 29758 29883 30119 30244 30369 30494 30619 30869 30994 31119 31244 31369 31744 31869 32119 32244 32369 32744 32869 32994 33119 33494 33619)) :ldur (quote ((236 236 236 236) (250 250) (125) (500 474 118) (118) (250) (118) (355 474 500) (118) (118 118) (236 236) (474 500) (118) (118) (118) (236 236) (500 474 118) (118) (250) (118) (236 236) (500 474 118) (118) (250) (118) (474 500) (118) (118) (118) (236 236) (250 250) (125) (711 711 711 711 711 711) (711 711 711 711 711) (355 355 355) (118) (118) (236 236) (474 500) (355) (118) (118) (236 236) (355 375 375) (118) (118) (711 711 711 711 711 711) (711 711 711 711 711) (355 355 474 474) (118) (406 406 406 406) (118) (236 236) (711 711 711 711 711 711) (711 711 711 711 711) (355 355 355) (118) (118) (236 236) (355 355 355) (118) (118) (118 118) (236 236) (474 500) (118) (118) (118) (236 236) (474 500) (118) (118) (118) (236 236) (474 500) (118) (118) (118) (236 236) (118 118) (236 236) (250 250) (118) (500 474 118) (118) (250) (118) (355 474 500) (118) (118 118 355) (236 236) (236 236) (1424 118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (118 118) (236 236) (236 236) (236 236) (236 236) (474 374 500) (250) (118) (355 474 500) (118) (474 500) (118) (118) (118) (118 118 118) (236 236 118) (118) (355 474 500) (118) (474 374 500) (250) (118) (474 474 500) (118) (118) (125) (355 474 500) (118) (236 236) (355 474 500) (118) (236 236) (355 355 355) (118) (118) (236 236) (236 236) (1424 118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (236 236) (118 355) (236 236) (474 500) (118) (118) (125) (355 500 500 500) (118) (474 355 474 500) (125) (236 236) (500 474 118) (118) (250) (118) (236 236) (474 500) (118) (118) (125) (355 474 500) (118) (236 236) (250 250) (125) (355 474 500) (118) (250 236) (118) (355 355 474 500) (118))) :lvel (quote ((72 72 72 72) (78 79) (78) (74 69 78) (71) (75) (68) (92 91 92) (86) (71 71) (69 75) (69 72) (71) (75) (72) (78 78) (79 77 82) (75) (75) (78) (82 81) (72 71 75) (71) (71) (66) (79 81) (71) (77) (79) (72 72) (74 80) (73) (98 90 98 106 98 99) (92 88 93 102 100) (75 77 71) (79) (74) (71 74) (80 72) (79) (74) (79) (82 87) (80 78 81) (78) (75) (70 75 70 82 84 81) (71 68 76 73 78) (72 78 84 80) (68) (85 91 92 92) (92) (73 73) (96 91 93 100 100 104) (90 91 90 100 103) (75 74 75) (72) (74) (67 67) (70 74 68) (72) (78) (71 71) (69 75) (69 72) (71) (75) (72) (67 77) (73 81) (74) (73) (71) (67 77) (73 81) (74) (73) (71) (82 87) (73 73) (78 71) (81 74) (72) (74 69 78) (71) (75) (68) (93 88 86) (88) (70 67 74) (72 74) (74 69) (81 74) (73) (75) (73) (73) (73) (72) (74) (77) (73) (75) (78) (72 78) (66 77) (67 67) (67 67) (69 72) (65 68 69) (61) (61) (65 66 60) (60) (79 84) (69) (75) (78) (68 74 73) (67 69 74) (75) (93 88 86) (88) (65 68 69) (61) (61) (78 72 75) (77) (75) (78) (65 66 60) (60) (90 92) (65 66 60) (60) (66 59) (70 74 68) (72) (78) (71 68) (74 69) (81 74) (73) (75) (73) (73) (73) (72) (74) (77) (73) (75) (78) (61 60) (73 73) (78 79) (79 75) (69) (78) (71) (66 62 62 62) (67) (94 92 88 94) (82) (79 77) (72 71 75) (71) (71) (66) (78 75) (80 86) (71) (74) (79) (65 66 60) (60) (72 72) (74 80) (73) (93 88 86) (88) (71 73) (71) (63 67 71 66) (61))) :loffset (quote ((0 0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0 0 0) (0))) :lchan (quote ((1 1 2 2) (1 2) (2) (1 1 2) (2) (2) (1) (1 2 2) (1) (1 2) (1 2) (1 2) (2) (2) (2) (1 1) (1 1 2) (2) (2) (1) (1 2) (1 1 2) (2) (2) (1) (1 2) (2) (2) (2) (1 2) (1 2) (2) (1 1 1 2 2 2) (1 1 1 2 2) (1 1 1) (2) (2) (1 2) (1 2) (2) (2) (2) (1 2) (1 1 2) (2) (2) (1 1 1 2 2 2) (1 1 1 2 2) (1 1 2 2) (1) (1 2 2 2) (2) (1 1) (1 1 1 2 2 2) (1 1 1 2 2) (1 1 1) (2) (2) (1 2) (1 1 1) (2) (2) (1 2) (1 2) (1 2) (2) (2) (2) (1 2) (1 2) (2) (2) (2) (1 2) (1 2) (2) (2) (2) (1 2) (1 1) (1 1) (1 2) (2) (1 1 2) (2) (2) (1) (1 2 2) (1) (1 1 2) (1 1) (1 1) (1 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1 2) (1 2) (1 2) (1 2) (1 2) (1 2 2) (2) (2) (1 2 2) (1) (1 2) (2) (2) (2) (1 1 2) (1 1 2) (2) (1 2 2) (1) (1 2 2) (2) (2) (1 1 2) (2) (2) (2) (1 2 2) (1) (1 2) (1 2 2) (1) (1 2) (1 1 1) (2) (2) (1 1) (1 1) (1 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1 2) (1 2) (1 1) (1 2) (2) (2) (2) (1 1 2 2) (1) (1 1 2 2) (1) (1 1) (1 1 2) (2) (2) (1) (1 2) (1 2) (2) (2) (2) (1 2 2) (1) (1 2) (1 2) (2) (1 2 2) (1) (1 2) (1) (1 1 2 2) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 784 316) 0 1000 nil 149/25 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 323 738) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 162 564) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 122 304) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 272 678) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 1) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 96 332) (om-make-point 114 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 16 264) (om-make-point 315 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "bembon" (let ((copy (make-instance (quote ominstance) :name "bembon" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6900 3300) (8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300))) :lonset (quoteldur (quote ((174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (349 349 349 349 349 349 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174) (86 86 86 86) (86 86 86 86) (86 86 86 86) (86 86 86 86) (174 174 174 174) (174 174 174 174) (174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (174 174 174 349 349 174 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174))) :lvel (quoteloffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4))) (setf (create-info copy) (quote ("2021/05/08 20:07:58" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 96 202) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALIGN-CHORDS" (quote align-chords) (quote ((om-load-inputfun (quote input-funbox) "a chord-seq" "SELF" nil) (om-load-inputfun (quote input-funbox) "an integer" "DELTA" 10))) (om-make-point 124 593) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "faure" (let ((copy (make-instance (quote ominstance) :name "faure" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4500) (5200) (5700) (6000) (6400) (4500) (5200) (5700) (6000) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (5700) (6000) (6400) (6900 8100) (5400 8400) (6000) (6400) (6900 8300) (8100 7200) (5500 8300) (5900) (6400) (6700) (7600 7100) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4000 6800 7600) (4700) (5200) (5600) (5900) (6400) (6800) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (6400) (5700) (6000) (6400 7900) (5300 7000 8200) (5500) (5800) (6200 8100) (6700 7900) (5200 8100 6900) (5500) (5700) (6100) (6900 6700) (5000 6600 6900) (6000) (6000) (6800) (7100 6500) (5200 6400 6900) (6200) (6200) (6800) (7200 6800) (4500 6900) (5200) (5700) (5700) (6000) (6400) (4500) (5200) (6000) (5700) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (5700) (6000) (6400) (8100 6900) (5400 8400 7200) (5700) (6000) (6400 8300 7100) (8100 6900) (5500 8300 7100) (5900) (6400) (6700) (7600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4000 6800 7600) (4700) (5200) (5600) (5900) (6400) (6800) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (6400) (5700) (6000) (6400 7900) (5300 7000 8200) (5800) (6200) (6500 8100) (7000 7900) (5200 8100 6900) (5700) (6100) (6700) (7900 6900) (5000 6900 7800) (6000) (6000) (6800) (7700 7100) (5200 6900 7600) (6200) (6200) (6800) (7200 6800) (4500 6900) (5200) (5700) (5700) (6000) (6400) (4500) (5200) (5700) (5700) (6100) (6400) (5400 6400 6900 7300) (6900) (6300 7100) (5300 6200 7200) (7400) (6000 7500) (5900 5500 6700 7600) (7700) (6500 7900) (6400 4800 6000 8100) (5900) (5800 7600) (5400 5700 6900 7200) (6900) (6400 7100) (5300 6200 7200) (7400) (6000 7500) (5200 5900 7600 6800) (6000 7800 6900) (6200 8000 7100) (5200 4500 8100 6900) (6000) (5400 6400 7300 6900) (6900) (6300 7100) (5300 6200 7200) (7400) (6000 7500) (5500 5900 6700 7600) (7700) (6500 7900) (4800 5800 8100) (6400) (5700) (5800 7600) (5400 6400 6900 7200) (6900) (6300 7100) (5300 6200 7200) (7400) (6000 7500) (5900 5200 7600 6800) (6000 7800 6900) (6200 8000 7100) (4500 6000 8100 6900) (4300 5900 5000 8100 7700 6900) (4500 5400 7600 7200 6400) (8400 8100 7500) (4700) (5400) (6300 8300 8000) (8400 8100) (8300 7700 7100) (4000) (4700) (5200 8100 7800) (5900 8000 7600) (6400) (4300 5900 5000 8100 7700 6900) (4500 5400 7600 7200 6400) (7400 7100 6200) (4700) (5400) (7100 6800) (7200 6900 6300) (7100 6800 5900) (4000) (5200 6400) (5600 6800) (5900 7100) (6400 7600) (5000 4300 5900 8100 7700 6900) (4500 5400 7600 7200 6400) (8400 8100 7500) (4700) (5400) (6300 8300 8000) (8400 8100) (8300 8000 7100) (4000) (4700) (5200 8100 7700) (5900 8000 7600) (6400) (5000 4300 5900 8100 7700 6900) (4500 5400 7600 7200 6400) (5500 6400 7400 7000) (7000) (5300 6200 7200 6900) (6000 5200 7400 6800) (6600) (5900 5200 6200 7600 6800 6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (5700) (6000) (6400) (6900 8100) (5400 8400) (6000) (6400) (6900 8300) (7200 8100) (5500 8300) (5900) (6400) (6700) (7100 7600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4000 7600 6800) (4700) (5200) (5600) (5900) (6400) (6800 7600) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (6400) (5700) (6000) (6400 7900) (5300 7000 8200) (5500) (5800) (6200 8100) (6700 7900) (5200 8100 6900) (5500) (5700) (6100) (6900 6700) (5000 6600 6900) (6000) (6000) (6800) (7100 6500) (5000 6400 6900) (6200) (6200) (6800) (7200 6800))) :lonset (quote (0 125 250 375 500 750 875 1000 1125 1250 1500 1625 1750 1875 2000 2250 2375 2500 2625 2750 3000 3125 3250 3375 3500 3750 3875 4000 4125 4250 4500 4625 4750 4875 5000 5250 5375 5500 5625 5750 6000 6125 6250 6375 6500 6625 6750 7250 7500 7625 7750 7875 8000 8250 8375 8500 8625 8750 9000 9125 9250 9375 9500 9750 9875 10000 10125 10250 10500 10625 10750 10875 11000 11250 11375 11500 11625 11750 12000 12125 12250 12375 12500 12625 12750 12875 13000 13125 13250 13500 13625 13750 13875 14000 14250 14375 14500 14625 14750 15000 15125 15250 15375 15500 15750 15875 16000 16125 16250 16500 16625 16750 16875 17000 17250 17375 17500 17625 17750 18000 18125 18250 18375 18500 18625 18750 19250 19500 19625 19750 19875 20000 20250 20375 20500 20625 20750 21000 21125 21250 21375 21500 21750 21875 22000 22125 22250 22500 22625 22750 22875 23000 23250 23375 23500 23625 23750 24000 24125 24250 24375 24500 24625 24750 24875 25000 25125 25250 25375 25500 25875 26000 26250 26625 26750 27000 27375 27500 27750 28125 28250 28500 28875 29000 29250 29625 29750 30000 30375 30500 30750 30875 31500 31875 32000 32250 32625 32750 33000 33375 33500 33750 34000 34125 34250 34500 34875 35000 35250 35625 35750 36000 36375 36500 36750 37500 38250 39000 39125 39250 39375 39500 39750 39875 40000 40125 40250 40375 40500 41250 42000 42125 42250 42375 42500 42750 42875 43000 43125 43250 43375 43500 44250 45000 45125 45250 45375 45500 45750 45875 46000 46125 46250 46375 46500 47250 48000 48375 48500 48750 49125 49250 49500 49625 49750 49875 50000 50250 50375 50500 50625 50750 51000 51125 51250 51375 51500 51750 51875 52000 52125 52250 52500 52625 52750 52875 53000 53250 53375 53500 53625 53750 54000 54125 54250 54375 54500 54625 54750 55250 55500 55625 55750 55875 56000 56250 56375 56500 56625 56750 57000 57125 57250 57375 57500 57750 57875 58000 58125 58250 58500 58625 58750 58875 59000 59250 59375 59500 59625 59750 59986)) :ldur (quote ((711) (118) (118) (118) (236) (711) (118) (118) (355) (236) (711 474) (118) (118) (118) (236 236) (711 474) (355) (118) (118) (236 236) (711 355) (118) (118) (355 118) (236 236) (711 474) (118) (118) (355) (236 236) (711 711) (118) (236 474) (118) (236 236 236 236) (711 711) (355) (236 474) (118) (236 236 236 236) (711 711 1424) (118) (118) (355) (118) (118) (474) (236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (118) (236 236) (711 711 355) (118) (118) (118 118) (236 236) (711 474 474) (118) (118) (355) (236 236) (118 474 711) (118) (474) (118) (236 236) (118 474 711) (118) (474) (118) (236 236) (118 1424) (118) (118) (118) (118) (118) (118) (118) (118) (118) (236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (355) (236 236) (711 355 355) (118) (118) (355 118 118) (236 236) (711 474 474) (118) (118) (355) (236) (711 711) (118) (236 474) (118) (236 236 236 236) (711 711) (355) (236 474) (118) (236 236 236 236) (711 711 1424) (355) (118) (118) (118) (118) (711) (236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (118) (236 236) (711 711 355) (118) (118) (118 118) (236 236) (711 474 474) (118) (118) (355) (236 236) (118 711 474) (118) (474) (118) (236 236) (118 711 474) (118) (474) (118) (236 236) (118 1424) (118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (711 474 355 474) (593) (236 236) (711 474 355) (118) (236 236) (711 711 711 355) (118) (236 236) (622 711 711 474) (118) (236 236) (711 474 355 474) (1068) (236 236) (711 474 355) (118) (236 236) (711 355 355 355) (118 118 118) (236 236 236) (681 711 711 711) (593) (711 474 355 355) (118) (236 236) (711 474 355) (118) (236 236) (711 711 711 355) (118) (236 236) (711 374 474) (474) (118) (236 236) (711 711 355 474) (1068) (236 236) (711 474 355) (118) (236 236) (474 711 355 355) (355 118 118) (236 236 236) (711 711 711 711) (711 711 711 711 711 711) (711 711 711 711 711) (355 355 355) (118) (118) (355 118 118) (236 236) (355 355 355) (118) (118) (118 118 118) (118 236 236) (118) (711 711 711 711 711 711) (711 711 711 711 711) (355 355 355) (118) (474) (118 118) (236 236 236) (236 236 236) (118) (118 118) (118 118) (118 118) (118 118) (711 711 711 711 711 711) (711 711 711 711 711) (355 355 355) (118) (118) (355 118 118) (236 236) (355 355 355) (118) (118) (118 118 118) (118 236 236) (118) (711 711 711 711 711 711) (711 711 711 711 711) (474 474 355 355) (118) (236 236 236 236) (474 474 355 355) (118) (236 236 236 236 236 236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (118) (236 236) (711 355) (118) (118) (118 118) (236 236) (711 474) (118) (118) (118) (236 236) (711 711) (355) (236 118) (118) (236 236 236 236) (711 711) (118) (236 118) (118) (236 236 236 236) (711 711 711) (118) (474) (118) (118) (118) (711 474) (236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (118) (236 236) (711 711 355) (118) (118) (118 118) (236 236) (711 474 474) (118) (118) (355) (236 236) (118 474 711) (118) (474) (118) (236 236) (118 474 711) (118) (474) (118) (236 236))) :lvel (quote ((77) (77) (71) (73) (69) (79) (77) (71) (77) (69) (80 80) (75) (74) (69) (74 71) (72 80) (79) (74) (79) (77 75) (79 79) (77) (77) (73 73) (79 78) (75 79) (69) (78) (71) (71 78) (74 81) (72) (78 74) (72) (72 71 69 69) (77 75) (69) (73 71) (71) (75 74 79 74) (81 74 75) (73) (73) (78) (79) (75) (72) (73) (84 79) (69) (75) (78) (73 75) (74 78) (72) (69) (75) (73 75) (74 80 75) (69) (74) (78 74) (79 73) (75 72 78) (77) (75) (78) (78 78) (82 77 79) (75) (75) (78) (77 79) (72 77 81) (78) (74) (71) (74 72) (80 82) (75) (75) (78) (77) (73) (72) (72) (73) (72) (77) (82 75) (78) (71) (77) (75 78) (86 80) (71) (74) (79) (79 79) (87 80 78) (79) (71) (79 72 72) (78 69) (85 75 72) (79) (78) (79) (77) (80 74) (71) (75 69) (79) (72 72 72 72) (79 78) (78) (71 77) (78) (74 77 77 74) (74 81 75) (78) (78) (71) (72) (75) (77) (74) (81 79) (71) (77) (79) (69 79) (78 79) (77) (71) (69) (72 69) (81 78 80) (78) (75) (73 77) (78 75) (74 78 75) (75) (72) (71) (72 71) (84 78 82) (72) (69) (74) (79 77) (79 73 75) (71) (69) (75) (69 74) (74 81) (73) (75) (73) (73) (73) (72) (74) (77) (73) (75) (78) (92 91 87 91) (91) (81 82) (86 88 93) (88) (85 84) (94 91 86 90) (91) (81 88) (92 92 91 85) (92) (92 90) (94 88 92 94) (82) (87 82) (92 91 92) (86) (88 82) (96 94 91 93) (91 85 84) (86 87 88) (81 87 91 91) (85) (66 71 67 63) (61) (59 66) (66 60 60) (62) (65 63) (62 62 62 66) (67) (61 67) (69 68 65) (61) (61) (60 61) (62 66 66 67) (66) (67 60) (60 66 65) (60) (67 67) (68 66 65 69) (57 63 59) (60 65 66) (63 66 63 65) (99 98 106 98 90 98) (100 102 93 88 92) (71 77 75) (79) (74) (71 71 67) (73 67) (68 74 70) (72) (78) (73 74 68) (74 69 67) (75) (105 98 108 96 97 96) (100 97 93 94 90) (71 70 70) (77) (79) (73 73) (67 67 70) (68 69 72) (77) (75 72) (75 72) (79 70) (77 66) (104 100 100 93 91 96) (103 100 90 91 90) (75 74 75) (72) (74) (74 67 70) (74 72) (76 69 71) (79) (77) (77 67 74) (75 70 74) (74) (81 84 82 70 75 70) (78 73 76 68 71) (80 84 78 72) (68) (74 79 72 69) (77 77 69 73) (71) (79 71 79 70 70 71) (77 75) (71) (77) (79) (75 73) (72 75) (75) (69) (75) (74 71) (79 76) (69) (79) (71 71) (75 69) (72 69) (71) (75) (72) (72 72) (80 74) (73) (73 74) (68) (77 71 67 71) (73 74) (74) (74 71) (69) (73 78 70 66) (74 76 75) (73) (73) (71) (78) (77) (81 73) (72) (80 77) (75) (74) (77) (77 67) (81 73) (74) (73) (71) (79 73) (82 75 78) (74) (69) (78 72) (77 66) (72 74 76) (73) (79) (69) (68 71) (75 71 72) (71) (71) (66) (73 73) (78 69 74) (71) (75) (68) (66 66))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (94 0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (31 0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2 1) (1 1) (2 1) (2) (2) (2) (1 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1 1) (2) (2) (2) (2) (2) (1) (1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1 1) (2) (2) (2 1) (2 1) (2 1 1) (2) (2) (2) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (1 1) (2 1 1) (2) (2) (2 1 1) (1 1) (2 1 1) (2) (2) (2) (1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1 1) (2) (2) (2) (2) (2) (2) (1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1 1) (2) (2) (2 1) (2 1) (2 1 1) (2) (2) (2) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2 1 1) (1) (2 1) (2 2 1) (1) (2 1) (2 2 1 1) (1) (2 1) (2 2 2 1) (2) (2 1) (2 2 1 1) (1) (2 1) (2 2 1) (1) (2 1) (2 2 1 1) (2 1 1) (2 1 1) (2 2 1 1) (2) (2 2 1 1) (1) (2 1) (2 2 1) (1) (2 1) (2 2 1 1) (1) (2 1) (2 2 1) (2) (2) (2 1) (2 2 1 1) (1) (2 1) (2 2 1) (1) (2 1) (2 2 1 1) (2 1 1) (2 1 1) (2 2 1 1) (2 2 2 1 1 1) (2 2 1 1 1) (1 1 1) (2) (2) (2 1 1) (1 1) (1 1 1) (2) (2) (2 1 1) (2 1 1) (2) (2 2 2 1 1 1) (2 2 1 1 1) (1 1 1) (2) (2) (1 1) (1 1 1) (1 1 1) (2) (2 1) (2 1) (2 1) (2 1) (2 2 2 1 1 1) (2 2 1 1 1) (1 1 1) (2) (2) (2 1 1) (1 1) (1 1 1) (2) (2) (2 1 1) (2 1 1) (2) (2 2 2 1 1 1) (2 2 1 1 1) (2 2 1 1) (1) (2 2 1 1) (2 2 1 1) (1) (2 2 2 1 1 1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2 1) (2 1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1 1) (2) (2) (2) (2) (2) (2 1) (1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1 1) (2) (2) (2 1) (2 1) (2 1 1) (2) (2) (2) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1 1) (2) (2) (1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 784 316) 0 1000 nil 149/25 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4))) (setf (create-info copy) (quote ("2021/05/08 20:07:58" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 208 200) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 387 874) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 40))) (om-make-point 342 908) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 305 844) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 241 679) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 402 738) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 320 797) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEGMENT-SEQ" (quote segment-seq) (quote ((om-load-inputfun (quote input-funbox) "chord-seq or multi-seq" "SELF" (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 7200) (6400 7000) (6700))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000 1000) (1000 1000) (1000))) :lvel (quote ((100 100) (100 100) (100))) :loffset (quote ((0 0) (0 0) (0))) :lchan (quote ((1 1) (2 1) (3))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (om-load-inputfun (quote input-funbox) "list or number" "TIME-PT" (list 0 1000)) (om-load-inputfun (quote input-funbox) "number" "SAMP-DUR" 250) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "DETECTION-MODE" 0 (list (list "detect onsets" 0) (list "detect onsets and durations" 1))) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "CLIP-MODE" 2 (list (list "no clipping" 0) (list "clip onsets" 1) (list "clip durations" 2) (list "clip onsets and durations" 3))))) (om-make-point 129 713) (om-make-point 188 75) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 394 629) (om-make-point 38 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "chopin" (let ((copy (make-instance (quote ominstance) :name "chopin" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (7600) (6900 6400 6000 7600) (6900 6400 6000) (6900 6400 6000) (6900 6400 6000) (6900 6400 6000) (6900 6400 6000) (6900 6400 6000 7700) (6900 6400 6000) (6900 6200 5900 7600) (6900 6200 5900) (6900 6200 5900) (6900 6200 5900) (6800 6200 5900) (6800 6200 5900) (6800 6200 5900 7700) (6800 6200 5900) (6800 6200 5800 7600) (6800 6200 5800) (6800 6200 5800) (6800 6200 5800) (6700 6200 5800) (6700 6200 5800) (6700 6100 5800 7700) (6700 6100 5800) (6700 6100 5700 7600) (6700 6100 5700) (6700 6100 5700) (6700 6100 5700) (6700 6000 5700) (6700 6000 5700) (6600 6000 5700 7500) (6600 6000 5700) (6500 6000 5700 7400) (6500 6000 5700) (6500 6000 5700) (6500 6000 5700) (6500 5900 5700) (6500 5900 5700) (6500 5900 5700 7600) (6500 5900 5700) (6500 5900 5700 7400) (6500 5900 5700) (6500 5900 5700) (6500 5900 5700) (6500 5900 5600) (6500 5900 5600) (6500 5900 5600 7600) (6500 5900 5600) (6500 5900 5500 7400) (6500 5900 5500) (6500 5900 5500) (6500 5900 5500) (6500 5900 5500) (6500 5900 5500) (6500 5900 5500 7600) (6500 5900 5500) (7400) (6500 5800 5500 7400) (6500 5800 5500) (6500 5800 5500) (6500 5800 5500) (6400 5800 5500) (6400 5800 5500) (6400 5800 5500 7300) (6400 5800 5500) (6400 5700 5300) (6400 5700 5300) (6200 5700 5300 7400) (6200 5700 5300 7600) (6200 5700 5300 7900) (6200 5700 5300 7700) (6200 5700 5300 6900) (6200 5700 5300 7400) (6200 5700 5200 7100) (6200 5700 5200) (6200 5600 5200) (6200 5600 5200) (6200 5700 5300) (6200 5700 5300) (6200 5700 5300 7400) (6200 5700 5300) (6200 5600 5200 7100) (6200 5600 5200) (6200 5600 5200) (6200 5600 5200) (6200 5700 5300) (6200 5700 5300) (6200 5700 5300 7400 7600) (6200 5700 5300) (6200 5600 5200 7200) (7100) (6500) (6400) (6800) (7100) (7900) (7700) (7600) (6900 6400 6000 7600) (6900 6400 6000) (6900 6400 6000) (6900 6400 6000) (6900 6400 6000) (6900 6400 6000) (6900 6400 6000 7700) (6900 6400 6000) (6900 6200 5900 7600) (6900 6200 5900) (6900 6200 5900) (6900 6200 5900) (6800 6200 5800) (6800 6200 5800) (6800 6200 5800 7700) (6800 6200 5800) (6800 6100 5800 7600) (6800 6100 5800) (6700 6100 5800) (6700 6100 5800) (6700 6100 5700) (6700 6100 5700) (6700 6100 5700 7700) (6700 6100 5700) (6700 6000 5700 7600) (6700 6000 5700) (7500) (6600 6000 5700 7500) (7500 6600 6000 5700 7600) (7500 7400) (6300 5700 5400 8400) (6300 5700 5400) (6200 5700 5300 8300) (6200 5700 5300) (8100) (5200 4000 8100) (7400 7100 6500 6200 8000) (7400 7100 6500 6200 8900) (7400 7100 6500 6200 8000) (7100 6800 6400 6000 8000) (6900 6400 6000 8100) (6900 6400 6000 8400) (6900 6400 6000 7600) (6900 6500 6200 7900) (6900 6500 6200 7700) (5000 8100) (6500 5900 5700 6900) (7400) (6400 5700 5200 7100) (6400 5700 5200) (6200 5700 5300) (6200 5700 5300 7400) (6400 5700 5200 7100) (6400 5700 5200) (6400 5700 5200) (6400 5700 5200) (6200 5700 5300) (6200 5700 5300) (6200 5700 5300 7400 7600) (6200 5700 5300) (6400 5700 5200 7100) (6400 5700 5200) (6400 5700 5200) (6400 5700 5200) (6400 5600 5200) (6400 5600 5200) (6200 5600 5200) (6200 5600 5200) (6900) (6000 5300 6900) (6000 5300) (6000 5300) (6000 5300) (6300 5300) (6300 5300) (6200 5700 5300 7100) (6200 5700 5300) (6200 5700 5200 6900) (6200 5700 5200) (6100 5700 5200) (6100 5700 5200) (6000 5700 5200) (6000 5700 5200) (6000 5700 5200 7100) (6000 5700 5200) (6000 5300 5100 6900) (5200 4000 6900 6400 5900 5700) (5200 4700 4000 6800 6400 5900 5600) (4500 3300 6900 6400 6000 5700))) :lonset (quote (1500 1875 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4500 4750 5000 5250 5500 5750 6000 6250 6500 6750 7000 7250 7500 7750 8000 8250 8500 8750 9000 9250 9500 9750 10000 10250 10500 10750 11000 11250 11500 11750 12000 12250 12500 12750 13000 13250 13500 13750 14000 14250 14500 14750 15000 15250 15500 15750 15875 16000 16250 16500 16750 17000 17250 17500 17750 18000 18250 18500 18750 19000 19250 19500 19750 20000 20250 20500 20750 21000 21250 21500 21750 22000 22250 22500 22750 23000 23250 23438 23750 24000 24250 24500 24750 25000 25250 25500 25667 25833 26000 26250 26500 26750 27000 27250 27500 27750 28000 28250 28500 28750 29000 29250 29500 29750 30000 30250 30500 30750 31000 31250 31500 31750 32000 32250 32375 32500 32750 32875 33000 33250 33500 33750 33875 34000 34250 34500 34750 35000 35250 35500 35750 36000 36250 36500 36667 36833 37000 37250 37500 37750 38000 38250 38500 38750 39000 39250 39438 39750 40000 40250 40500 40750 41000 41250 41500 41750 41875 42000 42250 42500 42750 43000 43250 43500 43750 44000 44250 44500 44750 45000 45250 45500 45750 46000 48000 49000 50000 51899)) :ldur (quote ((355) (118) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 355) (236 236 236) (118) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 949) (236 236 236) (236 236 236) (236 236 236) (236 236 236 236) (236 236 236 236) (236 236 236 236) (236 236 236 236) (236 236 236 236) (236 236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474 58) (236 236 236) (474 474 474 236) (236) (236) (236) (236) (236) (157) (157) (158) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (236 236 236 355) (236 236 236) (118) (236 236 236 236) (59 236 236 236 58) (58 58) (236 236 236 474) (236 236 236) (236 236 236 355) (236 236 236) (118) (236 236 236) (236 236 236 236 236) (236 236 236 236 236) (236 236 236 236 236) (236 236 236 236 236) (236 236 236 236) (236 236 236 236) (236 236 236 236) (236 236 236 236) (236 236 236 236) (236 157) (236 236 236 157) (158) (236 236 236 711) (236 236 236) (236 236 236) (236 236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474 58) (236 236 236) (236 236 236 1780) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (118) (236 236 1424) (236 236) (236 236) (236 236) (236 236) (236 236) (236 236 236 474) (236 236 236) (236 236 236 1424) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236) (236 236 236 474) (236 236 236) (949 949 949 949) (949 949 949 949 949 949) (949 949 949 949 949 949 949) (1899 1899 1899 1899 1899 1899))) :lvel (quote ((55) (52) (31 25 21 62) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (24 19 16 58) (24 19 16) (31 25 21 62) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (24 19 16 58) (24 19 16) (31 25 21 62) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (24 19 16 59) (24 19 16) (31 25 21 64) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (24 19 16 58) (24 19 16) (31 25 21 62) (27 22 18) (28 23 18) (28 23 19) (31 26 20) (34 26 22) (31 23 19 63) (32 25 19) (39 34 27 66) (35 27 23) (35 27 22) (34 26 22) (32 26 26) (32 25 25) (27 20 20 67) (26 20 20) (37 29 25 67) (32 26 20) (32 26 20) (32 26 20) (32 26 20) (32 26 20) (26 20 17 66) (26 20 17) (57) (31 25 21 62) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (27 22 18) (24 19 16 62) (24 19 16) (29 29 24) (28 28 23) (32 32 26 65) (35 35 27 69) (35 35 27 74) (32 32 26 65) (26 26 20 68) (25 25 20 62) (29 29 24 62) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (23 23 19 57) (23 23 19) (29 29 24 62) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (23 23 19 62 52) (23 23 19) (29 29 24 62) (46) (54) (42) (64) (59) (65) (62) (57) (31 25 21 62) (27 22 18) (29 22 18) (29 24 19) (31 25 19) (32 26 20) (32 24 20 68) (33 26 20) (35 28 23 71) (32 25 20) (33 26 21) (35 27 22) (35 28 22) (38 29 24) (38 27 24 74) (38 30 25) (45 37 30 76) (40 33 26) (41 34 27) (41 36 27) (44 36 29) (45 37 29) (40 31 27 77) (41 31 27) (50 42 42 84) (42 36 36) (78) (45 38 38 85) (73 55 46 46 70) (79 76) (56 46 46 88) (52 43 43) (52 43 43 91) (54 45 45) (77) (69 57 89) (54 54 45 45 86) (54 54 45 45 92) (54 54 45 45 85) (57 57 47 47 88) (49 41 41 82) (49 41 41 85) (49 41 41 77) (53 44 44 80) (46 38 38 69) (44 77) (44 37 37 67) (67) (46 38 38 73) (38 33 33) (38 33 33) (36 29 29 69) (29 29 24 64) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (23 23 19 57 47) (23 23 19) (29 29 24 57) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (23 23 19) (23 23 19) (52) (32 32 57) (29 29) (29 29) (28 28) (28 28) (28 28) (23 23 19 52) (23 23 19) (29 29 24 52) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (27 27 22) (23 23 19 47) (23 23 19) (29 29 24 47) (23 19 33 28 28 28) (23 23 19 33 28 28 28) (23 19 33 28 28 28))) :loffset (quote ((0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (62 62 62 62 0) (0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0) (0 0 0 0) (62 0 0 0 0) (63 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (83 83 83 0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (62 62 62 62 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 784 316) 0 1000 nil 149/25 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4))) (setf (create-info copy) (quote ("2021/05/08 20:07:58" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 48 201) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-TRANSIENTS" (quote get-transients) (quote ((om-load-inputfun (quote input-funbox) "sequence" "SELF" nil) (om-load-inputfun (quote input-funbox) "number" "THRESHOLD" 0.1))) (om-make-point 340 659) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "psalms" (let ((copy (make-instance (quote ominstance) :name "psalms" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5200 4800 4500 6000 8400 8100 7200 8800) (5100 7500) (5500 7900) (5800 8200) (6100 8500) (6000 8400) (5800 8200) (5500 7900) (5200 7600) (6100 8500) (6000 8400) (5500 7900) (5200 7600) (5100 7500) (5500 7900) (5800 8200) (6100 8500) (6000 8400) (5800 8200) (5500 7900) (5200 7600) (5200 4800 4500 6000 8400 8100 7200 8800) (5100 7500) (5500 7900) (5800 8200) (6100 8500) (5000 7400) (5500 7900) (5800 8200) (6100 8500) (5000 7400) (5500 7900) (5800 8200) (6100 8500) (6000 8400) (5800 8200) (5500 7900) (5000 7400) (6100 8500) (5800 8200) (5500 7900) (5000 7400) (5800 8200) (5500 7900) (4800 7200) (4700 7100) (5200 4800 4500 6000 7200 8400 8100 8800) (6100 8500) (5800 8200) (5500 7900) (5000 7400) (5800 8200) (5500 7900) (4800 7200) (4700 7100) (5800 8200) (5500 7900) (4800 7200) (4700 7100) (5700 8100) (6000 7700) (6500 7200) (7000 7000) (6700 7900) (6400 7600) (6000 7200) (5800 7000) (6400 6700) (6100 6300) (5700 6000) (5500) (5200) (4900 5800 7000) (4500 6000 6000 7200) (6100 6400 7300) (6300 6700 7500) (6500 6900 7700) (6700 7300 7900) (6800 7600 8000) (7000 7900 8200) (7200 8400) (7300 8100 8500) (7500 8700) (7700 8800 8900) (7900 9100) (4500 5700 5200 4800 8400 8100 7200 8800) (3300 4500 6900) (7200) (7600) (7700) (6700) (7000) (7600) (7700) (6700) (6900) (7600) (7700) (6500) (6700) (7400) (7600) (6500) (6700) (7400) (7600) (6400) (6700) (7400) (7600) (7600 3400 4600 6400) (6700) (7400) (7600) (7700 6400) (6500) (7400) (7600) (7700 3300 4500 6400) (6500) (7200) (7400) (6300) (6400) (7200) (7400) (7600 3600 4800 6300) (6400) (7200) (7300) (3400 4600 6300) (6500) (7200) (7300) (7600 3600 4800 7200) (7000) (6700) (6400) (7700 6300) (6400) (6700) (7300) (7700 3700 4900 7200) (7000) (6700) (6400) (3900 5100 6300) (6400) (6700) (7300) (7900 7200) (7000) (6700) (6400) (3700 4900 6300) (6400) (6700) (7300) (7700 7200) (7000) (6700) (6400) (7900 6300) (6400) (6700) (7300) (7900 4800 7200) (7000) (6700) (6400) (8100 4900 6300) (6400) (6700) (7300) (6900 6900 6000 6400) (5800 6700) (7000 7000 5500 6300) (5200 6600) (7000 7000 5100 6400) (5200 6700) (5800 6300) (6100 6600) (6900 6900 6000 6400) (5800 6700) (5500 6300) (5200 6600) (5100 6400) (5200 6700) (5800 6300) (6100 6600) (6900 6900 6000 6400) (5800 6700) (7000 7000 5500 6300) (5200 6600) (7000 7000 5100 6400) (5200 6700) (6900 6900 5800 6300) (6100 6600) (6900 6900 6000 6400) (5800 6700) (7000 7000 5500 6300) (5200 6600) (7000 7000 5100 6400) (5200 6700) (6900 6900 5800 6300) (6100 6600) (6900 6900 6000 6400) (5800 6700) (7000 7000 5500 6300) (5200 6600) (7000 7000 5100 6400) (5200 6700) (5800 6300) (6100 6600) (6000 6400) (5800 6700) (5500 6300) (5200 6600) (6900 6900 4800 6400) (4600 6700) (4300 6300) (4000 6600) (3900 6400) (4000 6700) (4600 6300) (4900 6600) (4800 6400) (4600 6700) (4300 6300) (4000 6600) (6000 7200 7900 6000 3900 7000 7900) (4000 7300) (6000 6200 7200 7900 4600 6900) (4900 7200) (5100 6700) (5200 7000) (6000 6400 7000 8200 6400 5800 8200) (6100 6900) (6000 6500 7200 7900 6000 6000 7000 7900) (5800 7300) (6000 6700 7300 8200 6700 5500 6900 8400 8200) (5200 7200) (6000 6500 7200 7900 6000 5100 6700 7900) (5200 7000) (6000 6400 7200 7900 5800 6600) (6100 6900) (6000 6400) (5800 6700) (6000 7000 7300 8200 6000 5500 7000 8200) (5200 7300) (5100 6900) (4900 7200) (4600 6700) (4300 7000) (6000 7200 7200 7900 3900 6600 7900 7200) (4000 6900) (4600 6400) (4900 6700) (5100 6300) (5200 6500) (9300 3400 4600 6000 6400) (6900) (5800 6700) (7000 9400 3700 4900 5500 6300) (5200 6600) (7000 9400 3300 4500 5100 6400) (5200 6700) (3600 4800 5800 6300) (6100 6600) (6900 9300 3400 4600 6000 6400) (5800 6700) (3700 4900 5500 6300) (5200 6600) (3300 4500 5100 6400) (5200 6700) (3600 4800 5800 6300) (6100 6600) (6900 9300 3400 4600 6000 6400) (5800 6700) (7000 9400 3700 4900 5500 6300) (5200 6600) (7000 9400 3300 4500 5100 6400) (5200 6700) (6900 9300 3600 4800 5800 6300) (6100 6600) (6900 9300 3400 4600 6000 6400) (5800 6700) (7000 9400 3700 4900 5500 6300) (5200 6600) (7000 9400 3300 4500 5100 6400) (5200 6700) (6900 9300 3600 4800 5800 6300) (6100 6600) (6900 9300 3400 4600 6000 6400) (5800 6700) (7000 9400 3700 4900 5500 6300) (5200 6600) (7000 9400 3300 4500 5100 6400) (5200 6700) (3600 4800 5800 6300) (6100 6600) (3400 4600 6000 6400) (5800 6700) (3700 4900 5500 6300) (5200 6600) (6900 9300 3300 4500 5100 6400) (5200 6700) (3600 4800 5800 6300) (6100 6600) (3400 4600 6000 6400) (5800 6700) (3700 4900 5500 6300) (6700) (6900 5200 6600) (7200) (7600 5200) (7900 5500) (8100 5700) (8400 6000) (8400 8100 7200 8800 5200 4800 4500 6000) (9300 3300 4500) (9600) (10000 6000) (10100) (6900 9300 6400) (9600) (10000 6500) (10100) (9300 5500) (9600) (10000 5800) (10100) (6900 9100 6400) (9300) (10000 6500) (10100) (9100 5500) (9300) (10000 5700) (10100) (6900 9100 6200) (9300) (9800 6400) (10000) (6900 9100 5300) (9300) (9800 5500) (10000) (6900 8100 8900 6200) (9100) (9800 6400) (10000) (6900 8100 8900 3300 4500) (9100) (9800 5500) (10000) (6900 8100 8900 6200) (9100) (9800 6400) (10000) (6900 8100 8900 5200) (9100) (9800 5500) (10000) (8900 6200) (9100) (9800 6400) (10000) (8800 5200) (8900) (9800 5500) (10000) (8800 6200) (8900) (9800 6400) (10000) (8400 8100 7200 8800 5200 4800 4600 4500 6000) (5200 6400 6400 4500 5700 5700) (5700) (4300 5800 5700) (5700) (4500 6000 5700) (5800) (4300 5800 6000) (6200) (6400 7600 4500 6000 5700) (5800) (4300 5800 6000) (6200) (6200 7400 6500 4500 6000 5700) (5700) (4300 5800 5700) (5700) (5200 6400 4600 6200 5700) (5800) (4500 6000 6000) (6200) (5300 6500 6400 4800 6400 5700) (5700) (5500 6700 4600 6200 5700) (5800) (5700 6900 5000 6500 6000) (6200) (4800 6400 6400) (6500) (5700 6900 6900 5700 6900 4700 6300) (5800) (6000 4600 6200) (6200) (5700 4700 6300) (5700) (5700 4600 6200) (5700) (5700 6400 7600 5700 4600 6200) (5800) (6000 4500 6100) (6200) (6200 6700 7400 6400 4500 6000 5700) (5800) (4300 5900 6000) (6200) (6400 7600 7900 4500 6000 5500) (5500) (4300 5900 5500) (5500) (6500 7200 6400 4500 5300 6200) (5300) (4300 5300 6000) (5300) (5300 7000 7600 7400 4300 5300 6200) (5300) (6500 4100 5300 6000) (5300) (6200 6700 6900 7400 6200 4000 5200 5500 6200) (5500) (3900 5100 5500 6000) (5500) (6200 6700 6700 7400 6700 4800 5700 6400) (5700) (4600 5700 6200) (5700) (6900 4600 5700 6200) (5800) (4500 6000 6000) (6200) (6200 6700 7900 7900 7400 4600 5700 5700) (5800) (4500 6000 6200) (6200) (5500 6700 7700 7000 7500 4900 6300 5800) (6000) (4800 6100 6100) (6300) (5800 7200 4900 6300 5800) (5800) (4800 6100 5800) (5800) (6700 6700 7900 8200 8200 4900 6300 5800) (6000) (4800 6100 6100) (6300) (6700 6800 7500 7500 6800 6700 4700 5600 6500) (5600) (4600 5600 6400) (5600) (6700 7600 8500 7200 4600 5600 6500) (5600) (5600 4400 5600 6400) (5600) (5800 7200 7700 8400 7900 7700 4300 5800 6500) (6000) (4200 6100 6400) (6300) (6700 6800 7500 7900 4700 5800 6500) (6000) (4600 6100 6400) (6300) (5600 7600 8500 7000 4600 5800 6500) (5800) (4400 5800 6400) (5800) (5800 7200 7700 8400 6700 4300 5800 6500) (6000) (4200 6100 6400) (6300) (6500 7000 7700 8400 7200 6700 4200 5400 6400 6400) (6500) (4100 5300 6700 6200) (6900) (5500 4200 5400 6200 6400) (6400) (4000 5200 6500 6200) (6700) (6400 7000 7900 8400 8400 8100 7900 4100 5300) (6200) (4000 5200 6400 6200) (6500) (6400 7100 7900 8400 7600 7100 6700 4200 5700 6400) (5700) (4100 5300 5700 6200) (5900) (5300 4100 5300 6000 6400) (6200) (4000 5200 6400 6200) (6500) (6200 7200 8100 8400 4100 5800) (6000) (8800 8200 7900 8400 4000 5200 6200 6200) (6400))) :lonset (quote (0 500 625 750 875 1000 1125 1250 1375 1500 1625 1750 1875 2000 2125 2250 2375 2500 2625 2750 2875 3500 4000 4125 4250 4375 4500 4625 4750 4875 5000 5125 5250 5375 5500 5625 5750 5875 6000 6125 6250 6375 6500 6625 6750 6875 7000 7500 7625 7750 7875 8000 8125 8250 8375 8500 8625 8750 8875 9000 9125 9250 9375 9500 9625 9750 9875 10000 10125 10250 10375 10500 10625 10750 10875 11000 11125 11250 11375 11500 11625 11750 11875 12000 12125 12500 13000 13125 13250 13375 13500 13625 13750 13875 14000 14125 14250 14375 14500 14625 14750 14875 15000 15125 15250 15375 15500 15625 15750 15875 16000 16125 16250 16375 16500 16625 16750 16875 17000 17125 17250 17375 17500 17625 17750 17875 18000 18125 18250 18375 18500 18625 18750 18875 19000 19125 19250 19375 19500 19625 19750 19875 20000 20125 20250 20375 20500 20625 20750 20875 21000 21125 21250 21375 21500 21625 21750 21875 22000 22125 22250 22375 22500 22625 22750 22875 23000 23125 23250 23375 23500 23625 23750 23875 24000 24250 24500 24750 25000 25250 25500 25750 26000 26250 26500 26750 27000 27250 27500 27750 28000 28250 28500 28750 29000 29250 29500 29750 30000 30250 30500 30750 31000 31250 31500 31750 32000 32250 32500 32750 33000 33250 33500 33750 34000 34250 34500 34750 35000 35250 35500 35750 36000 36250 36500 36750 37000 37250 37500 37750 38000 38250 38500 38750 39000 39250 39500 39750 40000 40250 40500 40750 41000 41250 41500 41750 42000 42250 42500 42750 43000 43250 43500 43750 44000 44250 44500 44750 45000 45250 45500 45625 45750 46000 46250 46500 46750 47000 47250 47500 47750 48000 48250 48500 48750 49000 49250 49500 49750 50000 50250 50500 50750 51000 51250 51500 51750 52000 52250 52500 52750 53000 53250 53500 53750 54000 54250 54500 54750 55000 55250 55500 55750 56000 56250 56500 56750 57000 57250 57500 57750 58000 58125 58250 58375 58500 58625 58750 58875 59500 60000 60125 60250 60375 60500 60625 60750 60875 61000 61125 61250 61375 61500 61625 61750 61875 62000 62125 62250 62375 62500 62625 62750 62875 63000 63125 63250 63375 63500 63625 63750 63875 64000 64125 64250 64375 64500 64625 64750 64875 65000 65125 65250 65375 65500 65625 65750 65875 66000 66125 66250 66375 66500 66625 66750 66875 67500 68000 68250 68500 68750 69000 69250 69500 69750 70000 70250 70500 70750 71000 71250 71500 71750 72000 72250 72500 72750 73000 73250 73500 73750 74000 74250 74500 74750 75000 75250 75500 75750 76000 76250 76500 76750 77000 77250 77500 77750 78000 78250 78500 78750 79000 79250 79500 79750 80000 80250 80500 80750 81000 81250 81500 81750 82000 82250 82500 82750 83000 83250 83500 83750 84000 84250 84500 84750 85000 85250 85500 85750 86000 86250 86500 86750 87000 87250 87500 87750 88000 88250 88500 88750 89000 89250 89500 89750 90000 90250 90500 90750 91000 91250 91500 91750 92000 92250 92500 92750 93000 93250 93500 93750 94000 94250 94500 94750 95000 95250 95500 95750 96000 96250 96500 96750 97000 97250 97500 97750 98000 98250 98500 98750 99000 99250 99500 99750 100000 100250 100500 100750 104000)) :ldur (quote ((500 500 500 500 500 500 500 500) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (625 625) (500 500 500 500 500 500 500 500) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (500 500 500 500 500 500 500 500) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125 125) (125) (125) (125 125 125) (125 125 125 125) (125 125 125) (125 125 125) (125 125 125) (125 125 125) (125 125 125) (125 125 125) (125 125) (125 125 125) (125 125) (125 125 125) (375 375) (500 500 500 500 500 500 500 500) (125 125 125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125 125 125 125) (125) (125) (125) (125 125) (125) (125) (125) (125 125 125 125) (125) (125) (125) (125) (125) (125) (125) (125 125 125 125) (125) (125) (125) (125 125 125) (125) (125) (125) (125 125 125 125) (125) (125) (125) (125 125) (125) (125) (125) (125 125 125 125) (125) (125) (125) (125 125 125) (125) (125) (125) (125 125) (125) (125) (125) (125 125 125) (125) (125) (125) (125 125) (125) (125) (125) (125 125) (125) (125) (125) (125 125 125) (125) (125) (125) (125 125 125) (125) (125) (125) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250) (250 250) (250 250 250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250 250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250) (250 250) (250 250 250 250 250 250 250) (250 250) (250 250 250 250 250 250 250 250) (250 250) (250 250 250 250 250 250 250 250 250) (250 250) (250 250 250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250) (250 250) (250 250 250 250 250 250 250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (250 250 250 250 250 250 250 250) (250 250) (250 250) (250 250) (250 250) (250 250) (125 125 125 125 125) (125) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250 250 250) (250 250) (250 250 250 250) (250 250) (250 250 250 250) (250 250) (125 125 125 125) (125) (125 125 125) (125) (125 125) (125 125) (125 125) (625 625) (500 500 500 500 500 500 500 500) (125 125 125) (125) (125 125) (125) (125 125 125) (125) (125 125) (125) (125 125) (125) (125 125) (125) (125 125 125) (125) (125 125) (125) (125 125) (125) (125 125) (125) (125 125 125) (125) (125 125) (125) (125 125 125) (125) (125 125) (125) (125 125 125 125) (125) (125 125) (125) (125 125 125 125 125) (125) (125 125) (125) (125 125 125 125) (125) (125 125) (125) (125 125 125 125) (125) (125 125) (125) (125 125) (125) (125 125) (125) (125 125) (125) (125 125) (125) (125 125) (125) (125 125) (625) (500 500 500 500 500 500 500 500 500) (250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250) (250) (250 250 250) (250) (250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250) (250) (250 250 250 250 250) (250) (250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250) (250) (250 250 250 250) (250) (250 250 250 250 250 250 250 250 250) (250) (250 250 250 250) (250) (250 250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250) (250) (250 250 250 250) (250) (250 250 250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250 250) (250) (250 250 250) (250) (250 250 250 250 250 250 250 250 250 250) (250) (250 250 250 250) (250) (250 250 250 250 250) (250) (250 250 250 250) (250) (250 250 250 250 250 250 250 250 250) (250) (250 250 250 250) (250) (250 250 250 250 250 250 250 250 250 250) (250) (250 250 250 250) (250) (250 250 250 250 250) (250) (250 250 250 250) (250) (250 250 250 250 250 250) (250) (250 250 250 250 250 250 250 250) (3250))) :lvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 149/25 nil 1000 0 (om-make-point 784 316) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil))) (setf (create-info copy) (quote ("2021/05/08 20:07:58" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 150 200) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORIGINAL SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 95 378) (om-make-point 508 185) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4500) (5200) (5700) (6000) (6400) (4500) (5200) (5700) (6000) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (5700) (6000) (6400) (6900 8100) (5400 8400) (6000) (6400) (6900 8300) (8100 7200) (5500 8300) (5900) (6400) (6700) (7600 7100) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4000 6800 7600) (4700) (5200) (5600) (5900) (6400) (6800) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (6400) (5700) (6000) (6400 7900) (5300 7000 8200) (5500) (5800) (6200 8100) (6700 7900) (5200 8100 6900) (5500) (5700) (6100) (6900 6700) (5000 6600 6900) (6000) (6000) (6800) (7100 6500) (5200 6400 6900) (6200) (6200) (6800) (7200 6800) (4500 6900) (5200) (5700) (5700) (6000) (6400) (4500) (5200) (6000) (5700) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (5700) (6000) (6400) (8100 6900) (5400 8400 7200) (5700) (6000) (6400 8300 7100) (8100 6900) (5500 8300 7100) (5900) (6400) (6700) (7600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4000 6800 7600) (4700) (5200) (5600) (5900) (6400) (6800) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (6400) (5700) (6000) (6400 7900) (5300 7000 8200) (5800) (6200) (6500 8100) (7000 7900) (5200 8100 6900) (5700) (6100) (6700) (7900 6900) (5000 6900 7800) (6000) (6000) (6800) (7700 7100) (5200 6900 7600) (6200) (6200) (6800) (7200 6800) (4500 6900) (5200) (5700) (5700) (6000) (6400) (4500) (5200) (5700) (5700) (6100) (6400) (5400 6400 6900 7300) (6900) (6300 7100) (5300 6200 7200) (7400) (6000 7500) (5900 5500 6700 7600) (7700) (6500 7900) (6400 4800 6000 8100) (5900) (5800 7600) (5400 5700 6900 7200) (6900) (6400 7100) (5300 6200 7200) (7400) (6000 7500) (5200 5900 7600 6800) (6000 7800 6900) (6200 8000 7100) (5200 4500 8100 6900) (6000) (5400 6400 7300 6900) (6900) (6300 7100) (5300 6200 7200) (7400) (6000 7500) (5500 5900 6700 7600) (7700) (6500 7900) (4800 5800 8100) (6400) (5700) (5800 7600) (5400 6400 6900 7200) (6900) (6300 7100) (5300 6200 7200) (7400) (6000 7500) (5900 5200 7600 6800) (6000 7800 6900) (6200 8000 7100) (4500 6000 8100 6900) (4300 5900 5000 8100 7700 6900) (4500 5400 7600 7200 6400) (8400 8100 7500) (4700) (5400) (6300 8300 8000) (8400 8100) (8300 7700 7100) (4000) (4700) (5200 8100 7800) (5900 8000 7600) (6400) (4300 5900 5000 8100 7700 6900) (4500 5400 7600 7200 6400) (7400 7100 6200) (4700) (5400) (7100 6800) (7200 6900 6300) (7100 6800 5900) (4000) (5200 6400) (5600 6800) (5900 7100) (6400 7600) (5000 4300 5900 8100 7700 6900) (4500 5400 7600 7200 6400) (8400 8100 7500) (4700) (5400) (6300 8300 8000) (8400 8100) (8300 8000 7100) (4000) (4700) (5200 8100 7700) (5900 8000 7600) (6400) (5000 4300 5900 8100 7700 6900) (4500 5400 7600 7200 6400) (5500 6400 7400 7000) (7000) (5300 6200 7200 6900) (6000 5200 7400 6800) (6600) (5900 5200 6200 7600 6800 6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (5700) (6000) (6400) (6900 8100) (5400 8400) (6000) (6400) (6900 8300) (7200 8100) (5500 8300) (5900) (6400) (6700) (7100 7600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4800 7600) (5500) (6000 6700) (7400) (5700 6200 7800 6600) (4000 7600 6800) (4700) (5200) (5600) (5900) (6400) (6800 7600) (6400) (4500 6900) (5200) (5700) (6000) (6400 7200) (5500 7600) (6400) (5700) (6000) (6400 7900) (5300 7000 8200) (5500) (5800) (6200 8100) (6700 7900) (5200 8100 6900) (5500) (5700) (6100) (6900 6700) (5000 6600 6900) (6000) (6000) (6800) (7100 6500) (5000 6400 6900) (6200) (6200) (6800) (7200 6800))) :lonset (quote (0 125 250 375 500 750 875 1000 1125 1250 1500 1625 1750 1875 2000 2250 2375 2500 2625 2750 3000 3125 3250 3375 3500 3750 3875 4000 4125 4250 4500 4625 4750 4875 5000 5250 5375 5500 5625 5750 6000 6125 6250 6375 6500 6625 6750 7250 7500 7625 7750 7875 8000 8250 8375 8500 8625 8750 9000 9125 9250 9375 9500 9750 9875 10000 10125 10250 10500 10625 10750 10875 11000 11250 11375 11500 11625 11750 12000 12125 12250 12375 12500 12625 12750 12875 13000 13125 13250 13500 13625 13750 13875 14000 14250 14375 14500 14625 14750 15000 15125 15250 15375 15500 15750 15875 16000 16125 16250 16500 16625 16750 16875 17000 17250 17375 17500 17625 17750 18000 18125 18250 18375 18500 18625 18750 19250 19500 19625 19750 19875 20000 20250 20375 20500 20625 20750 21000 21125 21250 21375 21500 21750 21875 22000 22125 22250 22500 22625 22750 22875 23000 23250 23375 23500 23625 23750 24000 24125 24250 24375 24500 24625 24750 24875 25000 25125 25250 25375 25500 25875 26000 26250 26625 26750 27000 27375 27500 27750 28125 28250 28500 28875 29000 29250 29625 29750 30000 30375 30500 30750 30875 31500 31875 32000 32250 32625 32750 33000 33375 33500 33750 34000 34125 34250 34500 34875 35000 35250 35625 35750 36000 36375 36500 36750 37500 38250 39000 39125 39250 39375 39500 39750 39875 40000 40125 40250 40375 40500 41250 42000 42125 42250 42375 42500 42750 42875 43000 43125 43250 43375 43500 44250 45000 45125 45250 45375 45500 45750 45875 46000 46125 46250 46375 46500 47250 48000 48375 48500 48750 49125 49250 49500 49625 49750 49875 50000 50250 50375 50500 50625 50750 51000 51125 51250 51375 51500 51750 51875 52000 52125 52250 52500 52625 52750 52875 53000 53250 53375 53500 53625 53750 54000 54125 54250 54375 54500 54625 54750 55250 55500 55625 55750 55875 56000 56250 56375 56500 56625 56750 57000 57125 57250 57375 57500 57750 57875 58000 58125 58250 58500 58625 58750 58875 59000 59250 59375 59500 59625 59750 59986)) :ldur (quote ((711) (118) (118) (118) (236) (711) (118) (118) (355) (236) (711 474) (118) (118) (118) (236 236) (711 474) (355) (118) (118) (236 236) (711 355) (118) (118) (355 118) (236 236) (711 474) (118) (118) (355) (236 236) (711 711) (118) (236 474) (118) (236 236 236 236) (711 711) (355) (236 474) (118) (236 236 236 236) (711 711 1424) (118) (118) (355) (118) (118) (474) (236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (118) (236 236) (711 711 355) (118) (118) (118 118) (236 236) (711 474 474) (118) (118) (355) (236 236) (118 474 711) (118) (474) (118) (236 236) (118 474 711) (118) (474) (118) (236 236) (118 1424) (118) (118) (118) (118) (118) (118) (118) (118) (118) (236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (355) (236 236) (711 355 355) (118) (118) (355 118 118) (236 236) (711 474 474) (118) (118) (355) (236) (711 711) (118) (236 474) (118) (236 236 236 236) (711 711) (355) (236 474) (118) (236 236 236 236) (711 711 1424) (355) (118) (118) (118) (118) (711) (236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (118) (236 236) (711 711 355) (118) (118) (118 118) (236 236) (711 474 474) (118) (118) (355) (236 236) (118 711 474) (118) (474) (118) (236 236) (118 711 474) (118) (474) (118) (236 236) (118 1424) (118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (118) (711 474 355 474) (593) (236 236) (711 474 355) (118) (236 236) (711 711 711 355) (118) (236 236) (622 711 711 474) (118) (236 236) (711 474 355 474) (1068) (236 236) (711 474 355) (118) (236 236) (711 355 355 355) (118 118 118) (236 236 236) (681 711 711 711) (593) (711 474 355 355) (118) (236 236) (711 474 355) (118) (236 236) (711 711 711 355) (118) (236 236) (711 374 474) (474) (118) (236 236) (711 711 355 474) (1068) (236 236) (711 474 355) (118) (236 236) (474 711 355 355) (355 118 118) (236 236 236) (711 711 711 711) (711 711 711 711 711 711) (711 711 711 711 711) (355 355 355) (118) (118) (355 118 118) (236 236) (355 355 355) (118) (118) (118 118 118) (118 236 236) (118) (711 711 711 711 711 711) (711 711 711 711 711) (355 355 355) (118) (474) (118 118) (236 236 236) (236 236 236) (118) (118 118) (118 118) (118 118) (118 118) (711 711 711 711 711 711) (711 711 711 711 711) (355 355 355) (118) (118) (355 118 118) (236 236) (355 355 355) (118) (118) (118 118 118) (118 236 236) (118) (711 711 711 711 711 711) (711 711 711 711 711) (474 474 355 355) (118) (236 236 236 236) (474 474 355 355) (118) (236 236 236 236 236 236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (118) (236 236) (711 355) (118) (118) (118 118) (236 236) (711 474) (118) (118) (118) (236 236) (711 711) (355) (236 118) (118) (236 236 236 236) (711 711) (118) (236 118) (118) (236 236 236 236) (711 711 711) (118) (474) (118) (118) (118) (711 474) (236) (711 474) (118) (118) (118) (236 236) (711 474) (118) (118) (118) (236 236) (711 711 355) (118) (118) (118 118) (236 236) (711 474 474) (118) (118) (355) (236 236) (118 474 711) (118) (474) (118) (236 236) (118 474 711) (118) (474) (118) (236 236))) :lvel (quote ((77) (77) (71) (73) (69) (79) (77) (71) (77) (69) (80 80) (75) (74) (69) (74 71) (72 80) (79) (74) (79) (77 75) (79 79) (77) (77) (73 73) (79 78) (75 79) (69) (78) (71) (71 78) (74 81) (72) (78 74) (72) (72 71 69 69) (77 75) (69) (73 71) (71) (75 74 79 74) (81 74 75) (73) (73) (78) (79) (75) (72) (73) (84 79) (69) (75) (78) (73 75) (74 78) (72) (69) (75) (73 75) (74 80 75) (69) (74) (78 74) (79 73) (75 72 78) (77) (75) (78) (78 78) (82 77 79) (75) (75) (78) (77 79) (72 77 81) (78) (74) (71) (74 72) (80 82) (75) (75) (78) (77) (73) (72) (72) (73) (72) (77) (82 75) (78) (71) (77) (75 78) (86 80) (71) (74) (79) (79 79) (87 80 78) (79) (71) (79 72 72) (78 69) (85 75 72) (79) (78) (79) (77) (80 74) (71) (75 69) (79) (72 72 72 72) (79 78) (78) (71 77) (78) (74 77 77 74) (74 81 75) (78) (78) (71) (72) (75) (77) (74) (81 79) (71) (77) (79) (69 79) (78 79) (77) (71) (69) (72 69) (81 78 80) (78) (75) (73 77) (78 75) (74 78 75) (75) (72) (71) (72 71) (84 78 82) (72) (69) (74) (79 77) (79 73 75) (71) (69) (75) (69 74) (74 81) (73) (75) (73) (73) (73) (72) (74) (77) (73) (75) (78) (92 91 87 91) (91) (81 82) (86 88 93) (88) (85 84) (94 91 86 90) (91) (81 88) (92 92 91 85) (92) (92 90) (94 88 92 94) (82) (87 82) (92 91 92) (86) (88 82) (96 94 91 93) (91 85 84) (86 87 88) (81 87 91 91) (85) (66 71 67 63) (61) (59 66) (66 60 60) (62) (65 63) (62 62 62 66) (67) (61 67) (69 68 65) (61) (61) (60 61) (62 66 66 67) (66) (67 60) (60 66 65) (60) (67 67) (68 66 65 69) (57 63 59) (60 65 66) (63 66 63 65) (99 98 106 98 90 98) (100 102 93 88 92) (71 77 75) (79) (74) (71 71 67) (73 67) (68 74 70) (72) (78) (73 74 68) (74 69 67) (75) (105 98 108 96 97 96) (100 97 93 94 90) (71 70 70) (77) (79) (73 73) (67 67 70) (68 69 72) (77) (75 72) (75 72) (79 70) (77 66) (104 100 100 93 91 96) (103 100 90 91 90) (75 74 75) (72) (74) (74 67 70) (74 72) (76 69 71) (79) (77) (77 67 74) (75 70 74) (74) (81 84 82 70 75 70) (78 73 76 68 71) (80 84 78 72) (68) (74 79 72 69) (77 77 69 73) (71) (79 71 79 70 70 71) (77 75) (71) (77) (79) (75 73) (72 75) (75) (69) (75) (74 71) (79 76) (69) (79) (71 71) (75 69) (72 69) (71) (75) (72) (72 72) (80 74) (73) (73 74) (68) (77 71 67 71) (73 74) (74) (74 71) (69) (73 78 70 66) (74 76 75) (73) (73) (71) (78) (77) (81 73) (72) (80 77) (75) (74) (77) (77 67) (81 73) (74) (73) (71) (79 73) (82 75 78) (74) (69) (78 72) (77 66) (72 74 76) (73) (79) (69) (68 71) (75 71 72) (71) (71) (66) (73 73) (78 69 74) (71) (75) (68) (66 66))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (94 0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (31 0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2 1) (1 1) (2 1) (2) (2) (2) (1 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1 1) (2) (2) (2) (2) (2) (1) (1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1 1) (2) (2) (2 1) (2 1) (2 1 1) (2) (2) (2) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (1 1) (2 1 1) (2) (2) (2 1 1) (1 1) (2 1 1) (2) (2) (2) (1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1 1) (2) (2) (2) (2) (2) (2) (1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1 1) (2) (2) (2 1) (2 1) (2 1 1) (2) (2) (2) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2 1 1) (1) (2 1) (2 2 1) (1) (2 1) (2 2 1 1) (1) (2 1) (2 2 2 1) (2) (2 1) (2 2 1 1) (1) (2 1) (2 2 1) (1) (2 1) (2 2 1 1) (2 1 1) (2 1 1) (2 2 1 1) (2) (2 2 1 1) (1) (2 1) (2 2 1) (1) (2 1) (2 2 1 1) (1) (2 1) (2 2 1) (2) (2) (2 1) (2 2 1 1) (1) (2 1) (2 2 1) (1) (2 1) (2 2 1 1) (2 1 1) (2 1 1) (2 2 1 1) (2 2 2 1 1 1) (2 2 1 1 1) (1 1 1) (2) (2) (2 1 1) (1 1) (1 1 1) (2) (2) (2 1 1) (2 1 1) (2) (2 2 2 1 1 1) (2 2 1 1 1) (1 1 1) (2) (2) (1 1) (1 1 1) (1 1 1) (2) (2 1) (2 1) (2 1) (2 1) (2 2 2 1 1 1) (2 2 1 1 1) (1 1 1) (2) (2) (2 1 1) (1 1) (1 1 1) (2) (2) (2 1 1) (2 1 1) (2) (2 2 2 1 1 1) (2 2 1 1 1) (2 2 1 1) (1) (2 2 1 1) (2 2 1 1) (1) (2 2 2 1 1 1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2 1) (2 1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1) (2) (2 1) (1) (2 2 1 1) (2 1 1) (2) (2) (2) (2) (2) (2 1) (1) (2 1) (2) (2) (2) (2 1) (2 1) (2) (2) (2) (2 1) (2 1 1) (2) (2) (2 1) (2 1) (2 1 1) (2) (2) (2) (1 1) (2 1 1) (2) (2) (1) (1 1) (2 1 1) (2) (2) (1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 784 316) 0 1000 nil 149/25 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((20 0 8 0 nil 0) (8 0 9 0 nil 0) (28 0 10 0 nil 0) (12 0 14 0 nil 0) (15 0 14 1 nil 0) (27 0 15 0 nil 0) (16 0 15 1 nil 0) (29 0 15 2 nil 0) (18 0 15 3 nil 0) (7 0 15 4 nil 0) (30 0 17 0 nil 0) (11 0 17 1 nil 0) (21 0 20 0 nil 0) (19 0 20 1 nil 0) (24 0 21 0 nil 0) (28 0 23 0 nil 0) (25 0 24 0 nil 0) (10 0 24 1 nil 0) (23 0 24 2 nil 0) (17 0 25 0 nil 0) (22 0 25 3 nil 0) (13 0 25 4 nil 0) (17 0 28 0 nil 0) (26 0 28 1 nil 0) (14 0 30 0 nil 0))) nil 6.18))
