; OM File Header - Saved 2021/06/02 13:20:41
; (6.18 :patc (om-make-point 10 10) (om-make-point 236 25) (om-make-point 615 997) "" 183 0 "2021/05/04 18:31:17" "2021/06/02 12:32:32")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "extract-channel" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 124 10) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 100 33) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 395 110) (quote "extract-channels outputs a sequence of the notes matching the specified midi-channel, from a CHORD-SEQ or MULTI-SEQ.$$In this example, all the channels present in the original sequence are extracted separately, and placed into separate CHORD-SEQ.$") "" (om-make-point 15 57) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SEQUENCE PER CHANNEL" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 38 636) (om-make-point 395 496) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3900) (4600) (3800 3900) (4500) (3900) (3400) (3800) (4500 3800) (4000 4500) (3900) (3400) (3800 2700) (4500) (5000) (4500) (3800) (4000) (3300) (3800) (4500) (3900) (3400) (3800) (4500) (3900 3800) (4600) (3800 3900) (4000) (4100) (4500) (3900) (3400) (3800 2700) (4500) (4000 2600) (4600 4000) (3300) (3800) (3300) (3300 2600) (3100 2100) (2900) (2700) (3900) (3800) (4000) (4100) (4200) (4300) (4500 4300) (4600) (5000) (4300) (5000) (3600) (4200 3600) (4300) (5500) (4900) (4600) (3600) (3400 2400) (3300) (3100) (4100 4200) (4800) (4500) (4100) (4000) (3400 2800) (3300) (3900 3300) (3900) (3400) (3800) (4500) (3900 2600) (4600) (3800) (4500) (3900 3800) (3400) (3800) (4500) (4000) (3300) (3800))) :lonset (quote (451 1076 1719 2359 3014 3757 4405 4962 5286 5611 6262 6911 7543 7649 7865 7973 8297 8946 9505 10262 10797 11559 12103 12746 13389 14049 14697 15038 15343 15668 15989 16632 17286 17938 18581 18913 19324 19884 20532 21181 21508 21832 22157 22459 22568 22822 23116 23476 23776 24105 24413 24838 25076 25486 25724 26049 26373 26784 27019 27432 27668 27995 28316 28676 28965 29313 29611 30027 30259 30578 30908 31232 31551 32316 32854 33508 34149 34892 35454 36100 36738 37505 38043 38692 39340 39984 40640 41349)) :ldur (quote ((672) (562) (686 60) (649) (668) (570) (414) (146 141) (325 114) (635) (581) (543 29) (149) (151) (132) (305) (649) (649) (667) (570) (667) (571) (673) (562) (673 59) (562) (378 60) (354) (379) (324) (635) (581) (635 30) (581) (170 30) (324 109) (649) (635) (581) (181 29) (318 70) (346) (289) (87) (378) (349) (341) (264) (119) (324 141) (322) (324) (384) (325) (200) (324 70) (349) (362) (333) (325) (181) (319 70) (346) (289) (324 86) (327) (327) (319) (292) (324 87) (173) (325 94) (667) (570) (635) (581) (687 29) (648) (673) (562) (667 60) (571) (687) (648) (649) (649) (619))) :lvel (quote ((82) (85) (76 82) (61) (89) (82) (69) (68 69) (77 78) (78) (82) (72 60) (82) (74) (100) (89) (82) (82) (89) (82) (89) (82) (82) (85) (82 82) (85) (78 82) (80) (75) (76) (78) (82) (78 60) (82) (81 60) (73 71) (70) (78) (82) (70 60) (62 77) (68) (64) (79) (71) (68) (75) (68) (85) (64 73) (75) (67) (71) (70) (69) (62 81) (76) (59) (71) (77) (70) (62 77) (68) (64) (69 79) (68) (63) (81) (78) (78 55) (77) (63 70) (89) (82) (78) (82) (76 60) (61) (82) (85) (89 82) (82) (76) (61) (82) (82) (72))) :loffset (quote ((63) (86) (92 5) (100) (94) (19) (0) (92 0) (92 0) (92) (89) (89 3) (0) (0) (0) (0) (0) (0) (90) (0) (95) (0) (86) (92) (97 11) (86) (87 0) (70) (89) (89) (92) (98) (92 6) (89) (95 8) (87 0) (0) (89) (90) (89 3) (87 0) (87) (86) (22) (0) (70) (100) (65) (89) (84 0) (100) (0) (86) (0) (87) (86 0) (86) (0) (89) (0) (89) (86 0) (89) (54) (89 3) (65) (94) (5) (92) (98 0) (92) (92 9) (98) (0) (92) (87) (94 8) (0) (86) (89) (100 13) (0) (92) (92) (92) (97) (90))) :lchan (quote ((2) (2) (2 2) (2) (2) (2) (2) (2 2) (2 2) (2) (2) (2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2) (2) (2 2) (2) (2) (2) (2) (2) (2 2) (2) (2 2) (2 2) (2) (2) (2) (2 2) (2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2) (2) (2) (2) (2) (2) (2 2) (2) (2) (2) (2) (2) (2 2) (2) (2) (2 2) (2) (2) (2) (2) (2 2) (2) (2 2) (2) (2) (2) (2) (2 2) (2) (2) (2) (2 2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600 7000 6500) (6700) (4600) (7400) (7400 6900) (6900) (8400 4900 8300 7700 5500 8900) (4900 7700 5500 8400 8900) (6500 6900 6400) (4500) (6700 6600 7000 6500) (4600) (8600 8100) (8100 8600 7400 7700 7100 6900) (8600 8100 7400 7700 6900 7100) (8600 7700 8100 7100 6900 7400) (7400) (4000) (7000 8200) (8200 7500) (7500 8200 7000 7300 6700 6300) (8800 5300 8700 8100 5900 9300) (5300 8100 5900 8800 9300) (6100 6500 7000 3900) (7000 7700 8200 4900 5800) (6500 6900 7400 5000 4900) (7400 8100 8600 5300 6200) (5300) (6700 6600 7000 6500) (4600) (8800 5300 8700 8100 5900 9300) (5300 8100 5900 8800 9300) (7900 6100 3900 7200) (7300) (8800 5300 8700 8100 5900 9300) (5300 8100 5900 8800 9300) (7900 5000 4000 7500) (7600) (7300) (4500) (7000 8200) (7400) (8600) (7400) (8100) (7500) (7200 6700 8100 6300) (7500) (7500 6900) (6900) (7400) (7400 6700) (6700) (8200 5300 4300 7800) (7900) (3600) (8400 7600 7000) (5500 5800 4300) (6500) (8200 6400 4800 7500) (7600) (6500 7200 4100) (6200) (7200 7700 8400 5000 6000) (5000) (4600 7400 7600) (4600 7600 7400) (4500) (6100 5100 5500) (7900 6100 3900 7200) (7300) (6500 6900 6400) (4500) (8200) (7700) (7300 6700 8200 6500) (7700 8100) (8000 7600) (7700 8100) (8000 7600) (8100 7700) (7700 8100) (6100 5100 5500 3900) (6500 5300) (5700 5900 3800) (7100 8600 7400 8100 7700) (4000) (8200 7400 6700) (6700 4500) (6700 7300) (8600 8100 6100) (8100 8600 7400 7700 7100 6900))) :lonset (quote (451 557 681 2065 2359 3014 3124 3330 4405 4662 5727 5957 6911 7270 7649 7865 8297 8527 8638 8946 9270 9611 9849 10900 11559 12103 12865 13389 13511 13743 14800 15038 16100 16205 17395 17632 18697 18800 19324 19562 19665 20532 20643 20846 21508 21619 21941 22822 23116 23776 24105 24413 25076 25184 25286 25724 26049 26373 26484 27778 27881 28965 29068 29730 30259 30362 30578 30908 31011 31662 31773 32970 33203 34395 34568 34892 35776 35895 36100 36208 36424 36738 36846 38043 38151 38795 39340 39670 40349 40489 40640 41054 41140)) :ldur (quote ((95 176 59) (133) (1041) (111) (203 79) (67) (114 152 56 100 157 171) (71 70 76 60 103) (95 176 59) (1041) (133 95 176 59) (1041) (54 54) (62 68 73 62 73 73) (149 149 146 157 146 157) (52 46 63 54 54 51) (170) (73) (165 113) (54 54) (62 68 73 62 73 73) (113 151 57 100 156 170) (70 71 76 59 102) (79 70 102 73) (490 81 492 441 421) (78 70 103 73 43) (489 81 492 441 421) (43) (133 95 176 59) (1041) (113 151 57 100 156 170) (70 70 75 59 103) (1152 1262 1198 86) (1076) (114 151 57 100 157 170) (70 70 76 59 103) (613 613 616 87) (524) (170) (73) (165 113) (111) (198) (81) (83) (122) (51 70 78 70) (110) (203 79) (68) (111) (203 79) (67) (614 614 616 86) (525) (119) (59 45 73) (62 57 45) (46) (1151 1262 1197 87) (1076) (70 103 73) (78) (489 81 492 441 421) (43) (156 184 181) (49 43 38) (46) (46 63 57) (1151 1262 1197 87) (1076) (94 175 60) (1040) (83) (121) (51 70 78 71) (102 113) (102 97) (97 113) (189 216) (114 98) (92 100) (46 62 56 46) (81 81) (56 46 68) (46 44 33 59 43) (119) (60 46 73) (49 24) (100 146) (54 54 79) (62 67 72 62 73 73))) :lvel (quote ((68 63 45) (54) (53) (82) (68 49) (47) (46 52 36 35 32 45) (60 55 59 74 55) (68 63 45) (53) (54 68 63 45) (53) (32 52) (39 38 33 36 31 39) (23 40 19 19 30 23) (26 47 45 41 51 51) (67) (50) (63 67) (32 52) (39 38 33 36 31 39) (46 52 36 35 32 45) (60 55 59 74 55) (64 68 67 59) (67 63 75 54 49) (64 68 67 59 30) (67 63 75 54 49) (30) (54 68 63 45) (53) (46 52 36 35 32 45) (60 55 59 74 55) (51 37 36 69) (44) (46 52 36 35 32 45) (60 55 59 74 55) (51 48 58 69) (44) (67) (50) (63 67) (89) (84) (76) (76) (26) (67 58 63 56) (82) (68 49) (47) (82) (68 49) (47) (51 48 58 69) (44) (56) (64 72 75) (48 51 38) (51) (51 37 36 69) (44) (68 67 59) (64) (67 63 75 54 49) (30) (74 90 87) (42 43 43) (38) (51 48 51) (51 37 36 69) (44) (68 63 45) (53) (76) (26) (67 58 63 56) (76 64) (50 44) (83 64) (71 50) (66 85) (80 61) (51 48 51 38) (49 40) (50 46 45) (54 75 73 73 72) (56) (64 72 75) (55 43) (43 52) (32 52 55) (39 38 33 36 31 39))) :loffset (quote ((92 92 87) (40) (89) (0) (100 0) (27) (84 8 6 3 3 0) (48 43 43 40 32) (30 30 25) (0) (59 5 5 0) (2) (94 92) (79 73 68 65 65 54) (29 29 24 21 19 13) (51 40 40 38 38 38) (30) (8) (0 0) (5 3) (25 19 14 11 11 0) (84 8 5 3 3 0) (16 10 10 8 0) (5 3 3 0) (19 14 14 14 9) (100 97 97 94 43) (11 5 5 5 0) (54) (59 5 5 0) (0) (84 8 5 3 3 0) (16 11 11 8 0) (16 16 13 3) (0) (83 8 5 2 2 0) (17 11 11 9 0) (14 14 11 0) (0) (30) (0) (0 0) (3) (0) (0) (14) (0) (8 8 8 0) (0) (100 0) (21) (14) (100 0) (19) (13 13 11 0) (0) (89) (19 19 10) (100 97 95) (0) (14 14 11 0) (0) (100 100 97) (0) (11 5 5 5 0) (49) (6 0 0) (38 38 30) (100) (13 2 0) (22 22 19 8) (0) (6 6 0) (0) (100) (24) (30 30 30 21) (0 0) (0 0) (0 0) (11 0) (0 0) (0 0) (16 5 3 0) (95 95) (6 3 0) (13 10 10 0 0) (95) (19 19 11) (83 0) (73 0) (95 92 11) (24 19 14 11 11 0))) :lchan (quote ((3 3 3) (3) (3) (3) (3 3) (3) (3 3 3 3 3 3) (3 3 3 3 3) (3 3 3) (3) (3 3 3 3) (3) (3 3) (3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3 3) (3) (3) (3 3) (3 3) (3 3 3 3 3 3) (3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3) (3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3) (3) (3 3 3 3) (3) (3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3) (3) (3 3 3 3 3 3) (3 3 3 3 3) (3 3 3 3) (3) (3) (3) (3 3) (3) (3) (3) (3) (3) (3 3 3 3) (3) (3 3) (3) (3) (3 3) (3) (3 3 3 3) (3) (3) (3 3 3) (3 3 3) (3) (3 3 3 3) (3) (3 3 3) (3) (3 3 3 3 3) (3) (3 3 3) (3 3 3) (3) (3 3 3) (3 3 3 3) (3) (3 3 3) (3) (3) (3) (3 3 3 3) (3 3) (3 3) (3 3) (3 3) (3 3) (3 3) (3 3 3 3) (3 3) (3 3 3) (3 3 3 3 3) (3) (3 3 3) (3 3) (3 3) (3 3 3) (3 3 3 3 3 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0) (0) (0) (0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700) (5800) (6500 6100) (7200) (7000) (6500) (6800) (6900) (5700) (5800) (6100) (6500) (7200) (7000) (6500) (6900 6800) (5700) (5800) (6500 6100) (7200) (7000) (6500) (6800) (6900) (6900) (7000) (7000 6900) (6700 6900) (6300) (6100) (6200) (5700) (5800) (6500 6100) (7200) (7000) (6500) (6800) (6900) (5800 5700) (6500 6100) (7200) (7000) (6500) (6800) (6900) (5700) (5800) (6100) (6500) (7200) (7000) (6500) (6800) (6900) (6900) (7000) (6900) (6700 6900 7000) (6300) (6100) (6200) (7200) (6900) (6700) (6600) (7500) (7400) (7200) (6900) (7000) (6700) (6900) (6600) (6700) (6900 6700) (7000) (6700) (6500) (6400) (7300) (7200) (7000) (6800) (6900) (6500) (6700) (6500) (6900) (5700) (5800) (6500 6100) (7200) (7000) (6500) (6800) (6900) (5700) (5800) (6500 6100) (7200) (7000) (6500) (6900 6800) (5700) (5800) (6100) (6500) (7200) (7000) (6500) (6800) (6900) (6900) (7000) (7000 6900) (6700) (6300) (6100) (6200))) :lonset (quote (451 557 681 838 1486 1719 1838 2065 3014 3124 3330 3432 3651 3878 4081 4303 5611 5727 5957 6262 6676 6911 7032 7270 8297 8527 8638 8776 8946 9270 9505 10797 10900 11038 11216 11865 12103 12222 12465 13389 13635 13870 14359 14570 14697 14800 15989 16100 16319 16427 16632 17054 17286 17395 17632 18581 18913 19062 19170 19324 19562 19884 21300 21941 22459 22568 22822 23116 23476 23776 23919 24105 24554 24838 25076 26049 26373 27019 27432 27668 27995 28316 28676 28965 29068 29313 29730 30027 30259 31551 31662 31773 31968 32622 32854 32970 33203 34149 34265 34395 34568 35124 35346 35562 36738 36846 37078 37186 37395 37811 38043 38151 38376 39449 39670 39773 39984 40113 40349 40640 41968)) :ldur (quote ((135) (232) (94 111) (665) (181) (157) (173) (781) (157) (221) (133) (178) (251) (133) (195) (1024 19) (170) (243) (168 113) (491) (211) (122) (173) (825) (121) (87) (83 89) (124 92) (143) (219) (1148) (143) (203) (138 127) (684) (192) (156) (197) (794) (200 146) (100 130) (552) (157) (192) (49) (1094) (154) (297) (135) (165) (498) (229) (135) (184) (789) (149) (159) (103) (102 81 76) (149) (209) (1224) (424) (267) (190) (133) (119) (181) (129) (98) (165) (338) (157) (138) (765) (140 83) (695) (187) (170) (246) (119) (365) (141) (65) (168) (346) (238) (122) (900) (133) (197) (125 95) (754) (192) (97) (184) (803) (146) (200) (100 129) (573) (160) (186) (1114 30) (149) (229) (92) (106) (378) (159) (135) (138) (733) (159) (89) (59 232) (94) (146) (213) (1322))) :lvel (quote ((90) (103) (102 110) (113) (119) (93) (118) (106) (93) (110) (112) (82) (110) (95) (113) (112 116) (96) (103) (105 103) (105) (114) (77) (115) (111) (112) (105) (106 85) (86 77) (123) (127) (115) (86) (112) (80 99) (110) (110) (85) (118) (110) (106 82) (94 114) (113) (119) (97) (113) (110) (84) (112) (116) (90) (102) (111) (89) (118) (115) (110) (107) (96) (85 60 98) (120) (117) (108) (119) (117) (106) (106) (118) (117) (115) (100) (121) (108) (115) (120) (117) (109 82) (127) (104) (119) (115) (121) (115) (119) (98) (104) (116) (104) (95) (118) (96) (117) (95 104) (110) (111) (92) (124) (110) (93) (116) (99 103) (108) (120) (90) (106 116) (104) (115) (102) (99) (110) (123) (78) (116) (120) (117) (115) (91 91) (79) (127) (127) (114))) :loffset (quote ((0) (0) (87 0) (43) (14) (0) (0) (3) (2) (6) (13) (36) (25) (0) (5) (19 0) (24) (35) (94 0) (6) (10) (8) (0) (0) (17) (0) (76 0) (65 0) (35) (0) (17) (3) (16) (86 0) (41) (11) (0) (0) (0) (97 0) (100 0) (0) (0) (0) (89) (19) (0) (0) (0) (0) (0) (3) (22) (10) (17) (97) (6) (3) (98 41 0) (65) (97) (0) (0) (5) (0) (45) (21) (30) (0) (10) (0) (30) (0) (21) (35) (97 0) (8) (97) (6) (94) (24) (14) (75) (21) (29) (0) (8) (8) (17) (0) (0) (78 8) (0) (10) (14) (16) (24) (0) (0) (94 0) (35) (0) (0) (19 0) (16) (22) (0) (0) (13) (19) (22) (19) (37) (0) (0) (100 0) (0) (0) (62) (6))) :lchan (quote ((4) (4) (4 4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4 4) (4) (4) (4 4) (4) (4) (4) (4) (4) (4) (4) (4 4) (4 4) (4) (4) (4) (4) (4) (4 4) (4) (4) (4) (4) (4) (4 4) (4 4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4 4 4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4 4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4 4) (4) (4) (4) (4) (4) (4) (4) (4 4) (4) (4) (4) (4 4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4 4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100) (6200) (6400) (6500) (6300) (6500) (6700) (6800) (6900) (7000) (7300) (7400) (7200) (6900) (7000) (7200) (7300) (7400) (7600) (7400) (7300) (7300) (7400) (7600) (7700) (7900) (7400) (7000) (6900) (6500) (6900 6600) (7200) (7700) (7700 7500) (7500) (7200) (7300) (7500) (7700) (7400) (7200) (6700) (7300) (7900) (7600) (7700) (7500) (7700) (7200) (7300) (7000) (6900) (6700) (6500) (6100))) :lonset (quote (2489 2684 2835 3014 3124 3330 3432 3651 7649 7865 7973 8181 8297 8527 8638 8776 12865 13105 13227 13389 13743 18057 18251 18403 18581 18697 18913 19062 19170 22822 22938 23116 23259 23476 28462 28676 28786 28965 29068 29313 29611 33830 33970 34149 34265 34395 34568 34773 38376 38549 38692 38795 39046 39189 39340 39481)) :ldur (quote ((162) (127) (179) (162) (162) (148) (138) (92) (192) (121) (141) (170) (162) (89) (205) (100) (217) (100) (173) (127) (122) (162) (127) (178) (162) (160) (163) (187) (138) (81) (111 100) (71) (219) (318 57) (219) (116) (163) (106) (238) (262) (76) (113) (179) (135) (106) (162) (138) (146) (129) (129) (135) (151) (116) (192) (111))) :lvel (quote ((92) (89) (82) (96) (75) (96) (76) (108) (62) (91) (87) (94) (107) (34) (65) (99) (97) (85) (99) (92) (94) (92) (89) (82) (96) (86) (80) (83) (74) (84) (80 66) (102) (104) (97 67) (116) (41) (78) (49) (80) (95) (31) (45) (65) (89) (76) (84) (76) (101) (113) (96) (108) (88) (83) (79) (67))) :loffset (quote ((0) (0) (0) (0) (44) (0) (38) (0) (32) (11) (54) (0) (68) (22) (16) (78) (21) (0) (0) (27) (3) (0) (0) (0) (0) (62) (0) (0) (76) (5) (94 0) (16) (0) (92 5) (0) (0) (0) (32) (35) (98) (48) (0) (0) (5) (67) (5) (48) (0) (0) (0) (27) (78) (0) (0) (30))) :lchan (quote ((5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5 5) (5) (5) (5 5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500 4900) (4900 5500) (5500 4900) (5500 4900) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 4900) (4900 5500) (5500 4900) (5500 4900) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 4900) (4900 5500) (5500 4900) (5500 4900) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 5000) (5000 5500) (5500 4900) (4900 5500) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 4900) (4900 5500) (5500 4900) (5500 4900) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 4900) (4900 5500) (5500 4900) (5500 4900) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 4900) (4900 5500) (5500 4900) (5500 4900) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 5000) (5000 5500) (5500 4900) (4900 5500) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 4800) (4800 5500) (5500 4800) (5500 4800) (6000 5400) (5400 6000) (6000 5400) (6000 5400) (5800 5300) (5300 5800) (5800 5300) (5800 5300) (5800 5300) (5300 5800) (5800 5200) (5200 5800) (5800 5300) (5300 5800) (5800 5300) (5800 5300) (5800 5200) (5200 5800) (5800 5200) (5800 5200) (5700 5000) (5000 5700) (5700 5000) (5700 5000) (5500 5000) (5000 5500) (5500 4900) (4900 5500) (5500 4900) (4900 5500) (5500 4900) (5500 4900) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 4900) (4900 5500) (5500 4900) (5500 4900) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 4900) (4900 5500) (5500 4900) (5500 4900) (5900 5300) (5300 5900) (5900 5300) (5900 5300) (5500 5000) (5000 5500) (5500 4900) (4900 5500) (5900 5300) (5300 5900))) :lonset (quote (451 838 1076 1486 1719 2065 2359 2684 3014 3432 3757 4081 4405 4662 4962 5286 5611 5957 6262 6676 6911 7270 7649 7973 8297 8527 8946 9270 9505 9849 10149 10473 10797 11216 11454 11865 12103 12465 12746 13105 13389 13743 14049 14359 14697 15038 15343 15668 15989 16319 16632 17054 17286 17632 17938 18251 18581 18913 19324 19562 19884 20297 20532 20846 21181 21508 21832 22157 22568 22822 23116 23476 23776 24105 24413 24838 25076 25486 25724 26049 26373 26784 27019 27432 27668 27995 28316 28676 28965 29313 29611 30027 30259 30578 30908 31232 31551 31968 32205 32622 32854 33203 33508 33830 34149 34568 34892 35124 35454 35776 36100 36424 36738 37078 37395 37811 38043 38376 38692 39046 39340 39670 39984 40349 40640 41054 41130)) :ldur (quote ((97 164) (54 76) (324 324) (71 63) (97 165) (54 76) (325 325) (70 62) (97 165) (54 76) (324 324) (70 62) (98 165) (54 75) (324 324) (71 63) (97 165) (54 76) (325 325) (70 62) (97 165) (54 76) (324 324) (70 62) (98 165) (54 75) (97 165) (54 76) (97 164) (54 76) (325 325) (70 62) (97 165) (54 76) (324 324) (70 62) (97 165) (54 75) (324 324) (70 62) (98 165) (54 75) (324 324) (71 63) (97 165) (54 76) (325 325) (70 62) (97 165) (54 76) (324 324) (70 62) (98 165) (54 75) (324 324) (71 62) (97 165) (54 76) (98 165) (54 75) (97 165) (54 76) (324 324) (70 62) (98 165) (54 75) (324 324) (70 62) (97 164) (54 76) (325 325) (70 62) (97 165) (54 76) (325 325) (70 62) (97 165) (55 76) (97 165) (54 76) (98 165) (54 75) (324 324) (71 63) (97 165) (54 76) (325 325) (70 62) (97 165) (54 76) (324 324) (70 62) (98 165) (54 75) (97 165) (54 76) (97 164) (54 76) (325 325) (70 62) (97 165) (54 76) (324 324) (70 62) (98 165) (54 75) (324 324) (70 62) (98 165) (54 75) (324 324) (71 63) (97 165) (54 76) (325 325) (70 62) (97 165) (54 76) (324 324) (70 62) (98 165) (54 75) (97 165) (54 76) (97 165) (54 76))) :lvel (quote ((64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (64 55) (41 49) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (64 55) (41 49) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (64 55) (41 49) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (64 55) (41 49) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (56 56) (60 51) (64 55) (41 49) (64 55) (41 49) (64 55) (41 49))) :loffset (quote ((63 63) (0 0) (86 86) (0 0) (92 92) (70 70) (100 100) (100 100) (94 94) (0 0) (0 0) (0 0) (0 0) (68 68) (92 92) (92 92) (92 92) (70 70) (89 89) (0 0) (89 89) (54 54) (0 0) (0 0) (0 0) (95 95) (0 0) (0 0) (90 90) (70 70) (94 94) (95 95) (95 95) (0 0) (87 87) (0 0) (86 86) (49 49) (92 92) (57 57) (97 97) (68 68) (86 86) (100 100) (87 87) (70 70) (89 89) (89 89) (92 92) (86 86) (98 98) (0 0) (92 92) (71 71) (89 89) (100 100) (95 95) (87 87) (0 0) (87 87) (89 89) (0 0) (90 90) (100 100) (89 89) (87 87) (87 87) (86 86) (0 0) (70 70) (100 100) (65 65) (89 89) (84 84) (100 100) (0 0) (86 86) (0 0) (87 87) (86 86) (86 86) (0 0) (89 89) (0 0) (89 89) (86 86) (89 89) (54 54) (89 89) (65 65) (92 92) (0 0) (92 92) (98 98) (92 92) (92 92) (98 98) (5 5) (92 92) (0 0) (92 92) (67 67) (87 87) (89 89) (94 94) (0 0) (0 0) (92 92) (86 86) (89 89) (89 89) (89 89) (100 100) (84 84) (91 91) (0 0) (92 92) (83 83) (92 92) (62 62) (92 92) (87 87) (97 97) (56 56) (90 90) (0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4200 3500) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200) (4200 3500) (3700 4200) (4200) (4200) (3700 4200) (4200 3500 4200) (4200 3500) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200) (4200 3500) (3700 4200) (4200) (4200 3500) (3700 4200) (4200) (4200 3500) (3700 4200) (4200 3500 4200) (4200) (4200 3500 4200 3800) (4200 3800) (4200 3500 4200 3800) (3700 4200) (4200 3500 4200) (3700 4200) (4600 3500 4200) (3700 4200) (4200 3500 4200) (4200 3500) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 4200) (3700 4200) (4200 3500 4200) (4200 3700) (4600 3500 4200) (3700 4200) (4200 3500 4200) (4200 3500) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200) (4200 3500) (3700 4200) (4200 4200) (3700 4200) (4200 4200) (3700 4200 3800 3800) (5100 4200) (5100 3700 4200 3800) (5100 5100 3800) (5100 3700 4200 3800) (5100) (5100) (5100 3700 4200) (5100 5100) (5100 4200) (5100 5100) (5100 3700 4200) (5100 5100 3800) (5100 3700 4200) (5100 5100) (5100 3700 4200) (5100 5100 3800) (5100 3700 4200) (5100 5100) (5100 3700 4200) (5100 5100 3800) (5100 3700 4200) (5100 5100 3800) (5100 3700 4200) (5100 5100 3800) (5100 4200) (5100 5100) (5100 3700 4200) (5100 5100 3800) (5100 3700 4200) (3500 5100 3800) (5100 4200 3800) (5100 3800 5100 3800) (5100 4200 3800 3500) (3800) (4900 4200 3800 3500 5100 3800) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200) (4200 3500) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (4200 3700) (4200 3500 4200) (3700 4200) (4200 3500 4200) (4200 3500) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200) (4200 3500 4200) (3700 4200))) :lonset (quote (451 838 1076 1486 1719 2065 2359 2684 3014 3432 3651 3757 4081 4303 4405 4662 4962 5286 5611 5957 6262 6676 6911 7270 7543 7649 7973 8181 8297 8527 8776 8946 9270 9505 9849 10149 10473 10797 11216 11454 11865 12103 12465 12746 13105 13389 13743 14049 14359 14697 15038 15343 15668 15989 16319 16632 17054 17286 17632 17938 18251 18581 18913 19170 19324 19562 19884 20297 20532 20846 21181 21508 21832 22157 22459 22568 22822 23116 23476 23776 24105 24413 24838 25076 25486 25724 26049 26373 26784 27019 27432 27668 27995 28316 28676 28965 29313 29611 30027 30259 30578 30908 31232 31432 31551 31968 32205 32622 32854 33203 33508 33830 34149 34568 34773 34892 35124 35454 35776 36100 36424 36738 37078 37395 37811 38043 38376 38692 39046 39340 39670 39984 40349 40640 41054 41122)) :ldur (quote ((67 67) (67 67) (68 68 67) (68 68) (67 67 68) (68 68) (68 68 68) (67 67) (68 68 67) (68 68) (68) (67 67) (68 68) (67) (68) (67 67) (68 68 68) (68 68) (67 67 67) (68 68) (68 68 68) (67 67) (68 68 67) (68 68) (68) (67 67) (68 68) (67) (68 68) (67 67) (67) (68 68) (68 68) (67 67 68) (67) (68 68 67 67) (67 68) (67 67 68 68) (68 68) (67 67 68) (67 67) (68 68 67) (67 67) (67 67 68) (68 68) (68 68 67) (67 67) (68 68 67) (68 68) (67 68) (68 68) (68 68 68) (67 67) (68 68 67) (68 68) (67 67 67) (68 68) (68 68 68) (67 67) (68 68 67) (68 68) (67 67 68) (68 68) (67) (68 68) (67 67) (68 68) (68 68) (67 68) (67 67 67 67) (68 68) (67 67 67 68) (67 68 68) (68 68 68 67) (68) (67) (67 67 67) (68 68) (67 67) (67 67) (68 68 68) (68 68 68) (67 67 67) (68 67) (68 68 68) (67 68 68) (68 68 68) (68 68) (67 67 67) (68 67 67) (68 68 68) (67 67 67) (68 68 68) (68 68 68) (67 67) (68 67) (68 68 68) (67 67 67) (68 68 68) (68 68 68) (67 67 67) (68 68 68 68) (68 68 68 68) (68) (67 67 67 67 67 67) (68 68) (68 68 68) (67 67) (67 67 68) (68 68) (67 67 68) (67 67) (68 68 67) (67 67) (68) (67 67) (68 68) (68 68 68) (67 67) (68 68 68) (68 68) (67 67 67) (68 68) (68 68 67) (67 67) (68 68 68) (68 68) (67 67 67) (68 68) (68 68 68) (67 67) (68 68 67) (68 68) (67 67 68) (68 68))) :lvel (quote ((70 60) (70 90) (80 60 40) (80 90) (80 60 50) (70 90) (80 60 40) (85 90) (70 60 50) (70 80) (40) (80 60) (80 80) (50) (70) (80 70) (80 60 40) (80 60) (80 60 50) (70 90) (80 60 40) (85 90) (70 60 50) (70 90) (40) (80 60) (80 90) (50) (80 60) (70 90) (40) (80 60) (85 90) (80 60 50) (90) (70 60 60 40) (80 50) (70 60 60 60) (70 80) (80 60 40) (80 80) (54 60 50) (80 70) (80 60 40) (80 60) (70 60 50) (70 80) (80 60 40) (80 80) (80 50) (70 90) (80 60 40) (90 90) (54 60 50) (80 70) (80 60 40) (80 60) (80 60 50) (70 90) (80 60 40) (85 90) (70 60 50) (70 80) (40) (80 60) (80 80) (80 50) (70 90) (80 50) (85 90 55 30) (70 50) (90 60 90 60) (80 70 40) (90 70 100 50) (70) (80) (90 70 70) (90 70) (90 100) (70 70) (90 60 90) (80 70 40) (90 70 100) (80 70) (90 70 80) (80 70 40) (90 70 100) (70 70) (90 70 100) (80 50 40) (90 70 100) (80 50 40) (90 70 70) (90 70 40) (90 100) (80 70) (90 70 80) (80 60 40) (100 80 100) (90 70 60) (90 80 70) (80 80 80 60) (90 100 50 80) (40) (40 70 50 60 80 60) (80 80) (80 60 50) (80 90) (70 60 50) (70 80) (80 60 40) (80 80) (70 60 50) (70 90) (40) (80 60) (80 90) (80 60 50) (70 90) (80 60 40) (90 90) (70 60 50) (80 70) (80 60 40) (80 60) (70 60 50) (80 90) (70 60 40) (78 90) (80 60 50) (70 90) (80 60 40) (85 90) (80 60 50) (70 90))) :loffset (quote ((63 63) (0 0) (86 86 0) (0 0) (92 92 5) (70 70) (100 100 11) (100 100) (94 94 5) (0 0) (19) (0 0) (0 0) (16) (0) (68 68) (92 92 0) (92 92) (92 92 0) (70 70) (89 89 0) (0 0) (89 89 0) (54 54) (19) (0 0) (0 0) (30) (0 0) (95 95) (81) (0 0) (0 0) (90 90 0) (70) (94 94 0 0) (95 0) (95 95 0 0) (0 0) (87 87 0) (0 0) (86 86 0) (49 49) (92 92 0) (57 57) (97 97 6) (68 68) (86 86 0) (100 100) (87 0) (70 70) (89 89 0) (89 0) (92 92 3) (86 86) (98 98 6) (0 0) (92 92 0) (71 71) (89 89 0) (100 100) (95 95 5) (87 87) (68) (0 0) (87 87) (89 2) (0 0) (90 0) (100 100 100 11) (89 0) (87 87 87 0) (87 0 0) (86 86 86 0) (22) (0) (70 70 70) (100 11) (65 65) (89 0) (84 84 84) (100 14 14) (0 0 0) (86 0) (0 0 0) (87 0 0) (86 86 86) (86 0) (0 0 0) (89 0 0) (0 0 0) (89 0 0) (86 86 86) (89 0 0) (54 54) (89 0) (65 65 65) (92 0 0) (0 0 0) (92 0 0) (98 98 6) (92 92 0 0) (92 92 0 0) (0) (98 98 98 98 6 6) (5 5) (92 92 0) (0 0) (92 92 0) (67 67) (87 87 0) (89 89) (94 94 8) (0 0) (32) (0 0) (92 92) (86 86 0) (89 89) (89 89 0) (89 0) (100 100 11) (84 84) (91 91 0) (0 0) (92 92 0) (83 83) (92 92 0) (62 62) (92 92 0) (87 87) (97 97 8) (56 56) (90 90 0) (0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0)) ((0 0 0) (0) (0) (0) (0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0) (0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0 0 0)) ((0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0)) ((0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 882) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 280 589) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 439 524) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 428 464) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 436 403) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXTRACT-CHANNEL" (quote extract-channel) (quote ((om-load-inputfun (quote input-funbox) "chord-seq or multi-seq" "SELF" (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 7200) (6400 7000) (6700))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000 1000) (1000 1000) (1000))) :lvel (quote ((100 100) (100 100) (100))) :loffset (quote ((0 0) (0 0) (0))) :lchan (quote ((1 1) (2 1) (3))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (om-load-inputfun (quote input-funbox) "integer" "MIDI-CHAN" 1))) (om-make-point 82 505) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORIGINAL SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 59 219) (om-make-point 508 185) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600 7000 6500 4200 3500 5500 4900 3900 5700) (6700 5800) (4600 6500 6100) (7200 3700 4200 4900 5500) (4200 3500 5500 4900 4600 4200) (7000 3700 4200 5500 4900) (4200 3500 5900 5300 3800 4200 3900 6500) (6800) (3700 4200 5300 5900 6900 7400) (4200 3500 5900 5300 7400 4500 4200 6900) (6100) (3700 4200 5900 5300 6200) (6400) (4200 3500 5500 4900 3900 6900 4200 5700 6500) (8400 6300 4900 5800 8300 7700 5500 8900) (4900 7700 5500 8400 8900 6100 6500) (6700 6500 3700 4200 4900 5500) (7200 4200 6800) (3400 4200 3500 5500 4900) (7000) (6500 3700 4200 5500 4900) (6900 4200 6800) (6500 6900 6400 4200 5900 5300 3800) (3700 4200 5300 5900 4500) (4200 3500 5900 5300 4500 4200 3800) (4200 3500 5900 5300 4000 4500) (4200 3500 5500 4900 3900 5700 4200) (6700 5800 6600 7000 6500) (6500 3700 4200 4900 5500 4600 6100) (4200 3500 5500 4900 3400 7200 4200) (7000 3700 4200 5500 4900) (8600 8100 4200 3500 5900 5300 3800 6500 2700 4200) (6800) (8100 8600 7400 7700 7100 3700 4200 5300 5900 6900 6900) (4200 4500) (6900 8600 8100 7400 7700 6900 7100 4200 3500 5900 5300 5000) (8600 7700 8100 7100 6900 7400 7000 4500) (7300 3700 4200 5900 5300 3800) (4200 7400) (7200 7400 6900 4200 3500 5500 5000 4000) (3700 4200 5000 5500 6900 4000 7000) (7000 7000 6900 7000 8200) (4200 7200 6700 6900) (6300 8200 7500 4200 3500 5500 4900 3300) (7500 8200 7000 7300 6700 3700 4200 4900 5500 6100 6300) (4200 3500 5900 5300 3800 6200 4200) (8800 5300 8700 8100 5900 9300) (4200 5300 5900 5300 8100 5900 8800 9300) (4200 3500 5900 5300 4200 3800) (4500) (4200 5900 5300 3800) (4200 3500 5500 4900 3900 5700 4200 3800) (5800 6100 6500 7000 3900) (6500 6100) (7200 3700 4200 4900 5500) (4200 3500 5500 4900 4200) (7000 7700 8200 4900 5800 3400) (7000 3700 4200 5500 4900) (6500 6900 7400 5000 4600 3500 5900 5300 3800 4900 4200 6500) (6800) (3700 4200 5300 5900 6900) (4200 3500 5900 5300 4500 4200) (7300 7400 8100 8600 5300 6200) (4200 3500 5900 5300 7400) (7600) (4200 3500 5500 4900 5800 3900 5300 7400 3800 4200 5700) (6700 6600 7000 6500) (6500 6100) (3700 4200 4900 5500 7300 4600) (7200) (4200 3500 5500 4900 4600 4200) (3700 4200 5500 4900 7000) (6500) (6800 4200 5900 5300 3800 4200 3900) (8800 6900 5300 8700 8100 5900 9300) (3700 4200 5300 5900 4000 5300 8100 5900 8800 9300) (4200 3500 5900 5300 4100 4200) (4200 5900 5300 4500 3700) (4600 3500 5500 4900 3900 4200 5700) (7900 6100 3900 7200 5800) (7300) (3700 4200 4900 5500 6100) (6500) (4200 3500 5500 4900 3400 4200 7200) (7000 4200 3500 5500 4900) (4200 3500 5900 5300 3800 6500 2700 4200) (8800 6800 5300 8700 8100 5900 9300) (3700 4200 5300 5900 6900 5300 8100 5900 8800 9300) (4200 3500 5900 5300 4500 4200) (7300) (3700 4200 5900 5300 7400) (7600) (6900 4200 3500 5500 5000 4000 2600 4200 7700) (7900 7900 5000 4000 7500) (7600) (3700 4200 5000 5500 4600 7000 7400 4000) (6900 7000) (6700 6900 4200 6900 7000) (6300 7300 4200 3500 5500 4900 3300) (6100 3700 4200 4900 5500 4500) (7000 8200) (4200 5900 5300 3800 4200 6200) (3700 4200 5300 5900) (4200 5900 5300 3300 7400 4200) (8600) (3700 4200 3800 5900 5300 3800 7400) (5100 5500 4800 3300 2600 4200) (7200) (5100 3700 4200 4800 5500 3100 8100 3800 2100) (7500) (5100 5500 4800 2900 5100 3800) (7200 6700 8100 6900 6300) (5100 3700 4200 5500 4800 2700 3800) (5100 3900 6700) (6600 5100 6000 5400 3800) (5100 3700 4200 5400 6000 4000 7500 6500 7500) (6900 6600) (5100 6000 5400 7500 4100 7400 7200 5100 6900) (7700) (7700 5100 4200 6000 5400 4200 7500 7200) (5100 5800 5300 4300 6900 6900 5100) (7000) (5100 3700 4200 5300 5800 4500 6700 7400 4300) (5100 5800 5300 7400 4600 5100 3800 6700) (6900) (6600 5100 3700 4200 5800 5300 5000) (5100 5800 5300 4300 6700 6700 5100) (8200 5300 4300 7800) (7900) (5100 3700 4200 5300 5800 5000) (3600 5100 5800 5200 3600 5100 3800) (6900 5100 3700 4200 5200 5800 4200 8400 7600 7000 6700 3600) (5500 5800 4300 5100 5800 5300 4300 7000 5100) (6500) (5100 3700 4200 5300 5800 5500) (6700 5100 5800 5300 4900 5100 3800) (6500 5100 3700 4200 5800 5300 4600) (6400 5100 5800 5200 3600 5100 3800) (8200 6400 4800 7500) (7600) (5100 3700 4200 5200 5800 3400 7300 2400) (5100 5800 5200 3300 7200 5100 3800) (7500) (7000 5100 4200 5800 5200 3100 7200) (7300) (6500 7200 4100 5100 5700 5000 4100 7500 6800 4200 5100) (7700 6900 6200) (7400 5100 3700 4200 5000 5700 4800 6500) (4500 5100 5700 5000 7200 5100 3800) (7200 6700 7700 8400 5000 6000) (6500 4100 5100 3700 4200 5700 5000) (3500 5500 5000 4000 5000 6900 5100 3800) (4600 7400 7600) (5100 4200 5000 5500 3400 4600 7600 7400 3800 2800) (4500 5100 3800 5500 4900 3300 5100 3800) (6100 5100 5500) (5100 4200 4900 5500 3900 3300 3800 3500) (3800) (4900 4200 3800 3500 5500 4900 3900 5100 3800 5700) (7900 6100 3900 7200 5800) (6500 6100 7300) (3700 4200 4900 5500 7200) (4200 3500 5500 4900 4200) (3400) (7000 3700 4200 5500 4900) (4200 3500 5900 5300 3800 6500 4200) (6800 6500 6900 6400) (3700 4200 5300 5900 6900 4500) (4200 3500 5900 5300 4500 4200) (3700 4200 5900 5300 6700) (7300) (4200 3500 5500 4900 3900 4200 2600 7900 5700) (7600 5800) (8200 6500 7700 6100) (7500 7200 7700 3700 4200 4900 5500) (4200 7700) (7300 6700 8200 6500 4200 3500 5500 4900 4600) (3700 4200 5500 4900 7000) (6500) (4200 3500 5900 5300 3800 4200) (6900 6800) (3700 4200 5300 5900 7700 8100) (8000 7600) (4200 3500 5900 5300 4500 4200 7700 8100) (8000 7600) (4200 5900 5300 3700 8100 7700) (4200 3500 5500 4900 3900 5700 3800 4200 7700 8100) (5800 6100 5100 5500 3900) (3700 4200 4900 5500 6100) (6500) (4200 3500 5500 4900 7200 4200) (3400) (7000 4200 3500 5500 4900) (6500 5300 4200 3500 5900 5300 3800 6500 4200) (6800 5700 5900 3800) (3700 4200 5300 5900 6900 7200) (7300) (4200 3500 5900 5300 4500 7000 4200) (6900 7100 8600 7400 8100 7700) (3700 4200 5900 5300 6700) (6500) (4000 4200 3500 5500 5000 4000 6100 4200) (6900) (3700 4200 5000 5500 8200 7400 6700 7000) (7000 6900) (4200 3500 5500 4900 3300 4200 6700) (6300) (6700 6100 3700 4200 4900 5500 4500) (6700 7300) (8600 8100 4200 3500 5900 5300 3800 6100 6200 4200) (8100 8600 7400 7700 7100 3700 4200 5300 5900 6900))) :lonset (quote (451 557 681 838 1076 1486 1719 1838 2065 2359 2489 2684 2835 3014 3124 3330 3432 3651 3757 3878 4081 4303 4405 4662 4962 5286 5611 5727 5957 6262 6676 6911 7032 7270 7543 7649 7865 7973 8181 8297 8527 8638 8776 8946 9270 9505 9611 9849 10149 10262 10473 10797 10900 11038 11216 11454 11559 11865 12103 12222 12465 12746 12865 13105 13227 13389 13511 13635 13743 13870 14049 14359 14570 14697 14800 15038 15343 15668 15989 16100 16205 16319 16427 16632 17054 17286 17395 17632 17938 18057 18251 18403 18581 18697 18800 18913 19062 19170 19324 19562 19665 19884 20297 20532 20643 20846 21181 21300 21508 21619 21832 21941 22157 22459 22568 22822 22938 23116 23259 23476 23776 23919 24105 24413 24554 24838 25076 25184 25286 25486 25724 26049 26373 26484 26784 27019 27432 27668 27778 27881 27995 28316 28462 28676 28786 28965 29068 29313 29611 29730 30027 30259 30362 30578 30908 31011 31232 31432 31551 31662 31773 31968 32205 32316 32622 32854 32970 33203 33508 33830 33970 34149 34265 34395 34568 34773 34892 35124 35346 35454 35562 35776 35895 36100 36208 36424 36738 36846 37078 37186 37395 37505 37811 38043 38151 38376 38549 38692 38795 39046 39189 39340 39449 39670 39773 39984 40113 40349 40489 40640 41054 41968)) :ldur (quote ((95 176 59 67 67 97 164 672 135) (133 232) (1041 94 111) (665 67 67 54 76) (68 68 324 324 562 67) (181 68 68 71 63) (67 67 97 165 686 68 60 157) (173) (68 68 54 76 781 111) (68 68 325 325 203 649 68 79) (162) (67 67 70 62 127) (179) (68 68 97 165 668 67 67 157 162) (114 162 152 221 56 100 157 171) (71 70 76 60 103 133 148) (138 178 68 68 54 76) (251 68 92) (570 67 67 324 324) (133) (195 68 68 70 62) (1024 67 19) (95 176 59 68 98 165 414) (67 67 54 75 1041) (68 68 324 324 146 68 141) (68 68 71 63 325 114) (67 67 97 165 635 170 67) (133 243 95 176 59) (168 68 68 54 76 1041 113) (68 68 325 325 581 491 68) (211 67 67 70 62) (54 54 68 68 97 165 543 122 29 67) (173) (62 68 73 62 73 68 68 54 76 73 825) (68 149) (192 149 149 146 157 146 157 67 67 324 324 151) (52 46 63 54 54 51 121 132) (141 68 68 70 62 305) (67 170) (162 170 121 68 68 98 165 649) (67 67 54 75 89 73 87) (83 205 89 165 113) (67 100 124 92) (143 54 54 68 68 97 165 649) (62 68 73 62 73 68 68 54 76 219 73) (67 67 97 164 667 1148 68) (113 151 57 100 156 170) (67 54 76 70 71 76 59 102) (68 68 325 325 67 67) (570) (67 70 62 68) (67 67 97 165 667 143 68 68) (203 79 70 102 73) (138 127) (684 68 68 54 76) (67 67 324 324 68) (490 81 492 441 421 571) (192 67 67 70 62) (78 70 103 73 68 68 97 165 673 43 67 156) (197) (67 67 54 75 794) (67 67 324 324 562 68) (217 489 81 492 441 421) (68 68 70 62 100) (173) (68 68 98 165 200 673 43 127 59 67 146) (133 95 176 59) (100 130) (67 67 54 75 122 1041) (552) (68 68 324 324 562 67) (68 68 71 63 157) (192) (49 67 97 165 378 68 60) (113 1094 151 57 100 156 170) (68 68 54 76 354 70 70 75 59 103) (68 68 325 325 379 68) (67 70 62 324 67) (68 68 97 165 635 67 154) (1152 1262 1198 86 297) (1076) (68 68 54 76 135) (165) (67 67 324 324 581 67 498) (229 68 68 70 62) (68 68 98 165 635 135 30 68) (114 184 151 57 100 157 170) (67 67 54 75 789 70 70 76 59 103) (68 68 324 324 581 67) (162) (68 68 71 62 127) (178) (149 67 67 97 165 170 30 68 162) (160 613 613 616 87) (524) (68 68 54 76 324 159 163 109) (103 187) (102 138 67 81 76) (149 170 68 68 98 165 649) (209 67 67 54 75 73) (165 113) (68 97 165 635 68 1224) (68 68 54 76) (67 324 324 581 111 68) (198) (67 67 67 70 62 67 81) (68 98 165 181 29 68) (424) (67 67 67 54 75 318 83 68 70) (122) (67 324 324 346 68 68) (51 70 78 267 70) (68 68 68 70 62 289 67) (68 87 190) (133 67 97 164 378) (67 67 67 54 76 349 119 81 110) (111 100) (68 325 325 203 341 181 71 68 79) (219) (318 67 67 70 62 264 57 129) (67 97 165 119 68 98 67) (165) (68 68 68 54 76 324 338 111 141) (68 325 325 203 322 68 68 79) (157) (138 67 67 67 70 62 324) (68 97 165 384 765 67 67) (614 614 616 86) (525) (68 68 68 55 76 325) (119 67 97 165 200 68 68) (140 68 68 68 54 76 324 59 45 73 83 70) (62 57 45 68 98 165 349 695 68) (46) (67 67 67 54 75 362) (187 68 324 324 333 67 67) (170 68 68 68 71 63 325) (246 67 97 165 181 67 67) (1151 1262 1197 87) (1076) (68 68 68 54 76 319 119 70) (68 325 325 346 365 68 68) (219) (141 67 67 70 62 289 116) (163) (70 103 73 68 97 165 324 106 65 86 67) (238 168 78) (262 68 68 68 54 76 327 346) (327 67 324 324 76 67 67) (489 238 81 492 441 421) (122 319 68 68 68 70 62) (68 98 165 292 43 900 68 68) (156 184 181) (67 67 54 75 324 49 43 38 67 87) (46 68 68 97 165 173 68 68) (46 63 57) (68 68 54 76 325 94 68 68) (68) (67 67 67 67 97 164 667 67 67 133) (1151 1262 1197 87 197) (125 95 1076) (68 68 54 76 754) (68 68 325 325 68) (570) (192 67 67 70 62) (67 67 97 165 635 97 68) (184 94 175 60) (68 68 54 76 803 1040) (67 67 324 324 581 68) (67 67 70 62 113) (179) (68 68 98 165 687 67 29 135 146) (106 200) (83 100 162 129) (138 573 121 67 67 54 75) (68 146) (51 70 78 71 67 67 324 324 648) (68 68 70 62 160) (186) (68 68 98 165 673 68) (1114 30) (67 67 54 75 102 113) (102 97) (68 68 324 324 562 68 97 113) (189 216) (68 71 63 68 114 98) (67 67 97 165 667 149 60 67 92 100) (229 46 62 56 46) (68 68 54 76 92) (106) (68 68 325 325 378 67) (571) (159 67 67 70 62) (81 81 68 68 97 165 687 135 68) (138 56 46 68) (68 68 54 76 733 129) (129) (67 67 324 324 648 135 67) (151 46 44 33 59 43) (68 68 70 62 116) (192) (119 68 68 98 165 649 111 68) (159) (67 67 54 75 60 46 73 89) (59 232) (68 68 97 165 649 67 94) (146) (49 213 68 68 54 76 24) (100 146) (54 54 67 67 97 165 619 79 1322 68) (62 67 72 62 73 68 68 54 76 73))) :lvel (quote ((68 63 45 70 60 64 55 82 90) (54 103) (53 102 110) (113 70 90 41 49) (80 60 56 56 85 40) (119 80 90 60 51) (80 60 64 55 76 50 82 93) (118) (70 90 41 49 106 82) (80 60 56 56 68 61 40 49) (92) (85 90 60 51 89) (82) (70 60 64 55 89 47 50 93 96) (46 75 52 110 36 35 32 45) (60 55 59 74 55 112 96) (76 82 70 80 41 49) (110 40 108) (82 80 60 56 56) (95) (113 80 80 60 51) (112 50 116) (68 63 45 70 64 55 69) (80 70 41 49 53) (80 60 56 56 68 40 69) (80 60 60 51 77 78) (80 60 64 55 78 96 50) (54 103 68 63 45) (105 70 90 41 49 53 103) (80 60 56 56 82 105 40) (114 85 90 60 51) (32 52 70 60 64 55 72 77 60 50) (115) (39 38 33 36 31 70 90 41 49 39 111) (40 82) (62 23 40 19 19 30 23 80 60 56 56 74) (26 47 45 41 51 51 91 100) (87 80 90 60 51 89) (50 94) (107 67 112 80 60 64 55 82) (70 90 41 49 34 50 105) (106 65 85 63 67) (40 99 86 77) (123 32 52 80 60 64 55 82) (39 38 33 36 31 85 90 41 49 127 39) (80 60 64 55 89 115 50) (46 52 36 35 32 45) (90 41 49 60 55 59 74 55) (70 60 56 56 60 40) (82) (80 60 51 50) (70 60 64 55 89 86 60 60) (112 64 68 67 59) (80 99) (110 70 80 41 49) (80 60 56 56 40) (67 63 75 54 49 82) (110 80 80 60 51) (64 68 67 59 54 60 64 55 82 30 50 85) (118) (80 70 41 49 110) (80 60 56 56 85 40) (97 67 63 75 54 49) (80 60 60 51 85) (99) (70 60 64 55 106 82 30 92 82 50 82) (54 68 63 45) (94 114) (70 80 41 49 94 53) (113) (80 60 56 56 85 40) (80 80 60 51 119) (97) (113 80 64 55 78 50 82) (46 110 52 36 35 32 45) (70 90 41 49 80 60 55 59 74 55) (80 60 56 56 75 40) (90 60 51 76 90) (54 60 64 55 78 50 84) (51 37 36 69 112) (44) (80 70 41 49 116) (90) (80 60 56 56 82 40 102) (111 80 60 60 51) (80 60 64 55 78 89 60 50) (46 118 52 36 35 32 45) (70 90 41 49 115 60 55 59 74 55) (80 60 56 56 82 40) (92) (85 90 60 51 89) (82) (110 70 60 64 55 81 60 50 96) (86 51 48 58 69) (44) (70 80 41 49 73 107 80 71) (96 83) (85 74 40 60 98) (120 67 80 60 64 55 70) (117 80 80 41 49 50) (63 67) (80 64 55 78 50 108) (70 90 41 49) (80 56 56 82 89 50) (84) (85 90 55 60 51 30 76) (70 64 55 70 60 50) (119) (90 60 90 41 49 62 76 60 77) (26) (80 56 56 68 70 40) (67 58 63 117 56) (90 70 100 60 51 64 50) (70 79 106) (106 80 64 55 71) (90 70 70 41 49 68 118 84 82) (80 66) (90 56 56 68 75 117 102 70 49) (104) (97 90 100 60 51 68 67 115) (70 64 55 85 47 100 70) (121) (90 60 90 41 49 64 108 82 73) (80 56 56 68 75 70 40 49) (115) (120 90 70 100 60 51 67) (80 64 55 71 117 47 70) (51 48 58 69) (44) (90 70 80 41 49 70) (56 80 64 55 69 70 40) (109 90 70 100 41 49 62 64 72 75 82 81) (48 51 38 70 64 55 76 127 70) (51) (90 70 100 41 49 59) (104 80 56 56 71 50 40) (119 90 70 100 60 51 77) (115 80 64 55 70 50 40) (51 37 36 69) (44) (90 70 70 41 49 62 121 77) (90 56 56 68 115 70 40) (116) (119 90 100 60 51 64 41) (78) (68 67 59 80 64 55 69 49 98 79 70) (80 104 64) (95 90 70 80 41 49 68 116) (63 80 56 56 31 60 40) (67 104 63 75 54 49) (95 81 100 80 100 60 51) (90 64 55 78 30 118 70 60) (74 90 87) (90 80 41 49 78 42 43 43 70 55) (38 80 80 64 55 77 80 60) (51 48 51) (90 100 41 49 63 70 50 80) (40) (40 70 50 60 64 55 89 80 60 96) (51 37 36 69 117) (95 104 44) (80 80 41 49 110) (80 60 56 56 50) (82) (111 80 90 60 51) (70 60 64 55 78 92 50) (124 68 63 45) (70 80 41 49 110 53) (80 60 56 56 82 40) (80 80 60 51 45) (65) (70 60 64 55 76 50 60 89 93) (76 116) (76 99 84 103) (76 108 26 70 90 41 49) (40 101) (67 58 63 56 80 60 56 56 61) (80 90 60 51 120) (90) (80 60 64 55 82 50) (106 116) (70 90 41 49 76 64) (50 44) (80 60 56 56 85 40 83 64) (71 50) (90 60 51 90 66 85) (70 60 64 55 89 104 82 50 80 61) (115 51 48 51 38) (80 70 41 49 102) (99) (80 60 56 56 110 40) (82) (123 80 60 60 51) (49 40 70 60 64 55 76 78 50) (116 50 46 45) (80 90 41 49 120 113) (96) (70 60 56 56 61 108 40) (88 54 75 73 73 72) (78 90 60 51 83) (79) (56 80 60 64 55 82 67 50) (117) (70 90 41 49 64 72 75 115) (91 91) (80 60 64 55 82 40 79) (127) (55 127 85 90 41 49 43) (43 52) (32 52 80 60 64 55 72 55 114 50) (39 38 33 36 31 70 90 41 49 39))) :loffset (quote ((92 92 87 63 63 63 63 63 0) (40 0) (89 87 0) (43 0 0 0 0) (86 86 86 86 86 0) (14 0 0 0 0) (92 92 92 92 92 5 5 0) (0) (70 70 70 70 3 0) (100 100 100 100 100 100 11 0) (0) (100 100 100 100 0) (0) (94 94 94 94 94 27 5 2 0) (84 44 8 6 6 3 3 0) (48 43 43 40 32 13 0) (38 36 0 0 0 0) (25 19 0) (19 0 0 0 0) (0) (5 0 0 0 0) (19 16 0) (30 30 25 0 0 0 0) (68 68 68 68 0) (92 92 92 92 92 0 0) (92 92 92 92 92 0) (92 92 92 92 92 24 0) (59 35 5 5 0) (94 70 70 70 70 2 0) (89 89 89 89 89 6 0) (10 0 0 0 0) (94 92 89 89 89 89 89 8 3 0) (0) (79 73 68 65 65 54 54 54 54 54 0) (19 0) (32 29 29 24 21 19 13 0 0 0 0 0) (51 40 40 38 38 38 11 0) (54 0 0 0 0 0) (30 0) (68 30 17 0 0 0 0 0) (95 95 95 95 22 8 0) (76 16 0 0 0) (81 78 65 0) (35 5 3 0 0 0 0 0) (25 19 14 11 11 0 0 0 0 0 0) (90 90 90 90 90 17 0) (84 8 5 3 3 0) (70 70 70 16 10 10 8 0) (94 94 94 94 0 0) (0) (95 95 95 0) (95 95 95 95 95 3 0 0) (16 5 3 3 0) (86 0) (41 0 0 0 0) (87 87 87 87 0) (19 14 14 14 9 0) (11 0 0 0 0) (100 97 97 94 86 86 86 86 86 43 0 0) (0) (49 49 49 49 0) (92 92 92 92 92 0) (21 11 5 5 5 0) (57 57 57 57 0) (0) (97 97 97 97 97 97 54 27 11 6 0) (59 5 5 0) (100 0) (68 68 68 68 3 0) (0) (86 86 86 86 86 0) (100 100 100 100 0) (0) (89 87 87 87 87 0 0) (84 19 8 5 3 3 0) (70 70 70 70 70 16 11 11 8 0) (89 89 89 89 89 0) (89 89 89 89 0) (92 92 92 92 92 3 0) (16 16 13 3 0) (0) (86 86 86 86 0) (0) (98 98 98 98 98 6 0) (3 0 0 0 0) (92 92 92 92 92 22 6 0) (83 10 8 5 2 2 0) (71 71 71 71 17 17 11 11 9 0) (89 89 89 89 89 0) (0) (100 100 100 100 0) (0) (97 95 95 95 95 95 8 5 0) (62 14 14 11 0) (0) (87 87 87 87 87 6 0 0) (3 0) (98 76 68 41 0) (65 30 0 0 0 0 0) (97 87 87 87 87 0) (0 0) (89 89 89 89 2 0) (0 0 0 0) (90 90 90 90 3 0) (0) (100 100 100 100 100 11 0) (89 89 89 89 3 0) (0) (87 87 87 87 87 87 14 0 0) (0) (87 87 87 87 0 0) (8 8 8 5 0) (86 86 86 86 86 86 0) (22 22 0) (45 0 0 0 0) (70 70 70 70 70 70 21 5 0) (94 0) (100 100 100 100 100 30 16 11 0) (0) (92 65 65 65 65 65 5 0) (89 89 89 89 21 10 0) (0) (84 84 84 84 84 84 30 14 0) (100 100 100 100 100 14 14 0) (0) (21 0 0 0 0 0 0) (86 86 86 86 35 19 0) (13 13 11 0) (0) (0 0 0 0 0 0) (89 87 87 87 87 0 0) (97 86 86 86 86 86 86 19 19 10 0 0) (100 97 95 86 86 86 86 8 0) (0) (0 0 0 0 0 0) (97 89 89 89 89 0 0) (6 0 0 0 0 0 0) (94 89 89 89 89 0 0) (14 14 11 0) (0) (86 86 86 86 86 86 24 0) (89 89 89 89 14 0 0) (0) (75 54 54 54 54 54 0) (0) (100 100 97 89 89 89 89 32 21 3 0) (35 29 0) (98 65 65 65 65 65 65 0) (94 92 92 92 48 0 0) (11 8 5 5 5 0) (8 5 0 0 0 0 0) (92 92 92 92 49 17 0 0) (6 0 0) (98 98 98 98 98 38 38 30 6 0) (100 92 92 92 92 92 0 0) (13 2 0) (92 92 92 92 92 9 0 0) (0) (98 98 98 98 98 98 98 6 6 0) (22 22 19 8 0) (78 8 0) (5 5 5 5 0) (92 92 92 92 0) (0) (10 0 0 0 0) (92 92 92 92 92 14 0) (16 6 6 0) (67 67 67 67 24 0) (87 87 87 87 87 0) (89 89 89 89 0) (0) (94 94 94 94 94 8 8 5 0) (67 0) (100 94 5 0) (48 35 24 0 0 0 0) (32 0) (30 30 30 21 0 0 0 0 0) (92 92 92 92 0) (0) (86 86 86 86 86 0) (19 0) (89 89 89 89 0 0) (0 0) (89 89 89 89 89 0 0 0) (11 0) (89 89 89 0 0 0) (100 100 100 100 100 16 13 11 0 0) (22 16 5 3 0) (84 84 84 84 0) (0) (91 91 91 91 13 0) (0) (19 0 0 0 0) (95 95 92 92 92 92 92 22 0) (19 6 3 0) (83 83 83 83 37 0) (0) (92 92 92 92 92 27 0) (78 13 10 10 0 0) (62 62 62 62 0) (0) (95 92 92 92 92 92 30 0) (0) (87 87 87 87 19 19 11 0) (100 0) (97 97 97 97 97 8 0) (0) (83 62 56 56 56 56 0) (73 0) (95 92 90 90 90 90 90 11 6 0) (24 19 14 11 11 0 0 0 0 0))) :lchan (quote ((3 3 3 10 10 7 7 2 4) (3 4) (3 4 4) (4 10 10 7 7) (10 10 7 7 2 10) (4 10 10 7 7) (10 10 7 7 2 10 2 4) (4) (10 10 7 7 4 3) (10 10 7 7 3 2 10 3) (5) (10 10 7 7 5) (5) (10 10 7 7 2 3 10 4 5) (3 5 3 4 3 3 3 3) (3 3 3 3 3 4 5) (5 4 10 10 7 7) (4 10 5) (2 10 10 7 7) (4) (4 10 10 7 7) (4 10 4) (3 3 3 10 7 7 2) (10 10 7 7 3) (10 10 7 7 2 10 2) (10 10 7 7 2 2) (10 10 7 7 2 4 10) (3 4 3 3 3) (4 10 10 7 7 3 4) (10 10 7 7 2 4 10) (4 10 10 7 7) (3 3 10 10 7 7 2 4 2 10) (4) (3 3 3 3 3 10 10 7 7 3 4) (10 2) (5 3 3 3 3 3 3 10 10 7 7 2) (3 3 3 3 3 3 5 2) (5 10 10 7 7 2) (10 5) (5 3 4 10 10 7 7 2) (10 10 7 7 5 3 4) (4 5 4 3 3) (10 5 4 4) (4 3 3 10 10 7 7 2) (3 3 3 3 3 10 10 7 7 4 3) (10 10 7 7 2 4 10) (3 3 3 3 3 3) (10 7 7 3 3 3 3 3) (10 10 7 7 10 10) (2) (10 7 7 10) (10 10 7 7 2 4 10 10) (4 3 3 3 3) (4 4) (4 10 10 7 7) (10 10 7 7 10) (3 3 3 3 3 2) (4 10 10 7 7) (3 3 3 3 10 10 7 7 2 3 10 4) (4) (10 10 7 7 4) (10 10 7 7 2 10) (5 3 3 3 3 3) (10 10 7 7 5) (5) (10 10 7 7 4 2 3 5 2 10 4) (3 3 3 3) (4 4) (10 10 7 7 5 3) (4) (10 10 7 7 2 10) (10 10 7 7 4) (4) (4 10 7 7 2 10 2) (3 4 3 3 3 3 3) (10 10 7 7 2 3 3 3 3 3) (10 10 7 7 2 10) (10 7 7 2 10) (10 10 7 7 2 10 4) (3 3 3 3 4) (3) (10 10 7 7 4) (4) (10 10 7 7 2 10 4) (4 10 10 7 7) (10 10 7 7 2 4 2 10) (3 4 3 3 3 3 3) (10 10 7 7 4 3 3 3 3 3) (10 10 7 7 2 10) (5) (10 10 7 7 5) (5) (4 10 10 7 7 2 2 10 5) (5 3 3 3 3) (3) (10 10 7 7 2 4 5 2) (4 5) (4 5 10 4 4) (4 3 10 10 7 7 2) (4 10 10 7 7 3) (3 3) (10 7 7 2 10 4) (10 10 7 7) (10 7 7 2 3 10) (3) (10 10 10 7 7 10 3) (10 7 7 2 2 10) (4) (10 10 10 7 7 2 3 10 2) (3) (10 7 7 2 10 10) (3 3 3 4 3) (10 10 10 7 7 2 10) (10 2 4) (4 10 7 7 2) (10 10 10 7 7 2 4 5 3) (5 5) (10 7 7 3 2 4 5 10 3) (5) (5 10 10 7 7 2 5 4) (10 7 7 2 3 4 10) (4) (10 10 10 7 7 2 4 3 2) (10 7 7 3 2 10 10 3) (4) (4 10 10 10 7 7 2) (10 7 7 2 4 3 10) (3 3 3 3) (3) (10 10 10 7 7 2) (3 10 7 7 2 10 10) (4 10 10 10 7 7 2 3 3 3 4 2) (3 3 3 10 7 7 2 4 10) (3) (10 10 10 7 7 2) (4 10 7 7 2 10 10) (4 10 10 10 7 7 2) (4 10 7 7 2 10 10) (3 3 3 3) (3) (10 10 10 7 7 2 4 2) (10 7 7 2 4 10 10) (5) (4 10 10 7 7 2 5) (5) (3 3 3 10 7 7 2 5 4 2 10) (5 4 3) (5 10 10 10 7 7 2 4) (2 10 7 7 5 10 10) (3 4 3 3 3 3) (4 2 10 10 10 7 7) (10 7 7 2 3 4 10 10) (3 3 3) (10 10 7 7 2 3 3 3 10 2) (3 10 10 7 7 2 10 10) (3 3 3) (10 10 7 7 2 2 10 10) (10) (10 10 10 10 7 7 2 10 10 4) (3 3 3 3 4) (4 4 3) (10 10 7 7 4) (10 10 7 7 10) (2) (4 10 10 7 7) (10 10 7 7 2 4 10) (4 3 3 3) (10 10 7 7 4 3) (10 10 7 7 2 10) (10 10 7 7 5) (5) (10 10 7 7 2 10 2 5 4) (5 4) (3 4 5 4) (5 4 3 10 10 7 7) (10 5) (3 3 3 3 10 10 7 7 2) (10 10 7 7 4) (4) (10 10 7 7 2 10) (4 4) (10 10 7 7 3 3) (3 3) (10 10 7 7 2 10 3 3) (3 3) (10 7 7 10 3 3) (10 10 7 7 2 4 2 10 3 3) (4 3 3 3 3) (10 10 7 7 4) (4) (10 10 7 7 4 10) (2) (4 10 10 7 7) (3 3 10 10 7 7 2 4 10) (4 3 3 3) (10 10 7 7 4 5) (5) (10 10 7 7 2 5 10) (5 3 3 3 3 3) (10 10 7 7 5) (5) (3 10 10 7 7 2 5 10) (4) (10 10 7 7 3 3 3 4) (4 4) (10 10 7 7 2 10 4) (4) (3 4 10 10 7 7 3) (3 3) (3 3 10 10 7 7 2 3 4 10) (3 3 3 3 3 10 10 7 7 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 784 316) 0 1000 nil 149/25 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "tunisia" (let ((copy (make-instance (quote ominstance) :name "tunisia" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600 7000 6500 4200 3500 5500 4900 3900 5700) (6700 5800) (4600 6500 6100) (7200 3700 4200 4900 5500) (4200 3500 5500 4900 4600 4200) (7000 3700 4200 5500 4900) (4200 3500 5900 5300 3800 4200 3900 6500) (6800) (3700 4200 5300 5900 6900 7400) (4200 3500 5900 5300 7400 4500 4200 6900) (6100) (3700 4200 5900 5300 6200) (6400) (4200 3500 5500 4900 3900 6900 4200 5700 6500) (8400 6300 4900 5800 8300 7700 5500 8900) (4900 7700 5500 8400 8900 6100 6500) (6700 6500 3700 4200 4900 5500) (7200 4200 6800) (3400 4200 3500 5500 4900) (7000) (6500 3700 4200 5500 4900) (6900 4200 6800) (6500 6900 6400 4200 5900 5300 3800) (3700 4200 5300 5900 4500) (4200 3500 5900 5300 4500 4200 3800) (4200 3500 5900 5300 4000 4500) (4200 3500 5500 4900 3900 5700 4200) (6700 5800 6600 7000 6500) (6500 3700 4200 4900 5500 4600 6100) (4200 3500 5500 4900 3400 7200 4200) (7000 3700 4200 5500 4900) (8600 8100 4200 3500 5900 5300 3800 6500 2700 4200) (6800) (8100 8600 7400 7700 7100 3700 4200 5300 5900 6900 6900) (4200 4500) (6900 8600 8100 7400 7700 6900 7100 4200 3500 5900 5300 5000) (8600 7700 8100 7100 6900 7400 7000 4500) (7300 3700 4200 5900 5300 3800) (4200 7400) (7200 7400 6900 4200 3500 5500 5000 4000) (3700 4200 5000 5500 6900 4000 7000) (7000 7000 6900 7000 8200) (4200 7200 6700 6900) (6300 8200 7500 4200 3500 5500 4900 3300) (7500 8200 7000 7300 6700 3700 4200 4900 5500 6100 6300) (4200 3500 5900 5300 3800 6200 4200) (8800 5300 8700 8100 5900 9300) (4200 5300 5900 5300 8100 5900 8800 9300) (4200 3500 5900 5300 4200 3800) (4500) (4200 5900 5300 3800) (4200 3500 5500 4900 3900 5700 4200 3800) (5800 6100 6500 7000 3900) (6500 6100) (7200 3700 4200 4900 5500) (4200 3500 5500 4900 4200) (7000 7700 8200 4900 5800 3400) (7000 3700 4200 5500 4900) (6500 6900 7400 5000 4600 3500 5900 5300 3800 4900 4200 6500) (6800) (3700 4200 5300 5900 6900) (4200 3500 5900 5300 4500 4200) (7300 7400 8100 8600 5300 6200) (4200 3500 5900 5300 7400) (7600) (4200 3500 5500 4900 5800 3900 5300 7400 3800 4200 5700) (6700 6600 7000 6500) (6500 6100) (3700 4200 4900 5500 7300 4600) (7200) (4200 3500 5500 4900 4600 4200) (3700 4200 5500 4900 7000) (6500) (6800 4200 5900 5300 3800 4200 3900) (8800 6900 5300 8700 8100 5900 9300) (3700 4200 5300 5900 4000 5300 8100 5900 8800 9300) (4200 3500 5900 5300 4100 4200) (4200 5900 5300 4500 3700) (4600 3500 5500 4900 3900 4200 5700) (7900 6100 3900 7200 5800) (7300) (3700 4200 4900 5500 6100) (6500) (4200 3500 5500 4900 3400 4200 7200) (7000 4200 3500 5500 4900) (4200 3500 5900 5300 3800 6500 2700 4200) (8800 6800 5300 8700 8100 5900 9300) (3700 4200 5300 5900 6900 5300 8100 5900 8800 9300) (4200 3500 5900 5300 4500 4200) (7300) (3700 4200 5900 5300 7400) (7600) (6900 4200 3500 5500 5000 4000 2600 4200 7700) (7900 7900 5000 4000 7500) (7600) (3700 4200 5000 5500 4600 7000 7400 4000) (6900 7000) (6700 6900 4200 6900 7000) (6300 7300 4200 3500 5500 4900 3300) (6100 3700 4200 4900 5500 4500) (7000 8200) (4200 5900 5300 3800 4200 6200) (3700 4200 5300 5900) (4200 5900 5300 3300 7400 4200) (8600) (3700 4200 3800 5900 5300 3800 7400) (5100 5500 4800 3300 2600 4200) (7200) (5100 3700 4200 4800 5500 3100 8100 3800 2100) (7500) (5100 5500 4800 2900 5100 3800) (7200 6700 8100 6900 6300) (5100 3700 4200 5500 4800 2700 3800) (5100 3900 6700) (6600 5100 6000 5400 3800) (5100 3700 4200 5400 6000 4000 7500 6500 7500) (6900 6600) (5100 6000 5400 7500 4100 7400 7200 5100 6900) (7700) (7700 5100 4200 6000 5400 4200 7500 7200) (5100 5800 5300 4300 6900 6900 5100) (7000) (5100 3700 4200 5300 5800 4500 6700 7400 4300) (5100 5800 5300 7400 4600 5100 3800 6700) (6900) (6600 5100 3700 4200 5800 5300 5000) (5100 5800 5300 4300 6700 6700 5100) (8200 5300 4300 7800) (7900) (5100 3700 4200 5300 5800 5000) (3600 5100 5800 5200 3600 5100 3800) (6900 5100 3700 4200 5200 5800 4200 8400 7600 7000 6700 3600) (5500 5800 4300 5100 5800 5300 4300 7000 5100) (6500) (5100 3700 4200 5300 5800 5500) (6700 5100 5800 5300 4900 5100 3800) (6500 5100 3700 4200 5800 5300 4600) (6400 5100 5800 5200 3600 5100 3800) (8200 6400 4800 7500) (7600) (5100 3700 4200 5200 5800 3400 7300 2400) (5100 5800 5200 3300 7200 5100 3800) (7500) (7000 5100 4200 5800 5200 3100 7200) (7300) (6500 7200 4100 5100 5700 5000 4100 7500 6800 4200 5100) (7700 6900 6200) (7400 5100 3700 4200 5000 5700 4800 6500) (4500 5100 5700 5000 7200 5100 3800) (7200 6700 7700 8400 5000 6000) (6500 4100 5100 3700 4200 5700 5000) (3500 5500 5000 4000 5000 6900 5100 3800) (4600 7400 7600) (5100 4200 5000 5500 3400 4600 7600 7400 3800 2800) (4500 5100 3800 5500 4900 3300 5100 3800) (6100 5100 5500) (5100 4200 4900 5500 3900 3300 3800 3500) (3800) (4900 4200 3800 3500 5500 4900 3900 5100 3800 5700) (7900 6100 3900 7200 5800) (6500 6100 7300) (3700 4200 4900 5500 7200) (4200 3500 5500 4900 4200) (3400) (7000 3700 4200 5500 4900) (4200 3500 5900 5300 3800 6500 4200) (6800 6500 6900 6400) (3700 4200 5300 5900 6900 4500) (4200 3500 5900 5300 4500 4200) (3700 4200 5900 5300 6700) (7300) (4200 3500 5500 4900 3900 4200 2600 7900 5700) (7600 5800) (8200 6500 7700 6100) (7500 7200 7700 3700 4200 4900 5500) (4200 7700) (7300 6700 8200 6500 4200 3500 5500 4900 4600) (3700 4200 5500 4900 7000) (6500) (4200 3500 5900 5300 3800 4200) (6900 6800) (3700 4200 5300 5900 7700 8100) (8000 7600) (4200 3500 5900 5300 4500 4200 7700 8100) (8000 7600) (4200 5900 5300 3700 8100 7700) (4200 3500 5500 4900 3900 5700 3800 4200 7700 8100) (5800 6100 5100 5500 3900) (3700 4200 4900 5500 6100) (6500) (4200 3500 5500 4900 7200 4200) (3400) (7000 4200 3500 5500 4900) (6500 5300 4200 3500 5900 5300 3800 6500 4200) (6800 5700 5900 3800) (3700 4200 5300 5900 6900 7200) (7300) (4200 3500 5900 5300 4500 7000 4200) (6900 7100 8600 7400 8100 7700) (3700 4200 5900 5300 6700) (6500) (4000 4200 3500 5500 5000 4000 6100 4200) (6900) (3700 4200 5000 5500 8200 7400 6700 7000) (7000 6900) (4200 3500 5500 4900 3300 4200 6700) (6300) (6700 6100 3700 4200 4900 5500 4500) (6700 7300) (8600 8100 4200 3500 5900 5300 3800 6100 6200 4200) (8100 8600 7400 7700 7100 3700 4200 5300 5900 6900))) :lonset (quote (451 557 681 838 1076 1486 1719 1838 2065 2359 2489 2684 2835 3014 3124 3330 3432 3651 3757 3878 4081 4303 4405 4662 4962 5286 5611 5727 5957 6262 6676 6911 7032 7270 7543 7649 7865 7973 8181 8297 8527 8638 8776 8946 9270 9505 9611 9849 10149 10262 10473 10797 10900 11038 11216 11454 11559 11865 12103 12222 12465 12746 12865 13105 13227 13389 13511 13635 13743 13870 14049 14359 14570 14697 14800 15038 15343 15668 15989 16100 16205 16319 16427 16632 17054 17286 17395 17632 17938 18057 18251 18403 18581 18697 18800 18913 19062 19170 19324 19562 19665 19884 20297 20532 20643 20846 21181 21300 21508 21619 21832 21941 22157 22459 22568 22822 22938 23116 23259 23476 23776 23919 24105 24413 24554 24838 25076 25184 25286 25486 25724 26049 26373 26484 26784 27019 27432 27668 27778 27881 27995 28316 28462 28676 28786 28965 29068 29313 29611 29730 30027 30259 30362 30578 30908 31011 31232 31432 31551 31662 31773 31968 32205 32316 32622 32854 32970 33203 33508 33830 33970 34149 34265 34395 34568 34773 34892 35124 35346 35454 35562 35776 35895 36100 36208 36424 36738 36846 37078 37186 37395 37505 37811 38043 38151 38376 38549 38692 38795 39046 39189 39340 39449 39670 39773 39984 40113 40349 40489 40640 41054 41968)) :ldur (quote ((95 176 59 67 67 97 164 672 135) (133 232) (1041 94 111) (665 67 67 54 76) (68 68 324 324 562 67) (181 68 68 71 63) (67 67 97 165 686 68 60 157) (173) (68 68 54 76 781 111) (68 68 325 325 203 649 68 79) (162) (67 67 70 62 127) (179) (68 68 97 165 668 67 67 157 162) (114 162 152 221 56 100 157 171) (71 70 76 60 103 133 148) (138 178 68 68 54 76) (251 68 92) (570 67 67 324 324) (133) (195 68 68 70 62) (1024 67 19) (95 176 59 68 98 165 414) (67 67 54 75 1041) (68 68 324 324 146 68 141) (68 68 71 63 325 114) (67 67 97 165 635 170 67) (133 243 95 176 59) (168 68 68 54 76 1041 113) (68 68 325 325 581 491 68) (211 67 67 70 62) (54 54 68 68 97 165 543 122 29 67) (173) (62 68 73 62 73 68 68 54 76 73 825) (68 149) (192 149 149 146 157 146 157 67 67 324 324 151) (52 46 63 54 54 51 121 132) (141 68 68 70 62 305) (67 170) (162 170 121 68 68 98 165 649) (67 67 54 75 89 73 87) (83 205 89 165 113) (67 100 124 92) (143 54 54 68 68 97 165 649) (62 68 73 62 73 68 68 54 76 219 73) (67 67 97 164 667 1148 68) (113 151 57 100 156 170) (67 54 76 70 71 76 59 102) (68 68 325 325 67 67) (570) (67 70 62 68) (67 67 97 165 667 143 68 68) (203 79 70 102 73) (138 127) (684 68 68 54 76) (67 67 324 324 68) (490 81 492 441 421 571) (192 67 67 70 62) (78 70 103 73 68 68 97 165 673 43 67 156) (197) (67 67 54 75 794) (67 67 324 324 562 68) (217 489 81 492 441 421) (68 68 70 62 100) (173) (68 68 98 165 200 673 43 127 59 67 146) (133 95 176 59) (100 130) (67 67 54 75 122 1041) (552) (68 68 324 324 562 67) (68 68 71 63 157) (192) (49 67 97 165 378 68 60) (113 1094 151 57 100 156 170) (68 68 54 76 354 70 70 75 59 103) (68 68 325 325 379 68) (67 70 62 324 67) (68 68 97 165 635 67 154) (1152 1262 1198 86 297) (1076) (68 68 54 76 135) (165) (67 67 324 324 581 67 498) (229 68 68 70 62) (68 68 98 165 635 135 30 68) (114 184 151 57 100 157 170) (67 67 54 75 789 70 70 76 59 103) (68 68 324 324 581 67) (162) (68 68 71 62 127) (178) (149 67 67 97 165 170 30 68 162) (160 613 613 616 87) (524) (68 68 54 76 324 159 163 109) (103 187) (102 138 67 81 76) (149 170 68 68 98 165 649) (209 67 67 54 75 73) (165 113) (68 97 165 635 68 1224) (68 68 54 76) (67 324 324 581 111 68) (198) (67 67 67 70 62 67 81) (68 98 165 181 29 68) (424) (67 67 67 54 75 318 83 68 70) (122) (67 324 324 346 68 68) (51 70 78 267 70) (68 68 68 70 62 289 67) (68 87 190) (133 67 97 164 378) (67 67 67 54 76 349 119 81 110) (111 100) (68 325 325 203 341 181 71 68 79) (219) (318 67 67 70 62 264 57 129) (67 97 165 119 68 98 67) (165) (68 68 68 54 76 324 338 111 141) (68 325 325 203 322 68 68 79) (157) (138 67 67 67 70 62 324) (68 97 165 384 765 67 67) (614 614 616 86) (525) (68 68 68 55 76 325) (119 67 97 165 200 68 68) (140 68 68 68 54 76 324 59 45 73 83 70) (62 57 45 68 98 165 349 695 68) (46) (67 67 67 54 75 362) (187 68 324 324 333 67 67) (170 68 68 68 71 63 325) (246 67 97 165 181 67 67) (1151 1262 1197 87) (1076) (68 68 68 54 76 319 119 70) (68 325 325 346 365 68 68) (219) (141 67 67 70 62 289 116) (163) (70 103 73 68 97 165 324 106 65 86 67) (238 168 78) (262 68 68 68 54 76 327 346) (327 67 324 324 76 67 67) (489 238 81 492 441 421) (122 319 68 68 68 70 62) (68 98 165 292 43 900 68 68) (156 184 181) (67 67 54 75 324 49 43 38 67 87) (46 68 68 97 165 173 68 68) (46 63 57) (68 68 54 76 325 94 68 68) (68) (67 67 67 67 97 164 667 67 67 133) (1151 1262 1197 87 197) (125 95 1076) (68 68 54 76 754) (68 68 325 325 68) (570) (192 67 67 70 62) (67 67 97 165 635 97 68) (184 94 175 60) (68 68 54 76 803 1040) (67 67 324 324 581 68) (67 67 70 62 113) (179) (68 68 98 165 687 67 29 135 146) (106 200) (83 100 162 129) (138 573 121 67 67 54 75) (68 146) (51 70 78 71 67 67 324 324 648) (68 68 70 62 160) (186) (68 68 98 165 673 68) (1114 30) (67 67 54 75 102 113) (102 97) (68 68 324 324 562 68 97 113) (189 216) (68 71 63 68 114 98) (67 67 97 165 667 149 60 67 92 100) (229 46 62 56 46) (68 68 54 76 92) (106) (68 68 325 325 378 67) (571) (159 67 67 70 62) (81 81 68 68 97 165 687 135 68) (138 56 46 68) (68 68 54 76 733 129) (129) (67 67 324 324 648 135 67) (151 46 44 33 59 43) (68 68 70 62 116) (192) (119 68 68 98 165 649 111 68) (159) (67 67 54 75 60 46 73 89) (59 232) (68 68 97 165 649 67 94) (146) (49 213 68 68 54 76 24) (100 146) (54 54 67 67 97 165 619 79 1322 68) (62 67 72 62 73 68 68 54 76 73))) :lvel (quote ((68 63 45 70 60 64 55 82 90) (54 103) (53 102 110) (113 70 90 41 49) (80 60 56 56 85 40) (119 80 90 60 51) (80 60 64 55 76 50 82 93) (118) (70 90 41 49 106 82) (80 60 56 56 68 61 40 49) (92) (85 90 60 51 89) (82) (70 60 64 55 89 47 50 93 96) (46 75 52 110 36 35 32 45) (60 55 59 74 55 112 96) (76 82 70 80 41 49) (110 40 108) (82 80 60 56 56) (95) (113 80 80 60 51) (112 50 116) (68 63 45 70 64 55 69) (80 70 41 49 53) (80 60 56 56 68 40 69) (80 60 60 51 77 78) (80 60 64 55 78 96 50) (54 103 68 63 45) (105 70 90 41 49 53 103) (80 60 56 56 82 105 40) (114 85 90 60 51) (32 52 70 60 64 55 72 77 60 50) (115) (39 38 33 36 31 70 90 41 49 39 111) (40 82) (62 23 40 19 19 30 23 80 60 56 56 74) (26 47 45 41 51 51 91 100) (87 80 90 60 51 89) (50 94) (107 67 112 80 60 64 55 82) (70 90 41 49 34 50 105) (106 65 85 63 67) (40 99 86 77) (123 32 52 80 60 64 55 82) (39 38 33 36 31 85 90 41 49 127 39) (80 60 64 55 89 115 50) (46 52 36 35 32 45) (90 41 49 60 55 59 74 55) (70 60 56 56 60 40) (82) (80 60 51 50) (70 60 64 55 89 86 60 60) (112 64 68 67 59) (80 99) (110 70 80 41 49) (80 60 56 56 40) (67 63 75 54 49 82) (110 80 80 60 51) (64 68 67 59 54 60 64 55 82 30 50 85) (118) (80 70 41 49 110) (80 60 56 56 85 40) (97 67 63 75 54 49) (80 60 60 51 85) (99) (70 60 64 55 106 82 30 92 82 50 82) (54 68 63 45) (94 114) (70 80 41 49 94 53) (113) (80 60 56 56 85 40) (80 80 60 51 119) (97) (113 80 64 55 78 50 82) (46 110 52 36 35 32 45) (70 90 41 49 80 60 55 59 74 55) (80 60 56 56 75 40) (90 60 51 76 90) (54 60 64 55 78 50 84) (51 37 36 69 112) (44) (80 70 41 49 116) (90) (80 60 56 56 82 40 102) (111 80 60 60 51) (80 60 64 55 78 89 60 50) (46 118 52 36 35 32 45) (70 90 41 49 115 60 55 59 74 55) (80 60 56 56 82 40) (92) (85 90 60 51 89) (82) (110 70 60 64 55 81 60 50 96) (86 51 48 58 69) (44) (70 80 41 49 73 107 80 71) (96 83) (85 74 40 60 98) (120 67 80 60 64 55 70) (117 80 80 41 49 50) (63 67) (80 64 55 78 50 108) (70 90 41 49) (80 56 56 82 89 50) (84) (85 90 55 60 51 30 76) (70 64 55 70 60 50) (119) (90 60 90 41 49 62 76 60 77) (26) (80 56 56 68 70 40) (67 58 63 117 56) (90 70 100 60 51 64 50) (70 79 106) (106 80 64 55 71) (90 70 70 41 49 68 118 84 82) (80 66) (90 56 56 68 75 117 102 70 49) (104) (97 90 100 60 51 68 67 115) (70 64 55 85 47 100 70) (121) (90 60 90 41 49 64 108 82 73) (80 56 56 68 75 70 40 49) (115) (120 90 70 100 60 51 67) (80 64 55 71 117 47 70) (51 48 58 69) (44) (90 70 80 41 49 70) (56 80 64 55 69 70 40) (109 90 70 100 41 49 62 64 72 75 82 81) (48 51 38 70 64 55 76 127 70) (51) (90 70 100 41 49 59) (104 80 56 56 71 50 40) (119 90 70 100 60 51 77) (115 80 64 55 70 50 40) (51 37 36 69) (44) (90 70 70 41 49 62 121 77) (90 56 56 68 115 70 40) (116) (119 90 100 60 51 64 41) (78) (68 67 59 80 64 55 69 49 98 79 70) (80 104 64) (95 90 70 80 41 49 68 116) (63 80 56 56 31 60 40) (67 104 63 75 54 49) (95 81 100 80 100 60 51) (90 64 55 78 30 118 70 60) (74 90 87) (90 80 41 49 78 42 43 43 70 55) (38 80 80 64 55 77 80 60) (51 48 51) (90 100 41 49 63 70 50 80) (40) (40 70 50 60 64 55 89 80 60 96) (51 37 36 69 117) (95 104 44) (80 80 41 49 110) (80 60 56 56 50) (82) (111 80 90 60 51) (70 60 64 55 78 92 50) (124 68 63 45) (70 80 41 49 110 53) (80 60 56 56 82 40) (80 80 60 51 45) (65) (70 60 64 55 76 50 60 89 93) (76 116) (76 99 84 103) (76 108 26 70 90 41 49) (40 101) (67 58 63 56 80 60 56 56 61) (80 90 60 51 120) (90) (80 60 64 55 82 50) (106 116) (70 90 41 49 76 64) (50 44) (80 60 56 56 85 40 83 64) (71 50) (90 60 51 90 66 85) (70 60 64 55 89 104 82 50 80 61) (115 51 48 51 38) (80 70 41 49 102) (99) (80 60 56 56 110 40) (82) (123 80 60 60 51) (49 40 70 60 64 55 76 78 50) (116 50 46 45) (80 90 41 49 120 113) (96) (70 60 56 56 61 108 40) (88 54 75 73 73 72) (78 90 60 51 83) (79) (56 80 60 64 55 82 67 50) (117) (70 90 41 49 64 72 75 115) (91 91) (80 60 64 55 82 40 79) (127) (55 127 85 90 41 49 43) (43 52) (32 52 80 60 64 55 72 55 114 50) (39 38 33 36 31 70 90 41 49 39))) :loffset (quote ((92 92 87 63 63 63 63 63 0) (40 0) (89 87 0) (43 0 0 0 0) (86 86 86 86 86 0) (14 0 0 0 0) (92 92 92 92 92 5 5 0) (0) (70 70 70 70 3 0) (100 100 100 100 100 100 11 0) (0) (100 100 100 100 0) (0) (94 94 94 94 94 27 5 2 0) (84 44 8 6 6 3 3 0) (48 43 43 40 32 13 0) (38 36 0 0 0 0) (25 19 0) (19 0 0 0 0) (0) (5 0 0 0 0) (19 16 0) (30 30 25 0 0 0 0) (68 68 68 68 0) (92 92 92 92 92 0 0) (92 92 92 92 92 0) (92 92 92 92 92 24 0) (59 35 5 5 0) (94 70 70 70 70 2 0) (89 89 89 89 89 6 0) (10 0 0 0 0) (94 92 89 89 89 89 89 8 3 0) (0) (79 73 68 65 65 54 54 54 54 54 0) (19 0) (32 29 29 24 21 19 13 0 0 0 0 0) (51 40 40 38 38 38 11 0) (54 0 0 0 0 0) (30 0) (68 30 17 0 0 0 0 0) (95 95 95 95 22 8 0) (76 16 0 0 0) (81 78 65 0) (35 5 3 0 0 0 0 0) (25 19 14 11 11 0 0 0 0 0 0) (90 90 90 90 90 17 0) (84 8 5 3 3 0) (70 70 70 16 10 10 8 0) (94 94 94 94 0 0) (0) (95 95 95 0) (95 95 95 95 95 3 0 0) (16 5 3 3 0) (86 0) (41 0 0 0 0) (87 87 87 87 0) (19 14 14 14 9 0) (11 0 0 0 0) (100 97 97 94 86 86 86 86 86 43 0 0) (0) (49 49 49 49 0) (92 92 92 92 92 0) (21 11 5 5 5 0) (57 57 57 57 0) (0) (97 97 97 97 97 97 54 27 11 6 0) (59 5 5 0) (100 0) (68 68 68 68 3 0) (0) (86 86 86 86 86 0) (100 100 100 100 0) (0) (89 87 87 87 87 0 0) (84 19 8 5 3 3 0) (70 70 70 70 70 16 11 11 8 0) (89 89 89 89 89 0) (89 89 89 89 0) (92 92 92 92 92 3 0) (16 16 13 3 0) (0) (86 86 86 86 0) (0) (98 98 98 98 98 6 0) (3 0 0 0 0) (92 92 92 92 92 22 6 0) (83 10 8 5 2 2 0) (71 71 71 71 17 17 11 11 9 0) (89 89 89 89 89 0) (0) (100 100 100 100 0) (0) (97 95 95 95 95 95 8 5 0) (62 14 14 11 0) (0) (87 87 87 87 87 6 0 0) (3 0) (98 76 68 41 0) (65 30 0 0 0 0 0) (97 87 87 87 87 0) (0 0) (89 89 89 89 2 0) (0 0 0 0) (90 90 90 90 3 0) (0) (100 100 100 100 100 11 0) (89 89 89 89 3 0) (0) (87 87 87 87 87 87 14 0 0) (0) (87 87 87 87 0 0) (8 8 8 5 0) (86 86 86 86 86 86 0) (22 22 0) (45 0 0 0 0) (70 70 70 70 70 70 21 5 0) (94 0) (100 100 100 100 100 30 16 11 0) (0) (92 65 65 65 65 65 5 0) (89 89 89 89 21 10 0) (0) (84 84 84 84 84 84 30 14 0) (100 100 100 100 100 14 14 0) (0) (21 0 0 0 0 0 0) (86 86 86 86 35 19 0) (13 13 11 0) (0) (0 0 0 0 0 0) (89 87 87 87 87 0 0) (97 86 86 86 86 86 86 19 19 10 0 0) (100 97 95 86 86 86 86 8 0) (0) (0 0 0 0 0 0) (97 89 89 89 89 0 0) (6 0 0 0 0 0 0) (94 89 89 89 89 0 0) (14 14 11 0) (0) (86 86 86 86 86 86 24 0) (89 89 89 89 14 0 0) (0) (75 54 54 54 54 54 0) (0) (100 100 97 89 89 89 89 32 21 3 0) (35 29 0) (98 65 65 65 65 65 65 0) (94 92 92 92 48 0 0) (11 8 5 5 5 0) (8 5 0 0 0 0 0) (92 92 92 92 49 17 0 0) (6 0 0) (98 98 98 98 98 38 38 30 6 0) (100 92 92 92 92 92 0 0) (13 2 0) (92 92 92 92 92 9 0 0) (0) (98 98 98 98 98 98 98 6 6 0) (22 22 19 8 0) (78 8 0) (5 5 5 5 0) (92 92 92 92 0) (0) (10 0 0 0 0) (92 92 92 92 92 14 0) (16 6 6 0) (67 67 67 67 24 0) (87 87 87 87 87 0) (89 89 89 89 0) (0) (94 94 94 94 94 8 8 5 0) (67 0) (100 94 5 0) (48 35 24 0 0 0 0) (32 0) (30 30 30 21 0 0 0 0 0) (92 92 92 92 0) (0) (86 86 86 86 86 0) (19 0) (89 89 89 89 0 0) (0 0) (89 89 89 89 89 0 0 0) (11 0) (89 89 89 0 0 0) (100 100 100 100 100 16 13 11 0 0) (22 16 5 3 0) (84 84 84 84 0) (0) (91 91 91 91 13 0) (0) (19 0 0 0 0) (95 95 92 92 92 92 92 22 0) (19 6 3 0) (83 83 83 83 37 0) (0) (92 92 92 92 92 27 0) (78 13 10 10 0 0) (62 62 62 62 0) (0) (95 92 92 92 92 92 30 0) (0) (87 87 87 87 19 19 11 0) (100 0) (97 97 97 97 97 8 0) (0) (83 62 56 56 56 56 0) (73 0) (95 92 90 90 90 90 90 11 6 0) (24 19 14 11 11 0 0 0 0 0))) :lchan (quote ((3 3 3 10 10 7 7 2 4) (3 4) (3 4 4) (4 10 10 7 7) (10 10 7 7 2 10) (4 10 10 7 7) (10 10 7 7 2 10 2 4) (4) (10 10 7 7 4 3) (10 10 7 7 3 2 10 3) (5) (10 10 7 7 5) (5) (10 10 7 7 2 3 10 4 5) (3 5 3 4 3 3 3 3) (3 3 3 3 3 4 5) (5 4 10 10 7 7) (4 10 5) (2 10 10 7 7) (4) (4 10 10 7 7) (4 10 4) (3 3 3 10 7 7 2) (10 10 7 7 3) (10 10 7 7 2 10 2) (10 10 7 7 2 2) (10 10 7 7 2 4 10) (3 4 3 3 3) (4 10 10 7 7 3 4) (10 10 7 7 2 4 10) (4 10 10 7 7) (3 3 10 10 7 7 2 4 2 10) (4) (3 3 3 3 3 10 10 7 7 3 4) (10 2) (5 3 3 3 3 3 3 10 10 7 7 2) (3 3 3 3 3 3 5 2) (5 10 10 7 7 2) (10 5) (5 3 4 10 10 7 7 2) (10 10 7 7 5 3 4) (4 5 4 3 3) (10 5 4 4) (4 3 3 10 10 7 7 2) (3 3 3 3 3 10 10 7 7 4 3) (10 10 7 7 2 4 10) (3 3 3 3 3 3) (10 7 7 3 3 3 3 3) (10 10 7 7 10 10) (2) (10 7 7 10) (10 10 7 7 2 4 10 10) (4 3 3 3 3) (4 4) (4 10 10 7 7) (10 10 7 7 10) (3 3 3 3 3 2) (4 10 10 7 7) (3 3 3 3 10 10 7 7 2 3 10 4) (4) (10 10 7 7 4) (10 10 7 7 2 10) (5 3 3 3 3 3) (10 10 7 7 5) (5) (10 10 7 7 4 2 3 5 2 10 4) (3 3 3 3) (4 4) (10 10 7 7 5 3) (4) (10 10 7 7 2 10) (10 10 7 7 4) (4) (4 10 7 7 2 10 2) (3 4 3 3 3 3 3) (10 10 7 7 2 3 3 3 3 3) (10 10 7 7 2 10) (10 7 7 2 10) (10 10 7 7 2 10 4) (3 3 3 3 4) (3) (10 10 7 7 4) (4) (10 10 7 7 2 10 4) (4 10 10 7 7) (10 10 7 7 2 4 2 10) (3 4 3 3 3 3 3) (10 10 7 7 4 3 3 3 3 3) (10 10 7 7 2 10) (5) (10 10 7 7 5) (5) (4 10 10 7 7 2 2 10 5) (5 3 3 3 3) (3) (10 10 7 7 2 4 5 2) (4 5) (4 5 10 4 4) (4 3 10 10 7 7 2) (4 10 10 7 7 3) (3 3) (10 7 7 2 10 4) (10 10 7 7) (10 7 7 2 3 10) (3) (10 10 10 7 7 10 3) (10 7 7 2 2 10) (4) (10 10 10 7 7 2 3 10 2) (3) (10 7 7 2 10 10) (3 3 3 4 3) (10 10 10 7 7 2 10) (10 2 4) (4 10 7 7 2) (10 10 10 7 7 2 4 5 3) (5 5) (10 7 7 3 2 4 5 10 3) (5) (5 10 10 7 7 2 5 4) (10 7 7 2 3 4 10) (4) (10 10 10 7 7 2 4 3 2) (10 7 7 3 2 10 10 3) (4) (4 10 10 10 7 7 2) (10 7 7 2 4 3 10) (3 3 3 3) (3) (10 10 10 7 7 2) (3 10 7 7 2 10 10) (4 10 10 10 7 7 2 3 3 3 4 2) (3 3 3 10 7 7 2 4 10) (3) (10 10 10 7 7 2) (4 10 7 7 2 10 10) (4 10 10 10 7 7 2) (4 10 7 7 2 10 10) (3 3 3 3) (3) (10 10 10 7 7 2 4 2) (10 7 7 2 4 10 10) (5) (4 10 10 7 7 2 5) (5) (3 3 3 10 7 7 2 5 4 2 10) (5 4 3) (5 10 10 10 7 7 2 4) (2 10 7 7 5 10 10) (3 4 3 3 3 3) (4 2 10 10 10 7 7) (10 7 7 2 3 4 10 10) (3 3 3) (10 10 7 7 2 3 3 3 10 2) (3 10 10 7 7 2 10 10) (3 3 3) (10 10 7 7 2 2 10 10) (10) (10 10 10 10 7 7 2 10 10 4) (3 3 3 3 4) (4 4 3) (10 10 7 7 4) (10 10 7 7 10) (2) (4 10 10 7 7) (10 10 7 7 2 4 10) (4 3 3 3) (10 10 7 7 4 3) (10 10 7 7 2 10) (10 10 7 7 5) (5) (10 10 7 7 2 10 2 5 4) (5 4) (3 4 5 4) (5 4 3 10 10 7 7) (10 5) (3 3 3 3 10 10 7 7 2) (10 10 7 7 4) (4) (10 10 7 7 2 10) (4 4) (10 10 7 7 3 3) (3 3) (10 10 7 7 2 10 3 3) (3 3) (10 7 7 10 3 3) (10 10 7 7 2 4 2 10 3 3) (4 3 3 3 3) (10 10 7 7 4) (4) (10 10 7 7 4 10) (2) (4 10 10 7 7) (3 3 10 10 7 7 2 4 10) (4 3 3 3) (10 10 7 7 4 5) (5) (10 10 7 7 2 5 10) (5 3 3 3 3 3) (10 10 7 7 5) (5) (3 10 10 7 7 2 5 10) (4) (10 10 7 7 3 3 3 4) (4 4) (10 10 7 7 2 10 4) (4) (3 4 10 10 7 7 3) (3 3) (3 3 10 10 7 7 2 3 4 10) (3 3 3 3 3 10 10 7 7 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil))) (setf (create-info copy) (quote ("2021/05/04 18:31:14" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 94 162) "tunisia" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 1 nil 0) (8 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (9 6 7 0 nil 0) (9 0 8 0 nil 0) (10 0 9 0 nil 0))) nil 6.18))
