; OM File Header - Saved 2021/03/30 15:37:45
; (6.18 :patc (om-make-point 10 110) (om-make-point 398 54) (om-make-point 470 689) "" 183 0 "2021/03/30 14:36:21" "2021/03/30 15:37:45")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-FTH")))(setf *om-current-persistent* (om-load-patch1 "_shift-posn" (quote ((let ((box (om-load-editor-box1 "SHIFTING PATH" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 198 26) (om-make-point 224 136) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400)) (quote (0 2 3 5 6 7 7 7 6 5 4 2 0 -2 -3 -5 -6 -7 -7 -7 -6 -5 -4 -2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 786 501) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SHIFTED CHORDS" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 150)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 200)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 137 443) (om-make-point 279 214) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6400 6700 6900) (6700 6900 7200 7600) (6900 7200 7600 7900) (7600 7900 8100 8400) (7900 8100 8400 8800) (8100 8400 8800 9100) (8100 8400 8800 9100) (8100 8400 8800 9100) (7900 8100 8400 8800) (7600 7900 8100 8400) (7200 7600 7900 8100) (6700 6900 7200 7600) (6000 6400 6700 6900) (5500 5700 6000 6400) (5200 5500 5700 6000) (4500 4800 5200 5500) (4300 4500 4800 5200) (4000 4300 4500 4800) (4000 4300 4500 4800) (4000 4300 4500 4800) (4300 4500 4800 5200) (4500 4800 5200 5500) (4800 5200 5500 5700) (5500 5700 6000 6400) (6000 6400 6700 6900))) :lonset (quote (0 150 300 450 600 750 900 1050 1200 1350 1500 1650 1800 1950 2100 2250 2400 2550 2700 2850 3000 3150 3300 3450 3600 3800)) :ldur (quote ((200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200) (200 200 200 200))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 25))) (om-make-point 218 175) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 252 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" -7) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 7))) (om-make-point 256 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PITCH COLLECTION" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 54 29) (om-make-point 131 197) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6400 6700 6900)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 3 (om-make-point 370 280) (om-make-point 400 25) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SHIFT-POSN" (quote shift-posn) (quote ((om-load-inputfun (quote input-funbox) "midicent list" "CHORD-LIST" (list 3600 5200 6700 7000)) (om-load-inputfun (quote input-funbox) "chordal step" "N-STEP" 1))) (om-make-point 169 365) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 1 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 2 4 0 nil 0) (5 1 6 0 nil 0) (3 0 6 1 nil 0))) nil 6.18))
