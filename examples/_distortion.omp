; OM File Header - Saved 2021/03/31 23:06:48
; (6.18 :patc (om-make-point 10 160) (om-make-point 142 68) (om-make-point 577 696) "" 183 0 "2021/03/31 10:38:43" "2021/03/31 23:06:48")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"_optimal-sorting.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "_distortion" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 110 30) (quote "distortion index") "" (om-make-point 202 384) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 162 387) (om-make-point 38 30) 1.5 "1.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DISTORTION" (quote distortion) (quote ((om-load-inputfun (quote input-funbox) "midicent list" "MC-LIST" (list 100 200 300 400 500)) (om-load-inputfun (quote input-funbox) "distortion index" "DIST" 1.125))) (om-make-point 126 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DISTORTED SEQUENCE OF CHORDS" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 42 490) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3868 4468 5958 8434 9846) (4050 4212 5552 8622 9852) (3734 4218 5766 8350 9496) (3940 5266 6226 8212 9064) (4448 5120 5632 8432 9032) (3874 4996 5590 9136 9386) (3948 4660 6672 9032 9790) (3708 4192 7060 9448 9724) (4546 5262 6970 8906 9958) (4126 5724 7874 9188 9752) (3928 6384 8060 8976 10046) (4256 5608 7722 8488 9546) (3912 5780 8230 8998 9110) (4204 6900 8240 8756 9378) (4758 6948 7666 8788 9010) (4420 6662 7606 9242 9290) (4932 6632 7296 8924 9274) (4916 6290 7236 8492 9522) (5418 5820 7548 7872 9012) (5594 6312 7074 7544 8772) (5112 6490 7046 7072 9268) (4294 6974 7038 7256 9516) (4280 6454 7026 7488 9916) (4396 5908 7462 7632 10292) (3736 5272 7654 7826 10244) (3612 5662 7498 7750 10000) (3770 6428 6714 7008 10208) (5074 6008 6182 6684 9946) (5080 5190 5894 6836 9448) (4604 4616 5302 7206 9758) (4030 4702 5812 6976 9938) (4078 4482 6160 7478 10292) (4050 4804 6906 8164 10486) (3764 5240 6386 8600 10410) (3722 5470 5740 8288 10718) (3870 6510 6748 7770 8956) (4092 6532 6746 7162 8480) (4132 5758 7138 7306 8172) (3640 6198 6998 7062 7954) (4734 5458 6796 6856 7186) (5266 5542 6478 6698 7328) (4444 4584 6418 6920 8150) (4288 4562 6540 6860 8476) (4070 4566 5448 6532 8586) (4126 4538 5568 6166 9024) (3772 4632 4732 6804 8786) (3608 4092 4974 6858 8666) (3642 4414 4608 5820 8238) (4196 4490 4518 5450 8052) (3852 4628 5500 6008 7606) (4072 4656 5076 6086 6878) (4288 4330 4372 5492 6502) (3820 4444 4936 5324 6172) (3910 3976 4042 5210 7174) (4302 4348 4622 6934 7270) (3936 4090 4248 7768 7926) (4122 4864 7686 7852 8892) (4582 5876 7678 7772 8548) (3662 7272 7962 8240 9266) (4704 7800 7964 8844 9058) (4646 7998 8856 9128 9658) (4392 7376 9096 9106 9786) (4286 6972 9152 9584 9646) (4414 6146 8152 9458 9684) (4868 5556 8208 8680 9228) (5434 5478 7258 8722 8868) (4400 7548 8304 8724 10188) (6004 7168 7316 8126 9432) (6438 7796 8260 9036 9232) (5282 6776 8826 9644 9896) (3922 6124 9278 10150 10414) (4696 4976 9658 10156 10228) (4366 4370 8150 10116 10368) (3766 4448 8506 9882 10260) (4370 7812 7846 10140 10214))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15100)) :ldur (quote ((300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "A SEQUENCE OF CHORDS" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 20 188) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3867 4268 5261 6912 7853) (4049 4158 5051 7098 7918) (3734 4057 5088 6811 7575) (3939 4823 5463 6787 7356) (4447 4896 5237 7103 7504) (3873 4622 5017 7382 7548) (3948 4423 5764 7337 7843) (3708 4030 5943 7534 7718) (4545 5023 6162 7452 8153) (4126 5191 6625 7500 7877) (3928 5565 6683 7293 8007) (4256 5157 6566 7077 7783) (3912 5158 6791 7303 7377) (4204 6001 6895 7239 7653) (4758 6218 6697 7444 7592) (4420 5914 6544 7635 7666) (4931 6065 6507 7593 7826) (4916 5832 6462 7300 7986) (5418 5686 6838 7054 7814) (5594 6072 6580 6894 7713) (5112 6030 6401 6419 7883) (4294 6080 6123 6269 7775) (4280 5730 6111 6418 8037) (4396 5404 6440 6553 8326) (3735 4759 6347 6462 8074) (3612 4979 6202 6371 7870) (3770 5542 5733 5929 8062) (5074 5697 5812 6147 8322) (5080 5153 5623 6251 7992) (4604 4612 5069 6339 8040) (4029 4478 5218 5993 7968) (4078 4347 5466 6344 8221) (4051 4553 5954 6793 8341) (3763 4748 5512 6987 8194) (3722 4887 5067 6766 8386) (3869 5630 5788 6470 7260) (4092 5719 5861 6138 7017) (4131 5216 6136 6247 6825) (3639 5345 5878 5921 6516) (4734 5217 6109 6149 6369) (5265 5450 6074 6220 6640) (4443 4537 5760 6094 6914) (4287 4470 5789 6002 7079) (4070 4401 4988 5711 7081) (4126 4400 5087 5486 7391) (3771 4345 4412 5793 7114) (3608 3930 4519 5775 6980) (3641 4156 4285 5094 6705) (4195 4391 4411 5031 6766) (3852 4369 4950 5289 6355) (4071 4461 4741 5414 5942) (4288 4316 4344 5090 5764) (3820 4236 4564 4823 5388) (3910 3954 3998 4776 6086) (4302 4332 4515 6057 6280) (3936 4038 4144 6491 6596) (4121 4616 6497 6608 7301) (4581 5444 6645 6708 7225) (3662 6068 6529 6714 7398) (4703 6768 6877 7463 7606) (4646 6881 7452 7634 7987) (4392 6381 7528 7534 7988) (4286 6077 7530 7818 7859) (4413 5568 6906 7776 7927) (4868 5326 7095 7409 7775) (5434 5463 6650 7626 7723) (4400 6498 7003 7282 8259) (6004 6780 6879 7419 8289) (6437 7343 7652 8169 8300) (5281 6277 7644 8189 8358) (3921 5389 7492 8074 8249) (4695 4882 8003 8335 8384) (4366 4368 6889 8199 8367) (3765 4220 6926 7843 8095) (4370 6664 6687 8217 8266))) :lonset (quote (0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400 4600 4800 5000 5200 5400 5600 5800 6000 6200 6400 6600 6800 7000 7200 7400 7600 7800 8000 8200 8400 8600 8800 9000 9200 9400 9600 9800 10000 10200 10400 10600 10800 11000 11200 11400 11600 11800 12000 12200 12400 12600 12800 13000 13200 13400 13600 13800 14000 14200 14400 14600 14800 15100)) :ldur (quote ((300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300) (300 300 300 300 300))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "_optimal-sorting" (quote ("elements" "examples" "_optimal-sorting")) (quote nil) (om-make-point 28 120) nil nil nil "_optimal-sorting" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 374 75) (quote "distortion applies spectral distortion to a list of midicents, $given a distortion index d. In other words, it expands or $compresses the intervals in relation to the lowest midicent $value in the input list.") "" (om-make-point 14 57) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 79 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 103 11) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 1 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0))) nil 6.18))
