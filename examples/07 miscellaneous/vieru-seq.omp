; OM File Header - Saved 2021/06/10 8:49:47
; (6.19 :patc (om-make-point 10 310) (om-make-point 305 80) (om-make-point 619 794) "" 183 0 "2021/05/21 9:50:19" "2021/06/10 8:45:31")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "vieru-seq" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 49 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 314 104) (quote "Takes the ascending modular differences between adjacent values of a given list. $$Based on Anatol Vieru's modal sequences.$") "" (om-make-point 12 57) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 64 11) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "vieru-seq->multi-seq" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 313 230) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0.3))) (om-make-point 338 637) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" (list 9000)) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 278 579) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" -100) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 284 538) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 428 659) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 299 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORLOOP" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 277 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 226 713) (om-make-point 267 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 194 631) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 137 541) (om-make-point 41 30) 150 "150" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 150) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 214 575) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 217 498) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 232 839) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 50 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 144 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 22 372) (om-make-point 180 57) nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 218 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 204 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote rotations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))))) (om-make-point 115 183) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 286 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "num-repetitions" (om-load-patch-abs1 "num-repetitions" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 19 259) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 51 54) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 33 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST-LCM" (quote list-lcm) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 57 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 13 40) (om-make-point 29 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (list (quote function) (quote +))) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 10 71) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 25 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (6 0 2 1 nil 0) (6 0 3 0 nil 0) (4 0 5 0 nil 0) (5 0 6 0 nil 0) (1 0 6 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 200 325)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 978/5 508/5) nil nil nil "num-repetitions"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 90 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 98 31) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 279 918) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 165 920) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((9 0 0 0 nil 0) (2 0 1 1 nil 0) (5 0 2 1 nil 0) (5 0 3 0 nil 0) (18 0 4 0 nil 0) (4 0 5 1 nil 0) (1 0 6 1 nil 0) (7 0 6 2 nil 0) (0 0 6 3 nil 0) (3 0 6 6 nil 0) (9 0 7 1 nil 0) (8 0 9 0 nil 0) (10 0 9 1 nil 0) (16 0 10 0 nil 0) (6 0 11 0 nil 0) (13 0 12 0 nil 0) (17 0 13 0 nil 0) (12 0 14 0 nil 0) (20 0 14 1 nil 0) (13 0 14 2 nil 0) (19 0 15 0 nil 0) (14 0 16 0 nil 0) (15 0 16 1 nil 0) (20 0 17 0 nil 0) (19 0 18 0 nil 0) (21 0 19 0 nil 0) (21 0 20 0 nil 0) (11 1 22 0 nil 0) (11 0 23 0 nil 0))) 1 "vieru-seq->multi-seq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 73 30) (quote "sequence") "" (om-make-point 335 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 30) (quote "number of tiers") "" (om-make-point 493 55) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIERU-SEQ" (quote vieru-seq) (quote ((om-load-inputfun (quote input-funbox) "list" "SEQ" (list 4 1 2 1 4)) (om-load-inputfun (quote input-funbox) "integer" "N-TIERS" 12))) (om-make-point 435 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 359 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 354 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 46 291) (om-make-point 492 499) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000) (9000))) :lonset (quote (0 600 750 1050 1200 1800 2400 2550 2850 3000 3600 4200 4350 4650 4800 5400 6000 6150 6450 6600 7200 7800 7950 8250 8400 9000 9600 9750 10050 10200 10800 11400 11550 11850 12000 12600 13200 13350 13650 13800 14400 15000 15150 15450 15600 16200 16800 16950 17250 17400 18000 18600 18750 19050 19200 19800 20400 20550 20850 21000 21180)) :ldur (quote ((180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900) (8900))) :lonset (quote (0 1350 1500 3150 3600 3600 4950 5100 6750 7200 7200 8550 8700 10350 10800 10800 12150 12300 13950 14400 14400 15750 15900 17550 18000 18000 19350 19500 21150 21600 21600)) :ldur (quote ((405) (45) (495) (135) (0) (405) (45) (495) (135) (0) (405) (45) (495) (135) (0) (405) (45) (495) (135) (0) (405) (45) (495) (135) (0) (405) (45) (495) (135) (0))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800) (8800))) :lonset (quote (0 1350 1950 3450 4050 5400 6750 7350 8850 9450 10800 12150 12750 14250 14850 16200 17550 18150 19650 20250 20655)) :ldur (quote ((405) (180) (450) (180) (405) (405) (180) (450) (180) (405) (405) (180) (450) (180) (405) (405) (180) (450) (180) (405))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700) (8700))) :lonset (quote (0 900 1800 2550 2550 3600 4500 5400 6150 6150 7200 8100 9000 9750 9750 10800 11700 12600 13350 13350 14400 15300 16200 16950 16950 18000 18900 19800 20550 20550 20865)) :ldur (quote ((270) (270) (225) (0) (315) (270) (270) (225) (0) (315) (270) (270) (225) (0) (315) (270) (270) (225) (0) (315) (270) (270) (225) (0) (315) (270) (270) (225) (0) (315))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600) (8600))) :lonset (quote (0 1050 2700 2700 4350 5400 6450 8100 8100 9750 10800 11850 13500 13500 15150 16200 17250 18900 18900 20550 20865)) :ldur (quote ((315) (495) (0) (495) (315) (315) (495) (0) (495) (315) (315) (495) (0) (495) (315) (315) (495) (0) (495) (315))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500) (8500))) :lonset (quote (0 1650 2850 2850 3450 3600 5250 6450 6450 7050 7200 8850 10050 10050 10650 10800 12450 13650 13650 14250 14400 16050 17250 17250 17850 18000 19650 20850 20850 21450 21495)) :ldur (quote ((495) (360) (0) (180) (45) (495) (360) (0) (180) (45) (495) (360) (0) (180) (45) (495) (360) (0) (180) (45) (495) (360) (0) (180) (45) (495) (360) (0) (180) (45))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400) (8400))) :lonset (quote (0 600 1950 3450 4800 5400 6000 7350 8850 10200 10800 11400 12750 14250 15600 16200 16800 18150 19650 21000 21180)) :ldur (quote ((180) (405) (450) (405) (180) (180) (405) (450) (405) (180) (180) (405) (450) (405) (180) (180) (405) (450) (405) (180))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300) (8300))) :lonset (quote (0 1050 1050 1800 1950 3600 4650 4650 5400 5550 7200 8250 8250 9000 9150 10800 11850 11850 12600 12750 14400 15450 15450 16200 16350 18000 19050 19050 19800 19950 20445)) :ldur (quote ((315) (0) (225) (45) (495) (315) (0) (225) (45) (495) (315) (0) (225) (45) (495) (315) (0) (225) (45) (495) (315) (0) (225) (45) (495) (315) (0) (225) (45) (495))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200) (8200))) :lonset (quote (0 750 1950 3450 4650 5400 6150 7350 8850 10050 10800 11550 12750 14250 15450 16200 16950 18150 19650 20850 21075)) :ldur (quote ((225) (360) (450) (360) (225) (225) (360) (450) (360) (225) (225) (360) (450) (360) (225) (225) (360) (450) (360) (225))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100) (8100))) :lonset (quote (0 0 450 750 2250 3600 3600 4050 4350 5850 7200 7200 7650 7950 9450 10800 10800 11250 11550 13050 14400 14400 14850 15150 16650 18000 18000 18450 18750 20250 20655)) :ldur (quote ((0) (135) (90) (450) (405) (0) (135) (90) (450) (405) (0) (135) (90) (450) (405) (0) (135) (90) (450) (405) (0) (135) (90) (450) (405) (0) (135) (90) (450) (405))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000) (8000))) :lonset (quote (0 450 2100 3300 4950 5400 5850 7500 8700 10350 10800 11250 12900 14100 15750 16200 16650 18300 19500 21150 21285)) :ldur (quote ((135) (495) (360) (495) (135) (135) (495) (360) (495) (135) (135) (495) (360) (495) (135) (135) (495) (360) (495) (135))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11) (11))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900))) :lonset (quote (0 1200 2550 3000 3600 3600 4800 6150 6600 7200 7200 8400 9750 10200 10800 10800 12000 13350 13800 14400 14400 15600 16950 17400 18000 18000 19200 20550 21000 21600 21600)) :ldur (quote ((360) (405) (135) (180) (0) (360) (405) (135) (180) (0) (360) (405) (135) (180) (0) (360) (405) (135) (180) (0) (360) (405) (135) (180) (0) (360) (405) (135) (180) (0))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800) (7800))) :lonset (quote (0 1200 1350 2250 2400 3600 4800 4950 5850 6000 7200 8400 8550 9450 9600 10800 12000 12150 13050 13200 14400 15600 15750 16650 16800 18000 19200 19350 20250 20400 20760)) :ldur (quote ((360) (45) (270) (45) (360) (360) (45) (270) (45) (360) (360) (45) (270) (45) (360) (360) (45) (270) (45) (360) (360) (45) (270) (45) (360) (360) (45) (270) (45) (360))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700) (7700))) :lonset (quote (0 750 1800 2850 2850 3600 4350 5400 6450 6450 7200 7950 9000 10050 10050 10800 11550 12600 13650 13650 14400 15150 16200 17250 17250 18000 18750 19800 20850 20850 21075)) :ldur (quote ((225) (315) (315) (0) (225) (225) (315) (315) (0) (225) (225) (315) (315) (0) (225) (225) (315) (315) (0) (225) (225) (315) (315) (0) (225) (225) (315) (315) (0) (225))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600) (7600))) :lonset (quote (0 750 750 1050 1050 1800 2550 2550 2850 2850 3600 4350 4350 4650 4650 5400 6150 6150 6450 6450 7200 7950 7950 8250 8250 9000 9750 9750 10050 10050 10800 11550 11550 11850 11850 12600 13350 13350 13650 13650 14400 15150 15150 15450 15450 16200 16950 16950 17250 17250 18000 18750 18750 19050 19050 19800 20550 20550 20850 20850 21075)) :ldur (quote ((225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225) (225) (0) (90) (0) (225))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500) (7500))) :lonset (quote (0 1500 2250 2250 3300 3600 5100 5850 5850 6900 7200 8700 9450 9450 10500 10800 12300 13050 13050 14100 14400 15900 16650 16650 17700 18000 19500 20250 20250 21300 21390)) :ldur (quote ((450) (225) (0) (315) (90) (450) (225) (0) (315) (90) (450) (225) (0) (315) (90) (450) (225) (0) (315) (90) (450) (225) (0) (315) (90) (450) (225) (0) (315) (90))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16) (16))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400))) :lonset (quote (0 1050 2100 3300 4350 5400 6450 7500 8700 9750 10800 11850 12900 14100 15150 16200 17250 18300 19500 20550 20865)) :ldur (quote ((315) (315) (360) (315) (315) (315) (315) (360) (315) (315) (315) (315) (360) (315) (315) (315) (315) (360) (315) (315))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17) (17))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300) (7300))) :lonset (quote (0 0 0 0 150 1800 1800 1800 1800 1950 3600 3600 3600 3600 3750 5400 5400 5400 5400 5550 7200 7200 7200 7200 7350 9000 9000 9000 9000 9150 10800 10800 10800 10800 10950 12600 12600 12600 12600 12750 14400 14400 14400 14400 14550 16200 16200 16200 16200 16350 18000 18000 18000 18000 18150 19800 19800 19800 19800 19950 20445)) :ldur (quote ((0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495) (0) (0) (0) (45) (495))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18) (18))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200) (7200))) :lonset (quote (0 0 150 1650 1800 1800 1800 1950 3450 3600 3600 3600 3750 5250 5400 5400 5400 5550 7050 7200 7200 7200 7350 8850 9000 9000 9000 9150 10650 10800 10800 10800 10950 12450 12600 12600 12600 12750 14250 14400 14400 14400 14550 16050 16200 16200 16200 16350 17850 18000 18000 18000 18150 19650 19800 19800 19800 19950 21450 21600 21600)) :ldur (quote ((0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0) (0) (45) (450) (45) (0))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19) (19))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100) (7100))) :lonset (quote (0 0 150 1500 1950 3600 3600 3750 5100 5550 7200 7200 7350 8700 9150 10800 10800 10950 12300 12750 14400 14400 14550 15900 16350 18000 18000 18150 19500 19950 20445)) :ldur (quote ((0) (45) (405) (135) (495) (0) (45) (405) (135) (495) (0) (45) (405) (135) (495) (0) (45) (405) (135) (495) (0) (45) (405) (135) (495) (0) (45) (405) (135) (495))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20) (20))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000) (7000))) :lonset (quote (0 150 1350 2250 3450 3600 3750 4950 5850 7050 7200 7350 8550 9450 10650 10800 10950 12150 13050 14250 14400 14550 15750 16650 17850 18000 18150 19350 20250 21450 21495)) :ldur (quote ((45) (360) (270) (360) (45) (45) (360) (270) (360) (45) (45) (360) (270) (360) (45) (45) (360) (270) (360) (45) (45) (360) (270) (360) (45) (45) (360) (270) (360) (45))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21) (21))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900))) :lonset (quote (0 1050 2550 2850 3600 3600 4650 6150 6450 7200 7200 8250 9750 10050 10800 10800 11850 13350 13650 14400 14400 15450 16950 17250 18000 18000 19050 20550 20850 21600 21600)) :ldur (quote ((315) (450) (90) (225) (0) (315) (450) (90) (225) (0) (315) (450) (90) (225) (0) (315) (450) (90) (225) (0) (315) (450) (90) (225) (0) (315) (450) (90) (225) (0))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22) (22))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800) (6800))) :lonset (quote (0 1050 1500 2100 2550 3600 4650 5100 5700 6150 7200 8250 8700 9300 9750 10800 11850 12300 12900 13350 14400 15450 15900 16500 16950 18000 19050 19500 20100 20550 20865)) :ldur (quote ((315) (135) (180) (135) (315) (315) (135) (180) (135) (315) (315) (135) (180) (135) (315) (315) (135) (180) (135) (315) (315) (135) (180) (135) (315) (315) (135) (180) (135) (315))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23) (23))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700))) :lonset (quote (0 150 1800 2400 2400 3600 3750 5400 6000 6000 7200 7350 9000 9600 9600 10800 10950 12600 13200 13200 14400 14550 16200 16800 16800 18000 18150 19800 20400 20400 20760)) :ldur (quote ((45) (495) (180) (0) (360) (45) (495) (180) (0) (360) (45) (495) (180) (0) (360) (45) (495) (180) (0) (360) (45) (495) (180) (0) (360) (45) (495) (180) (0) (360))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24) (24))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600) (6600))) :lonset (quote (0 1200 1950 3450 4200 5400 6600 7350 8850 9600 10800 12000 12750 14250 15000 16200 17400 18150 19650 20400 20760)) :ldur (quote ((360) (225) (450) (225) (360) (360) (225) (450) (225) (360) (360) (225) (450) (225) (360) (360) (225) (450) (225) (360))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25) (25))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500) (6500))) :lonset (quote (0 1050 1500 1500 2850 3600 4650 5100 5100 6450 7200 8250 8700 8700 10050 10800 11850 12300 12300 13650 14400 15450 15900 15900 17250 18000 19050 19500 19500 20850 21075)) :ldur (quote ((315) (135) (0) (405) (225) (315) (135) (0) (405) (225) (315) (135) (0) (405) (225) (315) (135) (0) (405) (225) (315) (135) (0) (405) (225) (315) (135) (0) (405) (225))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26) (26))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400))) :lonset (quote (0 1350 2550 2850 4050 5400 6750 7950 8250 9450 10800 12150 13350 13650 14850 16200 17550 18750 19050 20250 20655)) :ldur (quote ((405) (360) (90) (360) (405) (405) (360) (90) (360) (405) (405) (360) (90) (360) (405) (405) (360) (90) (360) (405))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27) (27))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300) (6300))) :lonset (quote (0 150 150 1800 2700 3600 3750 3750 5400 6300 7200 7350 7350 9000 9900 10800 10950 10950 12600 13500 14400 14550 14550 16200 17100 18000 18150 18150 19800 20700 20970)) :ldur (quote ((45) (0) (495) (270) (270) (45) (0) (495) (270) (270) (45) (0) (495) (270) (270) (45) (0) (495) (270) (270) (45) (0) (495) (270) (270) (45) (0) (495) (270) (270))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28) (28))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200))) :lonset (quote (0 1650 2700 2700 3750 5400 7050 8100 8100 9150 10800 12450 13500 13500 14550 16200 17850 18900 18900 19950 20445)) :ldur (quote ((495) (315) (0) (315) (495) (495) (315) (0) (315) (495) (495) (315) (0) (315) (495) (495) (315) (0) (315) (495))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29) (29))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100) (6100))) :lonset (quote (0 0 1200 1950 3000 3600 3600 4800 5550 6600 7200 7200 8400 9150 10200 10800 10800 12000 12750 13800 14400 14400 15600 16350 17400 18000 18000 19200 19950 21000 21180)) :ldur (quote ((0) (360) (225) (315) (180) (0) (360) (225) (315) (180) (0) (360) (225) (315) (180) (0) (360) (225) (315) (180) (0) (360) (225) (315) (180) (0) (360) (225) (315) (180))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000))) :lonset (quote (0 1200 2550 2850 4200 5400 6600 7950 8250 9600 10800 12000 13350 13650 15000 16200 17400 18750 19050 20400 20760)) :ldur (quote ((360) (405) (90) (405) (360) (360) (405) (90) (405) (360) (360) (405) (90) (405) (360) (360) (405) (90) (405) (360))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31) (31))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900) (5900))) :lonset (quote (0 150 900 1950 3600 3600 3750 4500 5550 7200 7200 7350 8100 9150 10800 10800 10950 11700 12750 14400 14400 14550 15300 16350 18000 18000 18150 18900 19950 21600 21600)) :ldur (quote ((45) (225) (315) (495) (0) (45) (225) (315) (495) (0) (45) (225) (315) (495) (0) (45) (225) (315) (495) (0) (45) (225) (315) (495) (0) (45) (225) (315) (495) (0))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32) (32))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800) (5800))) :lonset (quote (0 150 750 1050 1650 1800 1950 2550 2850 3450 3600 3750 4350 4650 5250 5400 5550 6150 6450 7050 7200 7350 7950 8250 8850 9000 9150 9750 10050 10650 10800 10950 11550 11850 12450 12600 12750 13350 13650 14250 14400 14550 15150 15450 16050 16200 16350 16950 17250 17850 18000 18150 18750 19050 19650 19800 19950 20550 20850 21450 21495)) :ldur (quote ((45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45) (45) (180) (90) (180) (45))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33) (33))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700) (5700))) :lonset (quote (0 1500 1800 3150 3150 3600 5100 5400 6750 6750 7200 8700 9000 10350 10350 10800 12300 12600 13950 13950 14400 15900 16200 17550 17550 18000 19500 19800 21150 21150 21285)) :ldur (quote ((450) (90) (405) (0) (135) (450) (90) (405) (0) (135) (450) (90) (405) (0) (135) (450) (90) (405) (0) (135) (450) (90) (405) (0) (135) (450) (90) (405) (0) (135))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34) (34))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600) (5600))) :lonset (quote (0 450 1500 2100 3150 3600 4050 5100 5700 6750 7200 7650 8700 9300 10350 10800 11250 12300 12900 13950 14400 14850 15900 16500 17550 18000 18450 19500 20100 21150 21285)) :ldur (quote ((135) (315) (180) (315) (135) (135) (315) (180) (315) (135) (135) (315) (180) (315) (135) (135) (315) (180) (315) (135) (135) (315) (180) (315) (135) (135) (315) (180) (315) (135))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35) (35))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500) (5500))) :lonset (quote (0 450 1650 1650 2250 3600 4050 5250 5250 5850 7200 7650 8850 8850 9450 10800 11250 12450 12450 13050 14400 14850 16050 16050 16650 18000 18450 19650 19650 20250 20655)) :ldur (quote ((135) (360) (0) (180) (405) (135) (360) (0) (180) (405) (135) (360) (0) (180) (405) (135) (360) (0) (180) (405) (135) (360) (0) (180) (405) (135) (360) (0) (180) (405))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36) (36))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400) (5400))) :lonset (quote (0 600 1350 2250 3000 3600 4200 4950 5850 6600 7200 7800 8550 9450 10200 10800 11400 12150 13050 13800 14400 15000 15750 16650 17400 18000 18600 19350 20250 21000 21180)) :ldur (quote ((180) (225) (270) (225) (180) (180) (225) (270) (225) (180) (180) (225) (270) (225) (180) (180) (225) (270) (225) (180) (180) (225) (270) (225) (180) (180) (225) (270) (225) (180))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37) (37))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (5300))) :lonset (quote (0 1650 1650 1800 1950 3600 5250 5250 5400 5550 7200 8850 8850 9000 9150 10800 12450 12450 12600 12750 14400 16050 16050 16200 16350 18000 19650 19650 19800 19950 20445)) :ldur (quote ((495) (0) (45) (45) (495) (495) (0) (45) (45) (495) (495) (0) (45) (45) (495) (495) (0) (45) (45) (495) (495) (0) (45) (45) (495) (495) (0) (45) (45) (495))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38) (38))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200) (5200))) :lonset (quote (0 150 150 1650 1650 1800 1950 1950 3450 3450 3600 3750 3750 5250 5250 5400 5550 5550 7050 7050 7200 7350 7350 8850 8850 9000 9150 9150 10650 10650 10800 10950 10950 12450 12450 12600 12750 12750 14250 14250 14400 14550 14550 16050 16050 16200 16350 16350 17850 17850 18000 18150 18150 19650 19650 19800 19950 19950 21450 21450 21495)) :ldur (quote ((45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45) (45) (0) (450) (0) (45))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39) (39))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100) (5100))) :lonset (quote (0 0 1650 3150 3450 3600 3600 5250 6750 7050 7200 7200 8850 10350 10650 10800 10800 12450 13950 14250 14400 14400 16050 17550 17850 18000 18000 19650 21150 21450 21495)) :ldur (quote ((0) (495) (450) (90) (45) (0) (495) (450) (90) (45) (0) (495) (450) (90) (45) (0) (495) (450) (90) (45) (0) (495) (450) (90) (45) (0) (495) (450) (90) (45))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (5000) (5000) (5000) (5000) (5000) (5000) (5000) (5000) (5000) (5000) (5000) (5000) (5000) (5000))) :lonset (quote (0 1650 3300 3900 5550 7200 8850 10500 11100 12750 14400 16050 17700 18300 19950 20445)) :ldur (quote ((495) (495) (180) (495) (495) (495) (495) (180) (495) (495) (495) (495) (180) (495) (495))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900) (4900))) :lonset (quote (0 0 750 1800 1800 1800 1800 2550 3600 3600 3600 3600 4350 5400 5400 5400 5400 6150 7200 7200 7200 7200 7950 9000 9000 9000 9000 9750 10800 10800 10800 10800 11550 12600 12600 12600 12600 13350 14400 14400 14400 14400 15150 16200 16200 16200 16200 16950 18000 18000 18000 18000 18750 19800 19800 19800 19800 20550 21600 21600 21600)) :ldur (quote ((0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0) (0) (225) (315) (0) (0))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42) (42))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800) (4800))) :lonset (quote (0 0 750 1050 1800 1800 1800 2550 2850 3600 3600 3600 4350 4650 5400 5400 5400 6150 6450 7200 7200 7200 7950 8250 9000 9000 9000 9750 10050 10800 10800 10800 11550 11850 12600 12600 12600 13350 13650 14400 14400 14400 15150 15450 16200 16200 16200 16950 17250 18000 18000 18000 18750 19050 19800 19800 19800 20550 20850 21600 21600)) :ldur (quote ((0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0) (0) (225) (90) (225) (0))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43) (43))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700) (4700))) :lonset (quote (0 1350 1800 2850 2850 3600 4950 5400 6450 6450 7200 8550 9000 10050 10050 10800 12150 12600 13650 13650 14400 15750 16200 17250 17250 18000 19350 19800 20850 20850 21075)) :ldur (quote ((405) (135) (315) (0) (225) (405) (135) (315) (0) (225) (405) (135) (315) (0) (225) (405) (135) (315) (0) (225) (405) (135) (315) (0) (225) (405) (135) (315) (0) (225))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600) (4600))) :lonset (quote (0 750 1350 2250 2850 3600 4350 4950 5850 6450 7200 7950 8550 9450 10050 10800 11550 12150 13050 13650 14400 15150 15750 16650 17250 18000 18750 19350 20250 20850 21075)) :ldur (quote ((225) (180) (270) (180) (225) (225) (180) (270) (180) (225) (225) (180) (270) (180) (225) (225) (180) (270) (180) (225) (225) (180) (270) (180) (225) (225) (180) (270) (180) (225))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45) (45))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500) (4500))) :lonset (quote (0 1500 1650 1650 3300 3600 5100 5250 5250 6900 7200 8700 8850 8850 10500 10800 12300 12450 12450 14100 14400 15900 16050 16050 17700 18000 19500 19650 19650 21300 21390)) :ldur (quote ((450) (45) (0) (495) (90) (450) (45) (0) (495) (90) (450) (45) (0) (495) (90) (450) (45) (0) (495) (90) (450) (45) (0) (495) (90) (450) (45) (0) (495) (90))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46) (46))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400) (4400))) :lonset (quote (0 1650 2100 3300 3750 5400 7050 7500 8700 9150 10800 12450 12900 14100 14550 16200 17850 18300 19500 19950 20445)) :ldur (quote ((495) (135) (360) (135) (495) (495) (135) (360) (135) (495) (495) (135) (360) (135) (495) (495) (135) (360) (135) (495))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47) (47))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300) (4300))) :lonset (quote (0 1200 1200 1800 2550 3600 4800 4800 5400 6150 7200 8400 8400 9000 9750 10800 12000 12000 12600 13350 14400 15600 15600 16200 16950 18000 19200 19200 19800 20550 20865)) :ldur (quote ((360) (0) (180) (225) (315) (360) (0) (180) (225) (315) (360) (0) (180) (225) (315) (360) (0) (180) (225) (315) (360) (0) (180) (225) (315) (360) (0) (180) (225) (315))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48) (48))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200) (4200))) :lonset (quote (0 600 750 1050 1200 1800 2400 2550 2850 3000 3600 4200 4350 4650 4800 5400 6000 6150 6450 6600 7200 7800 7950 8250 8400 9000 9600 9750 10050 10200 10800 11400 11550 11850 12000 12600 13200 13350 13650 13800 14400 15000 15150 15450 15600 16200 16800 16950 17250 17400 18000 18600 18750 19050 19200 19800 20400 20550 20850 21000 21180)) :ldur (quote ((180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180) (180) (45) (90) (45) (180))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49) (49))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 1110 767) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 26) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 460 59) (om-make-point 34 30) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 334 60) (om-make-point 80 30) (list 4 1 2 1 4) "(4 1 2 1 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 3 0 nil 0) (11 0 6 0 nil 0) (10 0 6 1 nil 0) (11 0 7 0 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (3 0 9 1 nil 0))) nil 6.19))
