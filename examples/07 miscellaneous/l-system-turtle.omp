; OM File Header - Saved 2021/06/02 13:20:43
; (6.18 :patc (om-make-point 10 10) (om-make-point 334 41) (om-make-point 866 866) "" 183 0 "2021/05/09 8:53:08" "2021/06/02 13:20:43")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "l-system-turtle" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 74 11) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 315 147) (quote "l-system (or lindenmayer system) outputs a deterministically generated sequence of elements, based on a given an axiom, list of production rules, and number of generations.$$In this example, the output sequence is used as Turtle graphic instructions, to draw into a BPC, using 2D-Turtle.") "" (om-make-point 14 57) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 59 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 674 218) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 570 215) (om-make-point 37 30) (list (quote x)) "(x)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 404 214) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 121 208) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 296 215) (om-make-point 34 30) (list (quote f)) "(f)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "rules-C" (let ((copy (make-instance (quote omlistinstance) :name "rules-C" :icon 129))) (setf (instance copy) (list (list (quote x) (list (quote f) (quote -) (quote [) (quote [) (quote x) (quote ]) (quote +) (quote x) (quote ]) (quote +) (quote f) (quote [) (quote +) (quote f) (quote x) (quote ]) (quote -) (quote x))) (list (quote f) (list (quote f) (quote f))))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2021/05/09 13:52:52" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 620 190) "rules-C" (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "rules-B" (let ((copy (make-instance (quote omlistinstance) :name "rules-B" :icon 129))) (setf (instance copy) (list (list (quote f) (list (quote f) (quote [) (quote +) (quote f) (quote f) (quote ]) (quote [) (quote -) (quote f) (quote f) (quote ]) (quote f) (quote [) (quote -) (quote f) (quote ]) (quote [) (quote +) (quote f) (quote ]) (quote f))))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2021/05/09 13:52:26" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 344 189) "rules-B" (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 7 206) (om-make-point 44 30) (list (quote x) (quote f)) "(x f)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "rules-A" (let ((copy (make-instance (quote omlistinstance) :name "rules-A" :icon 129))) (setf (instance copy) (list (list (quote x) (list (quote x) (quote +) (quote y) (quote f) (quote +) (quote +) (quote y) (quote f) (quote -) (quote f) (quote x) (quote -) (quote -) (quote f) (quote x) (quote f) (quote x) (quote -) (quote y) (quote f) (quote +))) (list (quote y) (list (quote -) (quote f) (quote x) (quote +) (quote y) (quote f) (quote y) (quote f) (quote +) (quote +) (quote y) (quote f) (quote +) (quote f) (quote x) (quote -) (quote -) (quote f) (quote x) (quote -) (quote y))))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2021/05/09 13:52:02" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 66 190) "rules-A" (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "L-SYSTEM 3" (quote l-system) (quote ((om-load-inputfun (quote input-funbox) "atom" "AXIOM" (list (quote x))) (om-load-inputfun (quote input-funbox) "list" "RULES" (list (list (quote x) (list (quote f) (quote -) (quote [) (quote [) (quote x) (quote ]) (quote +) (quote x) (quote ]) (quote +) (quote f) (quote [) (quote +) (quote f) (quote x) (quote ]) (quote -) (quote x))) (list (quote f) (list (quote f) (quote f))))) (om-load-inputfun (quote input-funbox) "integer" "GENERATIONS" 4))) (om-make-point 612 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC 3" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 605 437) (om-make-point 245 426) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 4 5 5 4 4 5 4 4 5 5 6 6 6 5 6 7 2 2 3 4 4 3 3 3 3 3 3 3 3 3 3 4 4 5 2 2 3 3 3 3 3 3 3 3 3 4 4 3 3 3 3 3 3 2 2 2 1 3 4 4 4 4 5 6 7 5 6 6 5 6 6 7 7 7 7 7 8 8 0 0 0 0 0 1 1 2 3 1 2 2 1 2 2 2 2 2 1 2 3 3 0 0 0 1 1 0 0 0 0 0 0 -1 -1 -2 -2 0 1 1 0 0 0 0 0 -1 -1 -2 -2 -2 -2 -2 -3 -3 -3 -4 -3 -3 -4 -4 -5 -6 -7 -3 -3 -3 0 1 1 2 3 1 2 2 1 2 2 2 2 2 1 2 3 3 0 0 0 0 0 0 0 0 0 -1 -1 -2 -2 -2 -3 -3 -3 -4 -4 -5 -5 -5 -4 -4 -4 -5 -5 -5 -5 -5 -5 -5 -6 -6 -7 -4 -4 -4 -5 -5 -5 -5 -6 -6 -6 -7 -6 -6 -7 -8 -8 -9 -10 -6 -6 -7 -5 -5 -6 -6 -7 -8 -8 -9 -10 -10 -11 -11 -12 -11 -12 -13 -11 -12 -13 -14 -15 -15 -16 -12 -13 -13 -6 -6 -6 -5 -5 -6 -6 -7 -6 -6 -7 -7 -7 -8 -8 -6 -5 -5 0 1 1 2 2 3 4 5 5 4 4 5 4 4 5 5 6 6 6 5 6 7 2 2 3 4 4 3 3 3 3 3 3 3 3 3 3 4 4 5 2 2 3 3 3 3 3 3 3 3 3 4 4 3 3 3 3 3 3 2 2 2 1 3 4 4 4 4 5 6 7 5 6 6 5 6 6 7 7 7 7 7 8 8)) (quote (0 1 2 3 4 5 6 7 8 9 10 11 12 12 13 13 14 15 14 15 15 14 15 15 16 17 18 19 15 15 16 13 14 14 15 16 14 15 16 14 15 16 17 18 19 20 16 17 18 13 14 14 15 16 17 18 19 20 21 22 23 24 22 23 24 22 23 24 25 26 27 28 24 25 26 16 17 17 18 18 18 18 19 18 18 19 20 21 22 23 19 19 20 9 10 11 12 13 14 15 15 16 15 16 17 15 16 17 18 19 20 21 16 17 18 13 14 15 16 17 15 16 17 15 16 17 18 19 20 20 17 18 19 13 14 15 16 17 18 19 20 21 22 23 24 24 22 23 24 22 23 24 25 26 26 27 24 25 26 17 18 19 19 20 19 20 21 19 20 21 22 23 24 25 20 21 22 9 10 11 12 13 14 15 16 17 18 19 20 21 22 22 23 24 25 26 27 28 29 30 31 32 30 31 32 30 31 32 33 34 35 35 32 33 34 28 29 30 31 32 30 31 31 30 31 31 32 33 34 34 32 33 34 28 29 30 31 31 32 33 34 34 35 36 37 38 36 36 37 36 36 37 37 38 38 38 37 38 39 32 33 34 35 36 34 35 36 34 35 36 37 38 38 39 36 37 38 17 18 19 20 20 21 21 22 23 22 23 23 22 23 23 24 25 26 27 23 23 24 21 22 22 23 24 22 23 24 22 23 24 25 26 27 28 24 25 26 21 22 22 23 24 25 26 27 28 29 30 31 32 30 31 32 30 31 32 33 34 35 36 32 33 34 24 25 25 26 26 26 26 27 26 26 27 28 29 30 31 27 27 28)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 955 643) (om-make-point 597 281) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "2D-TURTLE 3" (quote 2d-turtle) (quote ((om-load-inputfun (quote input-funbox) "list" "LSYS" (list "F" "+" "[" "F" "+" "F" "+" "F" "+" "]" "F" "+" "F" "-")) (om-load-inputfun (quote input-funbox) "list" "MAG-RULES" (list (list (quote f) 1))) (om-load-inputfun (quote input-funbox) "list" "THETA-RULES" (list (list (quote +) 22.5) (list (quote -) -22.5))) (om-load-inputfun (quote input-funbox) "list" "MEMORY-RULES" (list (list (quote [) 1) (list (quote ]) 0))) (om-load-inputfun (quote input-funbox) "number" "THETA" 90))) (om-make-point 628 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "L-SYSTEM 2" (quote l-system) (quote ((om-load-inputfun (quote input-funbox) "atom" "AXIOM" (list (quote f))) (om-load-inputfun (quote input-funbox) "list" "RULES" (list (list (quote f) (list (quote f) (quote [) (quote +) (quote f) (quote f) (quote ]) (quote [) (quote -) (quote f) (quote f) (quote ]) (quote f) (quote [) (quote -) (quote f) (quote ]) (quote [) (quote +) (quote f) (quote ]) (quote f))))) (om-load-inputfun (quote input-funbox) "integer" "GENERATIONS" 3))) (om-make-point 336 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC 2" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 325 438) (om-make-point 263 423) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0 0 -1 -1 1 1 0 1 -1 0 -1 -2 -2 -1 -1 -1 -1 -2 -2 -2 -3 -4 -2 -2 -3 -3 -4 -3 1 1 1 2 2 1 2 1 2 2 2 2 3 4 3 4 3 3 0 -1 -1 1 1 0 1 -1 0 1 1 1 2 2 1 2 1 2 -1 -2 -2 -1 -1 -1 -1 -2 -2 0 -1 -1 1 1 0 1 -1 0 -1 -2 -2 -1 -1 -1 -1 -2 -2 -3 -4 -5 -3 -4 -4 -4 -5 -5 -5 -6 -7 -6 -7 -6 -7 -7 -7 -2 -2 -3 -1 -1 -2 -1 -2 -2 -2 -2 -3 -1 -1 -2 -1 -2 -2 -2 -3 -4 -2 -2 -3 -3 -4 -3 -3 -4 -5 -3 -2 -3 -3 -4 -3 -4 -5 -6 -5 -6 -5 -6 -6 -6 -4 -5 -6 -4 -4 -5 -5 -6 -5 -6 -7 -8 -6 -6 -6 -6 -7 -7 -8 -9 -10 -8 -9 -9 -9 -10 -10 -11 -12 -13 -11 -12 -12 -12 -13 -13 -7 -7 -8 -6 -6 -7 -6 -7 -7 -7 -7 -8 -6 -6 -7 -6 -7 -7 -7 -8 -9 -7 -7 -8 -8 -9 -9 -9 -9 -10 -8 -7 -9 -8 -9 -9 -10 -11 -11 -10 -11 -10 -11 -11 -11 -9 -10 -11 -9 -9 -10 -10 -11 -10 1 1 1 2 2 1 2 1 2 2 1 1 2 3 2 2 1 2 2 1 1 2 3 2 2 1 2 3 3 4 4 5 4 5 4 5 5 6 7 6 7 6 7 7 7 2 2 2 3 4 3 4 3 3 4 5 6 5 6 5 6 6 6 3 3 2 4 5 3 4 3 3 4 4 4 5 6 5 6 5 5 6 6 6 7 8 6 7 6 7 7 6 6 7 8 7 7 6 7 7 6 6 7 8 7 7 6 7 8 8 9 9 10 9 10 9 10 11 11 12 12 13 12 13 12 13 7 7 7 8 9 8 9 8 9 10 10 11 11 11 10 11 11 11 9 8 7 9 10 9 9 8 9 9 9 9 10 11 10 11 10 10 0 -1 -1 1 1 0 1 -1 0 -1 -2 -2 -1 -1 -1 -1 -2 -2 -2 -3 -4 -2 -2 -3 -3 -4 -3 1 1 1 2 2 1 2 1 2 2 2 2 3 4 3 4 3 3 0 -1 -1 1 1 0 1 -1 0 1 1 1 2 2 1 2 1 2 -1 -2 -2 -1 -1 -1 -1 -2 -2 0 -1 -1 1 1 0 1 -1 0 1 1 1 2 2 1 2 1 2 2 1 1 2 3 2 2 1 2 2 1 1 2 3 2 2 1 2 3 3 4 4 5 4 5 4 5 5 6 7 6 7 6 7 7 7 2 2 2 3 4 3 4 3 3 4 5 6 5 6 5 6 6 6 3 3 2 4 5 3 4 3 3 4 4 4 5 6 5 6 5 5 -1 -2 -2 -1 -1 -1 -1 -2 -2 -3 -4 -5 -3 -4 -4 -4 -5 -5 -5 -6 -7 -6 -7 -6 -7 -7 -7 -2 -2 -3 -1 -1 -2 -1 -2 -2 -2 -2 -3 -1 -1 -2 -1 -2 -2 -2 -3 -4 -2 -2 -3 -3 -4 -3 -3 -4 -5 -3 -2 -3 -3 -4 -3 -4 -5 -6 -5 -6 -5 -6 -6 -6 -4 -5 -6 -4 -4 -5 -5 -6 -5 0 -1 -1 1 1 0 1 -1 0 -1 -2 -2 -1 -1 -1 -1 -2 -2 -2 -3 -4 -2 -2 -3 -3 -4 -3 1 1 1 2 2 1 2 1 2 2 2 2 3 4 3 4 3 3 0 -1 -1 1 1 0 1 -1 0 1 1 1 2 2 1 2 1 2 -1 -2 -2 -1 -1 -1 -1 -2 -2 0 -1 -1 1 1 0 1 -1 0)) (quote (0 1 2 3 2 3 2 3 3 3 4 4 5 5 6 5 6 5 5 6 7 7 7 8 7 8 7 8 4 5 6 4 5 5 5 6 5 6 7 8 7 7 7 7 8 8 4 5 6 5 6 5 6 6 6 7 8 9 7 8 8 8 9 8 7 7 8 8 9 8 9 8 8 7 8 9 8 9 8 9 9 9 10 10 11 11 12 11 12 11 11 12 12 11 13 13 12 13 12 12 13 13 12 14 14 13 14 13 14 12 13 14 13 14 13 14 14 14 15 16 17 16 17 16 17 17 17 12 13 13 13 14 13 14 13 14 15 16 17 16 17 16 17 17 17 14 14 14 15 16 15 15 14 15 15 15 15 16 17 16 17 16 16 17 18 18 18 19 18 19 18 19 19 19 19 20 21 20 20 19 20 20 20 20 21 22 21 21 20 21 20 21 21 21 21 21 22 22 22 23 24 24 24 24 24 25 25 25 20 20 20 21 22 20 21 21 21 22 23 24 23 24 23 24 24 24 22 21 21 22 23 22 23 22 22 22 22 23 23 24 23 24 23 24 10 11 12 10 11 11 11 12 11 12 13 14 13 14 13 14 14 14 15 16 17 16 17 16 17 17 17 12 13 13 12 11 12 12 13 12 13 14 14 13 12 13 13 14 14 12 13 14 13 13 13 13 14 14 14 15 16 14 14 15 14 15 15 15 16 17 16 17 16 17 17 17 15 16 17 15 15 16 16 17 16 17 18 19 18 18 18 18 19 19 20 21 21 21 21 21 22 22 22 23 24 24 24 24 24 25 25 25 19 20 21 19 19 20 19 20 20 20 21 22 20 20 21 20 21 21 20 21 22 20 20 20 21 21 21 22 22 23 21 21 22 22 23 22 22 23 24 23 24 23 24 24 24 22 23 24 22 23 23 23 24 24 10 11 12 11 12 11 12 12 12 13 13 14 14 15 14 15 14 14 15 16 16 16 17 16 17 16 17 13 14 15 13 14 14 14 15 14 15 16 17 16 16 16 16 17 17 13 14 15 14 15 14 15 15 15 16 17 18 16 17 17 17 18 17 16 16 17 17 18 17 18 17 17 16 17 18 17 18 17 18 18 18 19 20 21 19 20 20 20 21 20 21 22 23 22 23 22 23 23 23 24 25 26 25 26 25 26 26 26 21 22 22 21 20 21 21 22 21 22 23 23 22 21 22 22 23 23 21 22 23 22 22 22 22 23 23 23 24 25 23 23 24 23 24 24 24 25 26 25 26 25 26 26 26 24 25 26 24 24 25 25 26 25 19 19 20 20 21 20 21 20 20 21 21 20 22 22 21 22 21 21 22 22 21 23 23 22 23 22 23 21 22 23 22 23 22 23 23 23 24 25 26 25 26 25 26 26 26 21 22 22 22 23 22 23 22 23 24 25 26 25 26 25 26 26 26 23 23 23 24 25 24 24 23 24 24 24 24 25 26 25 26 25 25 19 20 21 20 21 20 21 21 21 22 22 23 23 24 23 24 23 23 24 25 25 25 26 25 26 25 26 22 23 24 22 23 23 23 24 23 24 25 26 25 25 25 25 26 26 22 23 24 23 24 23 24 24 24 25 26 27 25 26 26 26 27 26 25 25 26 26 27 26 27 26 26 25 26 27 26 27 26 27 27 27)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 888 696) (om-make-point 628 210) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "2D-TURTLE 2" (quote 2d-turtle) (quote ((om-load-inputfun (quote input-funbox) "list" "LSYS" (list "F" "+" "[" "F" "+" "F" "+" "F" "+" "]" "F" "+" "F" "-")) (om-load-inputfun (quote input-funbox) "list" "MAG-RULES" (list (list (quote f) 1))) (om-load-inputfun (quote input-funbox) "list" "THETA-RULES" (list (list (quote +) 35) (list (quote -) -35))) (om-load-inputfun (quote input-funbox) "list" "MEMORY-RULES" (list (list (quote [) 1) (list (quote ]) 0))) (om-load-inputfun (quote input-funbox) "number" "THETA" 90))) (om-make-point 352 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "L-SYSTEM" (quote l-system) (quote ((om-load-inputfun (quote input-funbox) "atom" "AXIOM" (list (quote x) (quote f))) (om-load-inputfun (quote input-funbox) "list" "RULES" (list (list (quote x) (list (quote x) (quote +) (quote y) (quote f) (quote +) (quote +) (quote y) (quote f) (quote -) (quote f) (quote x) (quote -) (quote -) (quote f) (quote x) (quote f) (quote x) (quote -) (quote y) (quote f) (quote +))) (list (quote y) (list (quote -) (quote f) (quote x) (quote +) (quote y) (quote f) (quote y) (quote f) (quote +) (quote +) (quote y) (quote f) (quote +) (quote f) (quote x) (quote -) (quote -) (quote f) (quote x) (quote -) (quote y))))) (om-load-inputfun (quote input-funbox) "integer" "GENERATIONS" 3))) (om-make-point 58 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 50 439) (om-make-point 252 254) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 -1 -1 0 1 2 3 3 4 3 2 2 2 2 1 -1 0 1 1 -1 -1 -2 -2 -2 -3 -3 -3 -2 -1 -2 -3 -2 -1 0 1 2 1 0 1 2 3 2 3 3 4 3 4 5 6 6 5 5 6 7 7 8 9 9 8 8 7 8 9 9 10 9 8 8 8 8 7 6 6 7 7 6 5 6 6 7 7 6 5 5 4 4 4 3 3 3 4 5 5 4 4 3 4 3 2 3 2 2 1 1 1 0 -1 -1 0 0 -1 -2 -3 -4 -3 -2 -3 -4 -4 -4 -3 -3 -3 -2 -2 -1 0 -1 -2 -1 0 1 0 1 1 2 2 1 0 0 -1 -2 -2 -1 -1 -2 -3 -4 -3 -4 -4 -5 -4 -5 -6 -7 -6 -5 -6 -7 -7 -7 -6 -6 -6 -5 -5 -5 -5 -4 -3 -4 -4 -5 -6 -7 -6 -7 -7 -8 -7 -8 -9 -8 -9 -9 -10 -9 -8 -8 -7 -8 -9 -9 -9 -8 -7 -8 -9 -8 -7 -6 -5 -5 -4 -5 -6 -6 -6 -6 -7 -8 -8 -7 -7 -8 -9 -10 -9 -10 -10 -11 -10 -9 -9 -10 -10 -9 -8 -8 -7 -6 -7 -8 -7 -6 -5 -6 -5 -5 -4 -5 -4 -3 -2 -2 -3 -3 -2 -1 -1 1 1 2 1 0 -1 0 -1 -2 -3 -2 -1 -1 -3 -3 -4 -4 -4 -5 -5 -5 -4 -3 -4 -5 -4 -3 -2 -1 -1 -2 -2 -1 0 1 0 0 1 1 1 2 2 2 2 3 4 3 3 2 1 2 2 3 2 3 4 3 4 4 5 4 5 6 7 7 8 7 6 6 6 6 5 5 5 4 4 4 5 6 5 4 5 6 7 6 7 7 8 7 9 9 10)) (quote (0 1 1 2 2 2 1 1 2 3 3 2 3 3 4 4 4 3 3 3 3 3 3 3 2 3 3 4 4 5 5 6 6 6 5 5 6 6 7 7 7 6 5 4 3 4 5 5 4 4 5 5 6 6 6 5 5 6 7 7 6 7 8 8 9 10 10 9 10 10 11 11 11 10 10 10 10 9 8 9 9 8 7 7 8 8 7 6 7 8 9 9 10 10 10 10 10 11 12 12 11 10 11 12 13 14 14 14 13 13 12 12 13 13 13 12 12 11 11 10 10 9 10 10 10 10 10 10 10 11 11 11 10 10 9 10 10 9 8 8 9 9 9 8 8 7 7 8 8 7 6 7 8 9 10 10 10 9 9 8 8 7 6 5 6 7 7 6 5 4 5 5 4 3 3 4 4 3 3 3 4 5 6 6 5 4 5 6 7 7 8 9 9 8 9 10 10 10 10 11 11 11 10 10 11 12 12 11 12 13 14 14 14 13 13 12 12 13 13 12 11 12 13 14 14 15 15 16 16 16 15 15 16 16 16 16 16 16 15 14 13 14 15 15 14 14 15 15 16 16 16 15 15 16 16 16 16 16 17 18 18 18 17 17 16 16 17 17 16 16 16 17 18 18 19 19 20 20 20 19 19 20 20 21 21 21 20 19 18 17 18 19 19 18 17 16 17 17 16 16 16 15 14 13 14 15 15 14 13 12 11 12 13 13 12 12 13 14 14 13 14 15 16 16 15 14 15 16 16 16 17 17 18 18 18 17 16 16 15 16 16 16 16 16)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "2D-TURTLE" (quote 2d-turtle) (quote ((om-load-inputfun (quote input-funbox) "list" "LSYS" (list "F" "+" "[" "F" "+" "F" "+" "F" "+" "]" "F" "+" "F" "-")) (om-load-inputfun (quote input-funbox) "list" "MAG-RULES" (list (list (quote f) 1))) (om-load-inputfun (quote input-funbox) "list" "THETA-RULES" (list (list (quote +) 60) (list (quote -) -60))) (om-load-inputfun (quote input-funbox) "list" "MEMORY-RULES" (list (list (quote [) 1) (list (quote ]) 0))) (om-load-inputfun (quote input-funbox) "number" "THETA" 0))) (om-make-point 74 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 12 0 nil 0) (8 0 12 1 nil 0) (3 0 12 2 nil 0) (14 0 13 0 nil 0) (12 0 14 0 nil 0) (7 0 15 0 nil 0) (9 0 15 1 nil 0) (5 0 15 2 nil 0) (17 0 16 0 nil 0) (15 0 17 0 nil 0) (10 0 18 0 nil 0) (11 0 18 1 nil 0) (6 0 18 2 nil 0) (20 0 19 0 nil 0) (18 0 20 0 nil 0))) nil 6.18))
