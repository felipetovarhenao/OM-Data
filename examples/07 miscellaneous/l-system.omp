; OM File Header - Saved 2021/06/09 9:51:42
; (6.18 :patc (om-make-point 10 10) (om-make-point 577 214) (om-make-point 607 806) "" 183 0 "2021/05/08 21:25:03" "2021/06/09 9:51:42")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "l-system" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 49 54) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 315 147) (quote "l-system (or lindenmayer system) outputs a deterministically generated sequence of elements, based on a given an axiom, list of production rules, and number of generations.$$In this example, the output sequence is interpreted as the derivative of a numeric sequence, which is further used to control the inversions of a chord") "" (om-make-point 4 77) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 64 31) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SHIFT-POSN" (quote shift-posn) (quote ((om-load-inputfun (quote input-funbox) "midicent list" "CHORD-LIST" (list 3600 5200 6700 7000)) (om-load-inputfun (quote input-funbox) "chordal step" "N-STEP" 1))) (om-make-point 162 519) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 157 303) (om-make-point 98 177) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 6000 6400 6700 7100)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 25) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 282 422) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 103 30) (quote "rewriting rules") "" (om-make-point 469 200) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 87 30) (quote "generations") "" (om-make-point 418 296) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 30) (quote "axiom") "" (om-make-point 286 279) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "rules" (let ((copy (make-instance (quote omlistinstance) :name "rules" :icon 129))) (setf (instance copy) (list (list -1 (list -1 1 -3)) (list 1 (list 1 -2 3)) (list -2 (list 2 -1)) (list 2 (list -1 2)))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2021/05/08 21:33:48" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 339 121) "rules" (om-make-point 45 40)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 367 196) (om-make-point 105 86) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 81 66) "untitled"))) (om-set-dialog-item-text rep "(-1 (-1 1 -3))
(1 (1 -2 3))
(-2 (2 -1))
(2 (-1 2))
") rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 270 561) (om-make-point 51 30) (list 200) "(200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 214 593) (om-make-point 62 30) (list 0 100) "(0 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 40)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 90 622) (om-make-point 463 176) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400 6000 6400 6700 7100) (7200 5900 6200 6400 6700) (7400 6000 6400 6700 7100) (6700 5200 5900 6000 6200) (7100 5500 6000 6200 6400) (6400 5000 5500 5900 6000) (7200 5900 6200 6400 6700) (6400 5000 5500 5900 6000) (6700 5200 5900 6000 6200) (6200 4800 5200 5500 5900) (7100 5500 6000 6200 6400) (7400 6000 6400 6700 7100) (7200 5900 6200 6400 6700) (7900 6400 7100 7200 7400) (7200 5900 6200 6400 6700) (7400 6000 6400 6700 7100) (7100 5500 6000 6200 6400) (7600 6200 6700 7100 7200) (8300 6700 7200 7400 7600) (7900 6400 7100 7200 7400) (8600 7200 7600 7900 8300) (8400 7100 7400 7600 7900) (8800 7400 7900 8300 8400) (8600 7200 7600 7900 8300) (8800 7400 7900 8300 8400) (8300 6700 7200 7400 7600) (8800 7400 7900 8300 8400) (8300 6700 7200 7400 7600) (8400 7100 7400 7600 7900) (7900 6400 7100 7200 7400) (8600 7200 7600 7900 8300) (9100 7600 8300 8400 8600) (8800 7400 7900 8300 8400) (9600 8300 8600 8800 9100) (9500 7900 8400 8600 8800) (9800 8400 8800 9100 9500) (9600 8300 8600 8800 9100) (9800 8400 8800 9100 9500) (9100 7600 8300 8400 8600) (9800 8400 8800 9100 9500) (9600 8300 8600 8800 9100) (9800 8400 8800 9100 9500) (9100 7600 8300 8400 8600) (8800 7400 7900 8300 8400) (9500 7900 8400 8600 8800) (9100 7600 8300 8400 8600) (9500 7900 8400 8600 8800) (8600 7200 7600 7900 8300) (8800 7400 7900 8300 8400) (8400 7100 7400 7600 7900) (9100 7600 8300 8400 8600) (8400 7100 7400 7600 7900) (9100 7600 8300 8400 8600) (8400 7100 7400 7600 7900) (8600 7200 7600 7900 8300) (8300 6700 7200 7400 7600) (8800 7400 7900 8300 8400) (9500 7900 8400 8600 8800) (9100 7600 8300 8400 8600) (9800 8400 8800 9100 9500) (9600 8300 8600 8800 9100) (10000 8600 9100 9500 9600) (9800 8400 8800 9100 9500) (10000 8600 9100 9500 9600) (9500 7900 8400 8600 8800) (10000 8600 9100 9500 9600) (9800 8400 8800 9100 9500) (10000 8600 9100 9500 9600) (9500 7900 8400 8600 8800) (9100 7600 8300 8400 8600) (9600 8300 8600 8800 9100) (9500 7900 8400 8600 8800) (9600 8300 8600 8800 9100) (8800 7400 7900 8300 8400) (9100 7600 8300 8400 8600) (8600 7200 7600 7900 8300) (9500 7900 8400 8600 8800) (8600 7200 7600 7900 8300) (9500 7900 8400 8600 8800) (9100 7600 8300 8400 8600) (9500 7900 8400 8600 8800) (8600 7200 7600 7900 8300) (8800 7400 7900 8300 8400) (8400 7100 7400 7600 7900) (9100 7600 8300 8400 8600) (8400 7100 7400 7600 7900) (8300 6700 7200 7400 7600) (8400 7100 7400 7600 7900) (7600 6200 6700 7100 7200) (7400 6000 6400 6700 7100) (7900 6400 7100 7200 7400) (7600 6200 6700 7100 7200) (7900 6400 7100 7200 7400) (7200 5900 6200 6400 6700) (7400 6000 6400 6700 7100) (7100 5500 6000 6200 6400) (7600 6200 6700 7100 7200) (7100 5500 6000 6200 6400) (7200 5900 6200 6400 6700) (6700 5200 5900 6000 6200) (7400 6000 6400 6700 7100) (7900 6400 7100 7200 7400) (7600 6200 6700 7100 7200) (8400 7100 7400 7600 7900) (7600 6200 6700 7100 7200) (8400 7100 7400 7600 7900) (7600 6200 6700 7100 7200) (7900 6400 7100 7200 7400) (7400 6000 6400 6700 7100) (8300 6700 7200 7400 7600) (8600 7200 7600 7900 8300) (8400 7100 7400 7600 7900) (9100 7600 8300 8400 8600) (8800 7400 7900 8300 8400) (9500 7900 8400 8600 8800) (9100 7600 8300 8400 8600) (9500 7900 8400 8600 8800) (8600 7200 7600 7900 8300) (9500 7900 8400 8600 8800) (9100 7600 8300 8400 8600) (9500 7900 8400 8600 8800) (8600 7200 7600 7900 8300) (8400 7100 7400 7600 7900) (8800 7400 7900 8300 8400) (8600 7200 7600 7900 8300) (8800 7400 7900 8300 8400) (8300 6700 7200 7400 7600) (8400 7100 7400 7600 7900) (7900 6400 7100 7200 7400) (8600 7200 7600 7900 8300) (7900 6400 7100 7200 7400) (8600 7200 7600 7900 8300) (8400 7100 7400 7600 7900) (8600 7200 7600 7900 8300) (7900 6400 7100 7200 7400) (8300 6700 7200 7400 7600) (7600 6200 6700 7100 7200) (8400 7100 7400 7600 7900) (7600 6200 6700 7100 7200) (7400 6000 6400 6700 7100) (7600 6200 6700 7100 7200) (7100 5500 6000 6200 6400) (6700 5200 5900 6000 6200) (7200 5900 6200 6400 6700) (7100 5500 6000 6200 6400) (7200 5900 6200 6400 6700) (6400 5000 5500 5900 6000) (6700 5200 5900 6000 6200) (6200 4800 5200 5500 5900) (7100 5500 6000 6200 6400) (6200 4800 5200 5500 5900) (6400 5000 5500 5900 6000) (6000 4700 5000 5200 5500) (6700 5200 5900 6000 6200) (7200 5900 6200 6400 6700) (7100 5500 6000 6200 6400) (7600 6200 6700 7100 7200) (7100 5500 6000 6200 6400) (7600 6200 6700 7100 7200) (7400 6000 6400 6700 7100) (7600 6200 6700 7100 7200) (7100 5500 6000 6200 6400) (7200 5900 6200 6400 6700) (6700 5200 5900 6000 6200) (7400 6000 6400 6700 7100) (6700 5200 5900 6000 6200) (7100 5500 6000 6200 6400) (6400 5000 5500 5900 6000) (7200 5900 6200 6400 6700) (7600 6200 6700 7100 7200) (7400 6000 6400 6700 7100) (8300 6700 7200 7400 7600) (7400 6000 6400 6700 7100) (7200 5900 6200 6400 6700) (7400 6000 6400 6700 7100) (6700 5200 5900 6000 6200) (7100 5500 6000 6200 6400) (6400 5000 5500 5900 6000) (7200 5900 6200 6400 6700) (6400 5000 5500 5900 6000) (6200 4800 5200 5500 5900) (6400 5000 5500 5900 6000) (5900 4300 4800 5000 5200) (5500 4000 4700 4800 5000) (6000 4700 5000 5200 5500) (5900 4300 4800 5000 5200) (6000 4700 5000 5200 5500) (5200 3800 4300 4700 4800) (5500 4000 4700 4800 5000) (5000 3600 4000 4300 4700) (5900 4300 4800 5000 5200) (5000 3600 4000 4300 4700) (5200 3800 4300 4700 4800) (4800 3500 3800 4000 4300) (5500 4000 4700 4800 5000) (6000 4700 5000 5200 5500) (5900 4300 4800 5000 5200) (6400 5000 5500 5900 6000) (5900 4300 4800 5000 5200) (6000 4700 5000 5200 5500) (5500 4000 4700 4800 5000) (6200 4800 5200 5500 5900) (6700 5200 5900 6000 6200) (6400 5000 5500 5900 6000) (7200 5900 6200 6400 6700) (7100 5500 6000 6200 6400) (7400 6000 6400 6700 7100) (7200 5900 6200 6400 6700) (7400 6000 6400 6700 7100) (6700 5200 5900 6000 6200) (7400 6000 6400 6700 7100) (6700 5200 5900 6000 6200) (7400 6000 6400 6700 7100) (6700 5200 5900 6000 6200))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700 20800 20900 21000 21100 21200 21300 21500)) :ldur (quote ((200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200))) :lvel (quoteloffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 1172 333) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 388 300) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 302 452) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 292 304) (om-make-point 32 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "L-SYSTEM" (quote l-system) (quote ((om-load-inputfun (quote input-funbox) "atom" "AXIOM" "A") (om-load-inputfun (quote input-funbox) "list" "RULES" (list (list "A" (list "B")) (list "B" (list "A" "B")))) (om-load-inputfun (quote input-funbox) "integer" "ITERATIONS" 5))) (om-make-point 331 345) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 1 3 0 nil 0) (15 0 3 1 nil 0) (9 0 10 0 nil 0) (3 0 13 1 nil 0) (12 0 13 2 nil 0) (11 0 13 3 nil 0) (5 0 15 0 nil 0) (17 0 15 1 nil 0) (16 0 17 0 nil 0) (9 0 17 1 nil 0) (14 0 17 2 nil 0))) nil 6.18))