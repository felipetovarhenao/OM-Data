; OM File Header - Saved 2021/05/27 8:59:23
; (6.18 :patc (om-make-point 118 260) (om-make-point 575 48) (om-make-point 956 974) "" 183 0 "2021/05/21 10:45:59" "2021/05/27 8:59:23")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "list-symmetries" (quote ((let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 404 499) (om-make-point 152 30) (list 2 1 2 3 10 10 11 11 3) "(2 1 2 3 10 10 11 11 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 493 618) (om-make-point 163 91) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 139 71) "untitled"))) (om-set-dialog-item-text rep "(11 11 3 2 1 2 3 10 10)
(2 3 10 10 11 11 3 2 1)
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 631 497) (om-make-point 38 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 560 497) (om-make-point 69 30) (quote rotations) "rotations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES 3" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote permutations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))) (om-load-inputfun (quote input-funbox) "number" "TOLERANCE" 0.0))) (om-make-point 546 535) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 189 622) (om-make-point 112 123) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 88 103) "untitled"))) (om-set-dialog-item-text rep "(a b c a c b a)
(a c b a b c a)
(b a c a c a b)
(b c a a a c b)
(c a b a b a c)
(c b a a a b c)
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 321 500) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 218 501) (om-make-point 93 30) (quote permutations) "permutations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 101 501) (om-make-point 98 30) (list (quote a) (quote a) (quote a) (quote b) (quote b) (quote c) (quote c)) "(a a a b b c c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES 2" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote permutations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))) (om-load-inputfun (quote input-funbox) "number" "TOLERANCE" 0.0))) (om-make-point 216 539) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 158 131) (om-make-point 48 30) 4800 "4800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 4800) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 166 167) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 225 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 68 30) (quote "intervals") "" (om-make-point 87 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 22 54) (om-make-point 200 30) (list 800 900 200 200 700 500 300) "(800 900 200 200 700 500 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 93 30) (quote "search mode") "" (om-make-point 232 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 144 30) (quote "asymmetry tolerance") "" (om-make-point 334 25) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 337 55) (om-make-point 38 30) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 230 55) (om-make-point 93 30) (quote permutations) "permutations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1200)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 100))) (om-make-point 99 282) (om-make-point 669 186) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 5600 5800 6500 6800 7300 7500 8400) (4800 5600 5800 6300 7200 7500 7700 8400) (4800 5600 5800 6300 7000 7300 7500 8400) (4800 5600 5800 6300 6600 7300 7500 8400) (4800 5600 5800 6100 7000 7500 7700 8400) (4800 5600 5800 6100 6800 7300 7500 8400) (4800 5600 6300 6500 6800 7000 7500 8400) (4800 5600 6100 6300 7200 7400 7700 8400) (4800 5600 6100 6300 7000 7200 7500 8400) (4800 5600 6100 6300 6600 6800 7500 8400) (4800 5600 5900 6100 7000 7200 7700 8400) (4800 5600 5900 6100 6800 7000 7500 8400) (4800 5700 5900 6600 6900 7400 7600 8400) (4800 5700 5900 6400 7100 7400 7600 8400) (4800 5700 5900 6400 6700 7400 7600 8400) (4800 5700 5900 6200 6900 7400 7600 8400) (4800 5700 6400 6600 6900 7100 7600 8400) (4800 5700 6200 6400 7100 7300 7600 8400) (4800 5700 6200 6400 6700 6900 7600 8400) (4800 5700 6000 6200 6900 7100 7600 8400) (4800 5000 5800 6500 6800 7300 8200 8400) (4800 5000 5800 6300 7200 7500 8200 8400) (4800 5000 5800 6300 7000 7300 8200 8400) (4800 5000 5800 6300 6600 7300 8200 8400) (4800 5000 5800 6100 7000 7500 8200 8400) (4800 5000 5800 6100 6800 7300 8200 8400) (4800 5000 5900 6600 6900 7400 8200 8400) (4800 5000 5900 6400 7100 7400 8200 8400) (4800 5000 5900 6400 6700 7400 8200 8400) (4800 5000 5900 6200 6900 7400 8200 8400) (4800 5000 5700 6500 6800 7700 8200 8400) (4800 5000 5700 6600 6900 7700 8200 8400) (4800 5000 5700 6200 7100 7400 8200 8400) (4800 5000 5700 6000 6900 7400 8200 8400) (4800 5000 5500 6300 7200 7900 8200 8400) (4800 5000 5500 6300 7000 7900 8200 8400) (4800 5000 5500 6300 6600 7500 8200 8400) (4800 5000 5500 6400 7100 7900 8200 8400) (4800 5000 5500 6400 6700 7500 8200 8400) (4800 5000 5500 6200 7100 7900 8200 8400) (4800 5000 5300 6100 7000 7700 8200 8400) (4800 5000 5300 6100 6800 7700 8200 8400) (4800 5000 5300 6200 6900 7700 8200 8400) (4800 5000 5300 6000 6900 7700 8200 8400) (4800 5500 6300 6500 6800 7000 7900 8400) (4800 5500 6400 6600 6900 7100 7900 8400) (4800 5500 5700 6500 6800 7700 7900 8400) (4800 5500 5700 6600 6900 7700 7900 8400) (4800 5500 5700 6200 7100 7400 7600 8400) (4800 5500 5700 6000 6900 7400 7600 8400) (4800 5500 6000 6200 7100 7300 7600 8400) (4800 5500 5800 6000 6900 7100 7600 8400) (4800 5300 6100 6300 7200 7400 8100 8400) (4800 5300 6100 6300 7000 7200 8100 8400) (4800 5300 6100 6300 6600 6800 7700 8400) (4800 5300 6200 6400 7100 7300 8100 8400) (4800 5300 6200 6400 6700 6900 7700 8400) (4800 5300 5500 6300 7200 7900 8100 8400) (4800 5300 5500 6300 7000 7900 8100 8400) (4800 5300 5500 6300 6600 7500 7700 8400) (4800 5300 5500 6400 7100 7900 8100 8400) (4800 5300 5500 6400 6700 7500 7700 8400) (4800 5300 5500 6200 7100 7900 8100 8400) (4800 5300 6000 6200 7100 7300 8100 8400) (4800 5100 5900 6100 7000 7200 7900 8400) (4800 5100 5900 6100 6800 7000 7900 8400) (4800 5100 6000 6200 6900 7100 7900 8400) (4800 5100 5300 6100 7000 7700 7900 8400) (4800 5100 5300 6100 6800 7700 7900 8400) (4800 5100 5300 6200 6900 7700 7900 8400) (4800 5100 5300 6000 6900 7700 7900 8400) (4800 5100 5800 6000 6900 7100 7900 8400))) :lonset (quote (0 1200 2400 3600 4800 6000 7200 8400 9600 10800 12000 13200 14400 15600 16800 18000 19200 20400 21600 22800 24000 25200 26400 27600 28800 30000 31200 32400 33600 34800 36000 37200 38400 39600 40800 42000 43200 44400 45600 46800 48000 49200 50400 51600 52800 54000 55200 56400 57600 58800 60000 61200 62400 63600 64800 66000 67200 68400 69600 70800 72000 73200 74400 75600 76800 78000 79200 80400 81600 82800 84000 85200 86400)) :ldur (quote ((1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200) (1200 1200 1200 1200 1200 1200 1200 1200))) :lvel (quote ((50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50))) :loffset (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 100)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-SYMMETRIES" (quote list-symmetries) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 3 1 1 3 2 1 1 2)) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MODE" (quote permutations) (list (list "permutations" (quote (quote permutations))) (list "rotations" (quote (quote rotations))))) (om-load-inputfun (quote input-funbox) "number" "TOLERANCE" 0.2))) (om-make-point 228 108) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (0 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 4 2 nil 0) (9 0 5 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (6 0 9 2 nil 0) (10 0 11 0 nil 0) (11 0 12 0 nil 0) (20 0 12 1 nil 0) (12 0 19 1 nil 0) (14 0 20 0 nil 0) (18 0 20 1 nil 0) (17 0 20 2 nil 0))) nil 6.18))
