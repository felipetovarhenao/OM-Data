; OM File Header - Saved 2021/06/15 13:01:19
; (6.19 :patc (om-make-point 10 60) (om-make-point 368 50) (om-make-point 627 952) "" 183 0 "2021/04/25 11:18:48" "2021/06/15 13:01:19")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "euclidean-rhythm" (quote ((let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 175 432) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 54 30) (quote "period") "" (om-make-point 118 255) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 63 30) (quote "rotation") "" (om-make-point 473 270) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 111 30) (quote "number of beats") "" (om-make-point 377 241) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 354 393) (om-make-point 141 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 113 20) "(2 1 2 2 1 2 2 1)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "euclidean-rhythm->chord-seq" (om-load-patch-abs1 "euclidean-rhythm->chord-seq" (quote ((let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 39 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 38 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 407 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 395 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 377 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 382 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 100) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 400 352) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 40) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 392 281) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 420 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 378 617) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 12))) (om-make-point 35 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 159 30) (quote "constrain to 0-12 range") "" (om-make-point 94 184) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 5" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 180 518) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 123 464) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 80 30) (quote "repetitions") "" (om-make-point 159 371) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 82 336) (om-make-point 34 30) 36 "36" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 50 30) (quote "offset") "" (om-make-point 115 332) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 30) (quote "4-octave range") "" (om-make-point 89 268) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 293) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 323 621) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 265 697) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 51 656) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 303 104) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 35 27) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 57 415) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 3))) (om-make-point 55 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 60) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 48))) (om-make-point 56 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 47 575) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 182 400) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 321 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 12))) (om-make-point 308 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 274 621) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 125))) (om-make-point 318 383) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (23 0 1 0 nil 0) (22 0 2 0 nil 0) (5 0 3 0 nil 0) (6 0 4 1 nil 0) (4 0 5 0 nil 0) (28 0 5 1 nil 0) (7 0 6 1 nil 0) (8 0 7 1 nil 0) (2 0 8 0 nil 0) (3 0 9 0 nil 0) (1 0 10 0 nil 0) (13 0 12 0 nil 0) (28 0 12 1 nil 0) (24 0 13 0 nil 0) (29 0 19 0 nil 0) (31 0 20 0 nil 0) (27 0 21 0 nil 0) (26 0 24 0 nil 0) (0 0 25 0 nil 0) (18 0 25 1 nil 0) (25 0 26 0 nil 0) (15 0 26 1 nil 0) (24 0 27 0 nil 0) (12 0 27 1 nil 0) (30 0 29 0 nil 0) (32 0 30 0 nil 0) (28 0 30 1 nil 0) (29 0 31 1 nil 0) (22 0 32 0 nil 0))) 6.19 nil "" (om-make-point 802 43) (om-make-point 594 911)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 3677/12 8147/12) nil (list (list (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13) (list 3600 56400/13 61200/13 70800/13 80400/13 85200/13 94800/13 104400/13)) (list 0 250 375 625 875 1000 1250 1500 1625 1875 2000 2250 2500 2625 2875 3125 3250 3500 3625 3875 4125 4250 4500 4750 4875 5125 5250 5500 5750 5875 6125 6375 6500) (list 250 125 250 250 125 250 250 125 250 125 250 250 125 250 250 125 250 125 250 250 125 250 250 125 250 125 250 250 125 250 250 125) (list 100 40 40 40 40 40 40 40 100 40 40 40 40 40 40 40 100 40 40 40 40 40 40 40 100 40 40 40 40 40 40 40)) nil "euclidean-rhythm->chord-seq"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 388 272) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 122 280) (om-make-point 34 30) 13 "13" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 440 273) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "EUCLIDEAN RHYTHM+CHORDS" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 259 755) (om-make-point 346 189) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031) (3600 4338 4708 5446 6185 6554 7292 8031))) :lonset (quote (0 250 375 625 875 1000 1250 1500 1625 1875 2000 2250 2500 2625 2875 3125 3250 3500 3625 3875 4125 4250 4500 4750 4875 5125 5250 5500 5750 5875 6125 6375 6500)) :ldur (quote ((250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (125 125 125 125 125 125 125 125))) :lvel (quote ((100 100 100 100 100 100 100 100) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (100 100 100 100 100 100 100 100) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (100 100 100 100 100 100 100 100) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (100 100 100 100 100 100 100 100) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40))) :loffset (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 748 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "EUCLIDEAN RHYTHM RING" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 23 490) (om-make-point 227 187) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 13 :puntos (list (list 0 2 3 5 7 8 10 12 13)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EUCLIDEAN-RHYTHM" (quote euclidean-rhythm) (quote ((om-load-inputfun (quote input-funbox) "integer" "NUMBEATS" 5) (om-load-inputfun (quote input-funbox) "integer" "PERIOD" 13) (om-load-inputfun (quote input-funbox) "integer" "ROTATION" 3))) (om-make-point 374 317) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 103 21) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 79 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 385 148) (quote "euclidean-rhythm, as the name suggests, computes the Euclidean rhythm for a given period k and number of beats/pulses n, where n < k. The output can be interpreted as a list of intervals or distances between between pulses.$$In this example, the resulting euclidean rhythm is being traslated into both a rhythmic pattern and a chord; the latter, using the same proportions of the euclidean rhythm.") "" (om-make-point 24 72) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 1 nil 0) (11 0 4 0 nil 0) (10 2 5 0 nil 0) (4 0 5 1 nil 0) (5 0 9 1 nil 0) (5 1 9 2 nil 0) (5 2 9 3 nil 0) (5 3 9 4 nil 0) (7 0 10 1 nil 0) (0 0 10 2 nil 0) (6 0 11 0 nil 0) (7 0 11 1 nil 0) (8 0 11 2 nil 0))) nil 6.19))
