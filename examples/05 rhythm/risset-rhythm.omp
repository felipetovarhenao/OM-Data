; OM File Header - Saved 2021/06/02 12:32:32
; (6.18 :patc (om-make-point 10 10) (om-make-point 178 25) (om-make-point 772 831) "" 183 0 "2021/05/15 8:50:02" "2021/06/02 12:32:28")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "risset-rhythm" (quote ((let ((box (om-load-boxcomment "comment 8" (om-make-point 484 98) (quote "Risset-rhythm builds a seemingly eternal accelerando/ritardando, based on an input CHORD-SEQ, a speed factor, number of voices, number of repetitions.") "" (om-make-point 20 60) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 79 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 103 10) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 132 30) (quote "transposition mode") "" (om-make-point 634 352) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 99 30) (quote "agogics mode") "" (om-make-point 497 247) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 69 459) (om-make-point 528 428) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8864) (9150 9450) (9344) (8836 9136) (8322 8822) (8808) (9094 9394) (9288) (8780 9080) (8266 8766) (8752) (9038 9338) (9230) (8722 9022) (8208 8708) (8694) (8978 9278) (9170) (8662 8962) (8148 8648) (8632) (8916 9216) (9110) (8602 8902) (8086 8586) (8570) (8854 9154) (9046) (8538 8838) (8020 8520) (8504) (8788 9088) (8978) (8470 8770) (7954 8454) (8436) (8718 9018) (8910) (8402 8702) (7884 8384) (8366) (8648 8948) (8838) (8330 8630) (7810 8310) (8292) (8572 8872) (8764) (8254 8554) (7734 8234) (8214) (8496 8796) (8686) (8176 8476) (7654 8154) (8134) (8414 8714) (8604) (8092 8392) (7572 8072) (8050) (8328 8628) (8518) (8006 8306) (7484 7984) (7962) (8238 8538) (8426) (7914 8214) (7392 7892) (7868) (8144 8444) (8330) (7818 8118) (7294 7794) (7768) (8042 8342) (8230) (7716 8016) (7190 7690) (8864) (9150 9450) (9344) (8836 9136) (8322 8822) (8808) (9094 9394) (9288) (8780 9080) (8266 8766) (8752) (9038 9338) (9230) (8722 9022) (8208 8708) (8694) (8978 9278) (9170) (8662 8962) (8148 8648) (8632) (8916 9216) (9110) (8602 8902) (8086 8586) (8570) (8854 9154) (9046) (8538 8838) (8020 8520) (8504) (8788 9088) (8978) (8470 8770) (7954 8454) (8436) (8718 9018) (8910) (8402 8702) (7884 8384) (8366) (8648 8948) (8838) (8330 8630) (7810 8310) (8292) (8572 8872) (8764) (8254 8554) (7734 8234) (8214) (8496 8796) (8686) (8176 8476) (7654 8154) (8134) (8414 8714) (8604) (8092 8392) (7572 8072) (8050) (8328 8628) (8518) (8006 8306) (7484 7984) (7962) (8238 8538) (8426) (7914 8214) (7392 7892) (7868) (8144 8444) (8330) (7818 8118) (7294 7794) (7768) (8042 8342) (8230) (7716 8016) (7190 7690) (8864) (9150 9450) (9344) (8836 9136) (8322 8822) (8808) (9094 9394) (9288) (8780 9080) (8266 8766) (8752) (9038 9338) (9230) (8722 9022) (8208 8708) (8694) (8978 9278) (9170) (8662 8962) (8148 8648) (8632) (8916 9216) (9110) (8602 8902) (8086 8586) (8570) (8854 9154) (9046) (8538 8838) (8020 8520) (8504) (8788 9088) (8978) (8470 8770) (7954 8454) (8436) (8718 9018) (8910) (8402 8702) (7884 8384) (8366) (8648 8948) (8838) (8330 8630) (7810 8310) (8292) (8572 8872) (8764) (8254 8554) (7734 8234) (8214) (8496 8796) (8686) (8176 8476) (7654 8154) (8134) (8414 8714) (8604) (8092 8392) (7572 8072) (8050) (8328 8628) (8518) (8006 8306) (7484 7984) (7962) (8238 8538) (8426) (7914 8214) (7392 7892) (7868) (8144 8444) (8330) (7818 8118) (7294 7794) (7768) (8042 8342) (8230) (7716 8016) (7190 7690) (8864) (9150 9450) (9344) (8836 9136) (8322 8822) (8808) (9094 9394) (9288) (8780 9080) (8266 8766) (8752) (9038 9338) (9230) (8722 9022) (8208 8708) (8694) (8978 9278) (9170) (8662 8962) (8148 8648) (8632) (8916 9216) (9110) (8602 8902) (8086 8586) (8570) (8854 9154) (9046) (8538 8838) (8020 8520) (8504) (8788 9088) (8978) (8470 8770) (7954 8454) (8436) (8718 9018) (8910) (8402 8702) (7884 8384) (8366) (8648 8948) (8838) (8330 8630) (7810 8310) (8292) (8572 8872) (8764) (8254 8554) (7734 8234) (8214) (8496 8796) (8686) (8176 8476) (7654 8154) (8134) (8414 8714) (8604) (8092 8392) (7572 8072) (8050) (8328 8628) (8518) (8006 8306) (7484 7984) (7962) (8238 8538) (8426) (7914 8214) (7392 7892) (7868) (8144 8444) (8330) (7818 8118) (7294 7794) (7768) (8042 8342) (8230) (7716 8016) (7190 7690) (8864) (9150 9450) (9344) (8836 9136) (8322 8822) (8808) (9094 9394) (9288) (8780 9080) (8266 8766) (8752) (9038 9338) (9230) (8722 9022) (8208 8708) (8694) (8978 9278) (9170) (8662 8962) (8148 8648) (8632) (8916 9216) (9110) (8602 8902) (8086 8586) (8570) (8854 9154) (9046) (8538 8838) (8020 8520) (8504) (8788 9088) (8978) (8470 8770) (7954 8454) (8436) (8718 9018) (8910) (8402 8702) (7884 8384) (8366) (8648 8948) (8838) (8330 8630) (7810 8310) (8292) (8572 8872) (8764) (8254 8554) (7734 8234) (8214) (8496 8796) (8686) (8176 8476) (7654 8154) (8134) (8414 8714) (8604) (8092 8392) (7572 8072) (8050) (8328 8628) (8518) (8006 8306) (7484 7984) (7962) (8238 8538) (8426) (7914 8214) (7392 7892) (7868) (8144 8444) (8330) (7818 8118) (7294 7794) (7768) (8042 8342) (8230) (7716 8016) (7190 7690) (8864) (9150 9450) (9344) (8836 9136) (8322 8822) (8808) (9094 9394) (9288) (8780 9080) (8266 8766) (8752) (9038 9338) (9230) (8722 9022) (8208 8708) (8694) (8978 9278) (9170) (8662 8962) (8148 8648) (8632) (8916 9216) (9110) (8602 8902) (8086 8586) (8570) (8854 9154) (9046) (8538 8838) (8020 8520) (8504) (8788 9088) (8978) (8470 8770) (7954 8454) (8436) (8718 9018) (8910) (8402 8702) (7884 8384) (8366) (8648 8948) (8838) (8330 8630) (7810 8310) (8292) (8572 8872) (8764) (8254 8554) (7734 8234) (8214) (8496 8796) (8686) (8176 8476) (7654 8154) (8134) (8414 8714) (8604) (8092 8392) (7572 8072) (8050) (8328 8628) (8518) (8006 8306) (7484 7984) (7962) (8238 8538) (8426) (7914 8214) (7392 7892) (7868) (8144 8444) (8330) (7818 8118) (7294 7794) (7768) (8042 8342) (8230) (7716 8016) (7190 7690))) :lonset (quote (0 65 98 131 198 266 334 368 403 473 543 614 650 686 759 833 907 945 982 1058 1135 1213 1252 1291 1371 1451 1532 1573 1614 1697 1781 1866 1908 1951 2038 2126 2214 2259 2303 2394 2485 2578 2624 2671 2766 2861 2957 3006 3055 3154 3253 3354 3405 3456 3559 3663 3768 3821 3875 3982 4091 4201 4256 4312 4424 4538 4652 4710 4768 4886 5004 5124 5184 5245 5367 5491 5616 5679 5743 5871 6000 6065 6098 6131 6198 6266 6334 6368 6403 6473 6543 6614 6650 6686 6759 6833 6907 6945 6982 7058 7135 7213 7252 7291 7371 7451 7532 7573 7614 7697 7781 7866 7908 7951 8038 8126 8214 8259 8303 8394 8485 8578 8624 8671 8766 8861 8957 9006 9055 9154 9253 9354 9405 9456 9559 9663 9768 9821 9875 9982 10091 10201 10256 10312 10424 10538 10652 10710 10768 10886 11004 11124 11184 11245 11367 11491 11616 11679 11743 11871 12000 12065 12098 12131 12198 12266 12334 12368 12403 12473 12543 12614 12650 12686 12759 12833 12907 12945 12982 13058 13135 13213 13252 13291 13371 13451 13532 13573 13614 13697 13781 13866 13908 13951 14038 14126 14214 14259 14303 14394 14485 14578 14624 14671 14766 14861 14957 15006 15055 15154 15253 15354 15405 15456 15559 15663 15768 15821 15875 15982 16091 16201 16256 16312 16424 16538 16652 16710 16768 16886 17004 17124 17184 17245 17367 17491 17616 17679 17743 17871 18000 18065 18098 18131 18198 18266 18334 18368 18403 18473 18543 18614 18650 18686 18759 18833 18907 18945 18982 19058 19135 19213 19252 19291 19371 19451 19532 19573 19614 19697 19781 19866 19908 19951 20038 20126 20214 20259 20303 20394 20485 20578 20624 20671 20766 20861 20957 21006 21055 21154 21253 21354 21405 21456 21559 21663 21768 21821 21875 21982 22091 22201 22256 22312 22424 22538 22652 22710 22768 22886 23004 23124 23184 23245 23367 23491 23616 23679 23743 23871 24000 24065 24098 24131 24198 24266 24334 24368 24403 24473 24543 24614 24650 24686 24759 24833 24907 24945 24982 25058 25135 25213 25252 25291 25371 25451 25532 25573 25614 25697 25781 25866 25908 25951 26038 26126 26214 26259 26303 26394 26485 26578 26624 26671 26766 26861 26957 27006 27055 27154 27253 27354 27405 27456 27559 27663 27768 27821 27875 27982 28091 28201 28256 28312 28424 28538 28652 28710 28768 28886 29004 29124 29184 29245 29367 29491 29616 29679 29743 29871 30000 30065 30098 30131 30198 30266 30334 30368 30403 30473 30543 30614 30650 30686 30759 30833 30907 30945 30982 31058 31135 31213 31252 31291 31371 31451 31532 31573 31614 31697 31781 31866 31908 31951 32038 32126 32214 32259 32303 32394 32485 32578 32624 32671 32766 32861 32957 33006 33055 33154 33253 33354 33405 33456 33559 33663 33768 33821 33875 33982 34091 34201 34256 34312 34424 34538 34652 34710 34768 34886 35004 35124 35184 35245 35367 35491 35616 35679 35743 35871 36004)) :ldur (quote ((68) (34 34) (34) (69 69) (69 69) (70) (35 35) (35) (71 71) (72 72) (72) (36 36) (37) (73 73) (74 74) (75) (38 38) (38) (76 76) (77 77) (77) (39 39) (39) (79 79) (79 79) (80) (40 40) (41) (82 82) (82 82) (83) (42 42) (42) (85 85) (86 86) (87) (44 44) (44) (88 88) (89 89) (90) (46 46) (46) (92 92) (93 93) (94) (48 48) (48) (96 96) (97 97) (98) (50 50) (50) (101 101) (102 102) (103) (52 52) (52) (106 106) (107 107) (108) (55 55) (55) (111 111) (112 112) (114) (58 58) (58) (117 117) (119 119) (120) (61 61) (61) (124 124) (125 125) (127) (65 65) (65) (131 131) (133 133) (68) (34 34) (34) (69 69) (69 69) (70) (35 35) (35) (71 71) (72 72) (72) (36 36) (37) (73 73) (74 74) (75) (38 38) (38) (76 76) (77 77) (77) (39 39) (39) (79 79) (79 79) (80) (40 40) (41) (82 82) (82 82) (83) (42 42) (42) (85 85) (86 86) (87) (44 44) (44) (88 88) (89 89) (90) (46 46) (46) (92 92) (93 93) (94) (48 48) (48) (96 96) (97 97) (98) (50 50) (50) (101 101) (102 102) (103) (52 52) (52) (106 106) (107 107) (108) (55 55) (55) (111 111) (112 112) (114) (58 58) (58) (117 117) (119 119) (120) (61 61) (61) (124 124) (125 125) (127) (65 65) (65) (131 131) (133 133) (68) (34 34) (34) (69 69) (69 69) (70) (35 35) (35) (71 71) (72 72) (72) (36 36) (37) (73 73) (74 74) (75) (38 38) (38) (76 76) (77 77) (77) (39 39) (39) (79 79) (79 79) (80) (40 40) (41) (82 82) (82 82) (83) (42 42) (42) (85 85) (86 86) (87) (44 44) (44) (88 88) (89 89) (90) (46 46) (46) (92 92) (93 93) (94) (48 48) (48) (96 96) (97 97) (98) (50 50) (50) (101 101) (102 102) (103) (52 52) (52) (106 106) (107 107) (108) (55 55) (55) (111 111) (112 112) (114) (58 58) (58) (117 117) (119 119) (120) (61 61) (61) (124 124) (125 125) (127) (65 65) (65) (131 131) (133 133) (68) (34 34) (34) (69 69) (69 69) (70) (35 35) (35) (71 71) (72 72) (72) (36 36) (37) (73 73) (74 74) (75) (38 38) (38) (76 76) (77 77) (77) (39 39) (39) (79 79) (79 79) (80) (40 40) (41) (82 82) (82 82) (83) (42 42) (42) (85 85) (86 86) (87) (44 44) (44) (88 88) (89 89) (90) (46 46) (46) (92 92) (93 93) (94) (48 48) (48) (96 96) (97 97) (98) (50 50) (50) (101 101) (102 102) (103) (52 52) (52) (106 106) (107 107) (108) (55 55) (55) (111 111) (112 112) (114) (58 58) (58) (117 117) (119 119) (120) (61 61) (61) (124 124) (125 125) (127) (65 65) (65) (131 131) (133 133) (68) (34 34) (34) (69 69) (69 69) (70) (35 35) (35) (71 71) (72 72) (72) (36 36) (37) (73 73) (74 74) (75) (38 38) (38) (76 76) (77 77) (77) (39 39) (39) (79 79) (79 79) (80) (40 40) (41) (82 82) (82 82) (83) (42 42) (42) (85 85) (86 86) (87) (44 44) (44) (88 88) (89 89) (90) (46 46) (46) (92 92) (93 93) (94) (48 48) (48) (96 96) (97 97) (98) (50 50) (50) (101 101) (102 102) (103) (52 52) (52) (106 106) (107 107) (108) (55 55) (55) (111 111) (112 112) (114) (58 58) (58) (117 117) (119 119) (120) (61 61) (61) (124 124) (125 125) (127) (65 65) (65) (131 131) (133 133) (68) (34 34) (34) (69 69) (69 69) (70) (35 35) (35) (71 71) (72 72) (72) (36 36) (37) (73 73) (74 74) (75) (38 38) (38) (76 76) (77 77) (77) (39 39) (39) (79 79) (79 79) (80) (40 40) (41) (82 82) (82 82) (83) (42 42) (42) (85 85) (86 86) (87) (44 44) (44) (88 88) (89 89) (90) (46 46) (46) (92 92) (93 93) (94) (48 48) (48) (96 96) (97 97) (98) (50 50) (50) (101 101) (102 102) (103) (52 52) (52) (106 106) (107 107) (108) (55 55) (55) (111 111) (112 112) (114) (58 58) (58) (117 117) (119 119) (120) (61 61) (61) (124 124) (125 125) (127) (65 65) (65) (131 131) (133 133))) :lvel (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (1 1) (1 1) (1) (1 1) (1) (1 1) (1 1) (2) (1 1) (2) (2 2) (2 2) (3) (2 2) (2) (4 4) (3 3) (4) (3 3) (4) (5 5) (4 4) (6) (4 4) (5) (7 7) (6 6) (8) (6 6) (7) (10 10) (7 7) (11) (7 7) (9) (13 13) (9 9) (14) (9 9) (11) (16 16) (12 12) (18) (12 12) (14) (20 20) (15 15) (22) (15 15) (17) (24 24) (18 18) (27) (18 18) (20) (29 29) (22 22) (32) (21 21) (24) (35 35) (26 26) (38) (25 25) (28) (41 41) (30 30) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (1 1) (1 1) (1) (1 1) (1) (1 1) (1 1) (2) (1 1) (2) (2 2) (2 2) (3) (2 2) (2) (4 4) (3 3) (4) (3 3) (4) (5 5) (4 4) (6) (4 4) (5) (7 7) (6 6) (8) (6 6) (7) (10 10) (7 7) (11) (7 7) (9) (13 13) (9 9) (14) (9 9) (11) (16 16) (12 12) (18) (12 12) (14) (20 20) (15 15) (22) (15 15) (17) (24 24) (18 18) (27) (18 18) (20) (29 29) (22 22) (32) (21 21) (24) (35 35) (26 26) (38) (25 25) (28) (41 41) (30 30) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (1 1) (1 1) (1) (1 1) (1) (1 1) (1 1) (2) (1 1) (2) (2 2) (2 2) (3) (2 2) (2) (4 4) (3 3) (4) (3 3) (4) (5 5) (4 4) (6) (4 4) (5) (7 7) (6 6) (8) (6 6) (7) (10 10) (7 7) (11) (7 7) (9) (13 13) (9 9) (14) (9 9) (11) (16 16) (12 12) (18) (12 12) (14) (20 20) (15 15) (22) (15 15) (17) (24 24) (18 18) (27) (18 18) (20) (29 29) (22 22) (32) (21 21) (24) (35 35) (26 26) (38) (25 25) (28) (41 41) (30 30) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (1 1) (1 1) (1) (1 1) (1) (1 1) (1 1) (2) (1 1) (2) (2 2) (2 2) (3) (2 2) (2) (4 4) (3 3) (4) (3 3) (4) (5 5) (4 4) (6) (4 4) (5) (7 7) (6 6) (8) (6 6) (7) (10 10) (7 7) (11) (7 7) (9) (13 13) (9 9) (14) (9 9) (11) (16 16) (12 12) (18) (12 12) (14) (20 20) (15 15) (22) (15 15) (17) (24 24) (18 18) (27) (18 18) (20) (29 29) (22 22) (32) (21 21) (24) (35 35) (26 26) (38) (25 25) (28) (41 41) (30 30) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (1 1) (1 1) (1) (1 1) (1) (1 1) (1 1) (2) (1 1) (2) (2 2) (2 2) (3) (2 2) (2) (4 4) (3 3) (4) (3 3) (4) (5 5) (4 4) (6) (4 4) (5) (7 7) (6 6) (8) (6 6) (7) (10 10) (7 7) (11) (7 7) (9) (13 13) (9 9) (14) (9 9) (11) (16 16) (12 12) (18) (12 12) (14) (20 20) (15 15) (22) (15 15) (17) (24 24) (18 18) (27) (18 18) (20) (29 29) (22 22) (32) (21 21) (24) (35 35) (26 26) (38) (25 25) (28) (41 41) (30 30) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (1 1) (1 1) (1) (1 1) (1) (1 1) (1 1) (2) (1 1) (2) (2 2) (2 2) (3) (2 2) (2) (4 4) (3 3) (4) (3 3) (4) (5 5) (4 4) (6) (4 4) (5) (7 7) (6 6) (8) (6 6) (7) (10 10) (7 7) (11) (7 7) (9) (13 13) (9 9) (14) (9 9) (11) (16 16) (12 12) (18) (12 12) (14) (20 20) (15 15) (22) (15 15) (17) (24 24) (18 18) (27) (18 18) (20) (29 29) (22 22) (32) (21 21) (24) (35 35) (26 26) (38) (25 25) (28) (41 41) (30 30))) :loffset (quotelchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7664) (7936 8236) (8122) (7608 7908) (7080 7580) (7552) (7822 8122) (8008) (7494 7794) (6962 7462) (7432) (7702 8002) (7886) (7370 7670) (6838 7338) (7304) (7570 7870) (7754) (7236 7536) (6702 7202) (7166) (7430 7730) (7610) (7092 7392) (6554 7054) (7014) (7276 7576) (7454) (6934 7234) (6392 6892) (6850) (7106 7406) (7284) (6762 7062) (6214 6714) (6668) (6918 7218) (7094) (6568 6868) (6016 6516) (7664) (7936 8236) (8122) (7608 7908) (7080 7580) (7552) (7822 8122) (8008) (7494 7794) (6962 7462) (7432) (7702 8002) (7886) (7370 7670) (6838 7338) (7304) (7570 7870) (7754) (7236 7536) (6702 7202) (7166) (7430 7730) (7610) (7092 7392) (6554 7054) (7014) (7276 7576) (7454) (6934 7234) (6392 6892) (6850) (7106 7406) (7284) (6762 7062) (6214 6714) (6668) (6918 7218) (7094) (6568 6868) (6016 6516) (7664) (7936 8236) (8122) (7608 7908) (7080 7580) (7552) (7822 8122) (8008) (7494 7794) (6962 7462) (7432) (7702 8002) (7886) (7370 7670) (6838 7338) (7304) (7570 7870) (7754) (7236 7536) (6702 7202) (7166) (7430 7730) (7610) (7092 7392) (6554 7054) (7014) (7276 7576) (7454) (6934 7234) (6392 6892) (6850) (7106 7406) (7284) (6762 7062) (6214 6714) (6668) (6918 7218) (7094) (6568 6868) (6016 6516) (7664) (7936 8236) (8122) (7608 7908) (7080 7580) (7552) (7822 8122) (8008) (7494 7794) (6962 7462) (7432) (7702 8002) (7886) (7370 7670) (6838 7338) (7304) (7570 7870) (7754) (7236 7536) (6702 7202) (7166) (7430 7730) (7610) (7092 7392) (6554 7054) (7014) (7276 7576) (7454) (6934 7234) (6392 6892) (6850) (7106 7406) (7284) (6762 7062) (6214 6714) (6668) (6918 7218) (7094) (6568 6868) (6016 6516) (7664) (7936 8236) (8122) (7608 7908) (7080 7580) (7552) (7822 8122) (8008) (7494 7794) (6962 7462) (7432) (7702 8002) (7886) (7370 7670) (6838 7338) (7304) (7570 7870) (7754) (7236 7536) (6702 7202) (7166) (7430 7730) (7610) (7092 7392) (6554 7054) (7014) (7276 7576) (7454) (6934 7234) (6392 6892) (6850) (7106 7406) (7284) (6762 7062) (6214 6714) (6668) (6918 7218) (7094) (6568 6868) (6016 6516) (7664) (7936 8236) (8122) (7608 7908) (7080 7580) (7552) (7822 8122) (8008) (7494 7794) (6962 7462) (7432) (7702 8002) (7886) (7370 7670) (6838 7338) (7304) (7570 7870) (7754) (7236 7536) (6702 7202) (7166) (7430 7730) (7610) (7092 7392) (6554 7054) (7014) (7276 7576) (7454) (6934 7234) (6392 6892) (6850) (7106 7406) (7284) (6762 7062) (6214 6714) (6668) (6918 7218) (7094) (6568 6868) (6016 6516))) :lonset (quote (0 131 198 266 403 543 686 759 833 982 1135 1291 1371 1451 1614 1781 1951 2038 2126 2303 2485 2671 2766 2861 3055 3253 3456 3559 3663 3875 4091 4312 4424 4538 4768 5004 5245 5367 5491 5743 6000 6131 6198 6266 6403 6543 6686 6759 6833 6982 7135 7291 7371 7451 7614 7781 7951 8038 8126 8303 8485 8671 8766 8861 9055 9253 9456 9559 9663 9875 10091 10312 10424 10538 10768 11004 11245 11367 11491 11743 12000 12131 12198 12266 12403 12543 12686 12759 12833 12982 13135 13291 13371 13451 13614 13781 13951 14038 14126 14303 14485 14671 14766 14861 15055 15253 15456 15559 15663 15875 16091 16312 16424 16538 16768 17004 17245 17367 17491 17743 18000 18131 18198 18266 18403 18543 18686 18759 18833 18982 19135 19291 19371 19451 19614 19781 19951 20038 20126 20303 20485 20671 20766 20861 21055 21253 21456 21559 21663 21875 22091 22312 22424 22538 22768 23004 23245 23367 23491 23743 24000 24131 24198 24266 24403 24543 24686 24759 24833 24982 25135 25291 25371 25451 25614 25781 25951 26038 26126 26303 26485 26671 26766 26861 27055 27253 27456 27559 27663 27875 28091 28312 28424 28538 28768 29004 29245 29367 29491 29743 30000 30131 30198 30266 30403 30543 30686 30759 30833 30982 31135 31291 31371 31451 31614 31781 31951 32038 32126 32303 32485 32671 32766 32861 33055 33253 33456 33559 33663 33875 34091 34312 34424 34538 34768 35004 35245 35367 35491 35743 36005)) :ldur (quote ((135) (69 69) (69) (140 140) (142 142) (144) (73 73) (74) (149 149) (152 152) (155) (79 79) (79) (160 160) (163 163) (166) (85 85) (86) (173 173) (177 177) (180) (92 92) (93) (188 188) (192 192) (197) (101 101) (102) (206 206) (211 211) (216) (111 111) (112) (228 228) (234 234) (240) (124 124) (125) (255 255) (262 262) (135) (69 69) (69) (140 140) (142 142) (144) (73 73) (74) (149 149) (152 152) (155) (79 79) (79) (160 160) (163 163) (166) (85 85) (86) (173 173) (177 177) (180) (92 92) (93) (188 188) (192 192) (197) (101 101) (102) (206 206) (211 211) (216) (111 111) (112) (228 228) (234 234) (240) (124 124) (125) (255 255) (262 262) (135) (69 69) (69) (140 140) (142 142) (144) (73 73) (74) (149 149) (152 152) (155) (79 79) (79) (160 160) (163 163) (166) (85 85) (86) (173 173) (177 177) (180) (92 92) (93) (188 188) (192 192) (197) (101 101) (102) (206 206) (211 211) (216) (111 111) (112) (228 228) (234 234) (240) (124 124) (125) (255 255) (262 262) (135) (69 69) (69) (140 140) (142 142) (144) (73 73) (74) (149 149) (152 152) (155) (79 79) (79) (160 160) (163 163) (166) (85 85) (86) (173 173) (177 177) (180) (92 92) (93) (188 188) (192 192) (197) (101 101) (102) (206 206) (211 211) (216) (111 111) (112) (228 228) (234 234) (240) (124 124) (125) (255 255) (262 262) (135) (69 69) (69) (140 140) (142 142) (144) (73 73) (74) (149 149) (152 152) (155) (79 79) (79) (160 160) (163 163) (166) (85 85) (86) (173 173) (177 177) (180) (92 92) (93) (188 188) (192 192) (197) (101 101) (102) (206 206) (211 211) (216) (111 111) (112) (228 228) (234 234) (240) (124 124) (125) (255 255) (262 262) (135) (69 69) (69) (140 140) (142 142) (144) (73 73) (74) (149 149) (152 152) (155) (79 79) (79) (160 160) (163 163) (166) (85 85) (86) (173 173) (177 177) (180) (92 92) (93) (188 188) (192 192) (197) (101 101) (102) (206 206) (211 211) (216) (111 111) (112) (228 228) (234 234) (240) (124 124) (125) (255 255) (262 262))) :lvel (quote ((44) (29 29) (33) (47 47) (35 35) (51) (33 33) (38) (55 55) (40 40) (59) (38 38) (44) (63 63) (46 46) (67) (44 44) (50) (72 72) (53 53) (77) (50 50) (57) (81 81) (59 59) (86) (56 56) (64) (91 91) (66 66) (96) (62 62) (71) (101 101) (73 73) (106) (68 68) (78) (111 111) (80 80) (44) (29 29) (33) (47 47) (35 35) (51) (33 33) (38) (55 55) (40 40) (59) (38 38) (44) (63 63) (46 46) (67) (44 44) (50) (72 72) (53 53) (77) (50 50) (57) (81 81) (59 59) (86) (56 56) (64) (91 91) (66 66) (96) (62 62) (71) (101 101) (73 73) (106) (68 68) (78) (111 111) (80 80) (44) (29 29) (33) (47 47) (35 35) (51) (33 33) (38) (55 55) (40 40) (59) (38 38) (44) (63 63) (46 46) (67) (44 44) (50) (72 72) (53 53) (77) (50 50) (57) (81 81) (59 59) (86) (56 56) (64) (91 91) (66 66) (96) (62 62) (71) (101 101) (73 73) (106) (68 68) (78) (111 111) (80 80) (44) (29 29) (33) (47 47) (35 35) (51) (33 33) (38) (55 55) (40 40) (59) (38 38) (44) (63 63) (46 46) (67) (44 44) (50) (72 72) (53 53) (77) (50 50) (57) (81 81) (59 59) (86) (56 56) (64) (91 91) (66 66) (96) (62 62) (71) (101 101) (73 73) (106) (68 68) (78) (111 111) (80 80) (44) (29 29) (33) (47 47) (35 35) (51) (33 33) (38) (55 55) (40 40) (59) (38 38) (44) (63 63) (46 46) (67) (44 44) (50) (72 72) (53 53) (77) (50 50) (57) (81 81) (59 59) (86) (56 56) (64) (91 91) (66 66) (96) (62 62) (71) (101 101) (73 73) (106) (68 68) (78) (111 111) (80 80) (44) (29 29) (33) (47 47) (35 35) (51) (33 33) (38) (55 55) (40 40) (59) (38 38) (44) (63 63) (46 46) (67) (44 44) (50) (72 72) (53 53) (77) (50 50) (57) (81 81) (59 59) (86) (56 56) (64) (91 91) (66 66) (96) (62 62) (71) (101 101) (73 73) (106) (68 68) (78) (111 111) (80 80))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6464) (6708 7008) (6880) (6352 6652) (5794 6294) (6232) (6470 6770) (6638) (6104 6404) (5536 6036) (5966) (6192 6492) (6354) (5814 6114) (5234 5734) (5650) (5862 6162) (6014) (5468 5768) (4868 5368) (6464) (6708 7008) (6880) (6352 6652) (5794 6294) (6232) (6470 6770) (6638) (6104 6404) (5536 6036) (5966) (6192 6492) (6354) (5814 6114) (5234 5734) (5650) (5862 6162) (6014) (5468 5768) (4868 5368) (6464) (6708 7008) (6880) (6352 6652) (5794 6294) (6232) (6470 6770) (6638) (6104 6404) (5536 6036) (5966) (6192 6492) (6354) (5814 6114) (5234 5734) (5650) (5862 6162) (6014) (5468 5768) (4868 5368) (6464) (6708 7008) (6880) (6352 6652) (5794 6294) (6232) (6470 6770) (6638) (6104 6404) (5536 6036) (5966) (6192 6492) (6354) (5814 6114) (5234 5734) (5650) (5862 6162) (6014) (5468 5768) (4868 5368) (6464) (6708 7008) (6880) (6352 6652) (5794 6294) (6232) (6470 6770) (6638) (6104 6404) (5536 6036) (5966) (6192 6492) (6354) (5814 6114) (5234 5734) (5650) (5862 6162) (6014) (5468 5768) (4868 5368) (6464) (6708 7008) (6880) (6352 6652) (5794 6294) (6232) (6470 6770) (6638) (6104 6404) (5536 6036) (5966) (6192 6492) (6354) (5814 6114) (5234 5734) (5650) (5862 6162) (6014) (5468 5768) (4868 5368))) :lonset (quote (0 266 403 543 833 1135 1451 1614 1781 2126 2485 2861 3055 3253 3663 4091 4538 4768 5004 5491 6000 6266 6403 6543 6833 7135 7451 7614 7781 8126 8485 8861 9055 9253 9663 10091 10538 10768 11004 11491 12000 12266 12403 12543 12833 13135 13451 13614 13781 14126 14485 14861 15055 15253 15663 16091 16538 16768 17004 17491 18000 18266 18403 18543 18833 19135 19451 19614 19781 20126 20485 20861 21055 21253 21663 22091 22538 22768 23004 23491 24000 24266 24403 24543 24833 25135 25451 25614 25781 26126 26485 26861 27055 27253 27663 28091 28538 28768 29004 29491 30000 30266 30403 30543 30833 31135 31451 31614 31781 32126 32485 32861 33055 33253 33663 34091 34538 34768 35004 35491 36000)) :ldur (quote ((271) (140 140) (142) (289 289) (298 298) (309) (160 160) (163) (333 333) (346 346) (361) (188 188) (192) (393 393) (412 412) (433) (228 228) (234) (481 481) (509 509) (271) (140 140) (142) (289 289) (298 298) (309) (160 160) (163) (333 333) (346 346) (361) (188 188) (192) (393 393) (412 412) (433) (228 228) (234) (481 481) (509 509) (271) (140 140) (142) (289 289) (298 298) (309) (160 160) (163) (333 333) (346 346) (361) (188 188) (192) (393 393) (412 412) (433) (228 228) (234) (481 481) (509 509) (271) (140 140) (142) (289 289) (298 298) (309) (160 160) (163) (333 333) (346 346) (361) (188 188) (192) (393 393) (412 412) (433) (228 228) (234) (481 481) (509 509) (271) (140 140) (142) (289 289) (298 298) (309) (160 160) (163) (333 333) (346 346) (361) (188 188) (192) (393 393) (412 412) (433) (228 228) (234) (481 481) (509 509) (271) (140 140) (142) (289 289) (298 298) (309) (160 160) (163) (333 333) (346 346) (361) (188 188) (192) (393 393) (412 412) (433) (228 228) (234) (481 481) (509 509))) :lvel (quote ((115) (74 74) (84) (119 119) (85 85) (122) (78 78) (88) (125 125) (89 89) (127) (80 80) (90) (127 127) (90 90) (125) (78 78) (87) (121 121) (84 84) (115) (74 74) (84) (119 119) (85 85) (122) (78 78) (88) (125 125) (89 89) (127) (80 80) (90) (127 127) (90 90) (125) (78 78) (87) (121 121) (84 84) (115) (74 74) (84) (119 119) (85 85) (122) (78 78) (88) (125 125) (89 89) (127) (80 80) (90) (127 127) (90 90) (125) (78 78) (87) (121 121) (84 84) (115) (74 74) (84) (119 119) (85 85) (122) (78 78) (88) (125 125) (89 89) (127) (80 80) (90) (127 127) (90 90) (125) (78 78) (87) (121 121) (84 84) (115) (74 74) (84) (119 119) (85 85) (122) (78 78) (88) (125 125) (89 89) (127) (80 80) (90) (127 127) (90 90) (125) (78 78) (87) (121 121) (84 84) (115) (74 74) (84) (119 119) (85 85) (122) (78 78) (88) (125 125) (89 89) (127) (80 80) (90) (127 127) (90 90) (125) (78 78) (87) (121 121) (84 84))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5264) (5452 5752) (5594) (5032 5332) (4404 4904) (4766) (4914 5214) (5034) (4450 4750) (3768 4268) (5264) (5452 5752) (5594) (5032 5332) (4404 4904) (4766) (4914 5214) (5034) (4450 4750) (3768 4268) (5264) (5452 5752) (5594) (5032 5332) (4404 4904) (4766) (4914 5214) (5034) (4450 4750) (3768 4268) (5264) (5452 5752) (5594) (5032 5332) (4404 4904) (4766) (4914 5214) (5034) (4450 4750) (3768 4268) (5264) (5452 5752) (5594) (5032 5332) (4404 4904) (4766) (4914 5214) (5034) (4450 4750) (3768 4268) (5264) (5452 5752) (5594) (5032 5332) (4404 4904) (4766) (4914 5214) (5034) (4450 4750) (3768 4268))) :lonset (quote (0 543 833 1135 1781 2485 3253 3663 4091 5004 6000 6543 6833 7135 7781 8485 9253 9663 10091 11004 12000 12543 12833 13135 13781 14485 15253 15663 16091 17004 18000 18543 18833 19135 19781 20485 21253 21663 22091 23004 24000 24543 24833 25135 25781 26485 27253 27663 28091 29004 30000 30543 30833 31135 31781 32485 33253 33663 34091 35004 35966)) :ldur (quote ((541) (289 289) (298) (618 618) (666 666) (721) (393 393) (412) (866 866) (962 962) (541) (289 289) (298) (618 618) (666 666) (721) (393 393) (412) (866 866) (962 962) (541) (289 289) (298) (618 618) (666 666) (721) (393 393) (412) (866 866) (962 962) (541) (289 289) (298) (618 618) (666 666) (721) (393 393) (412) (866 866) (962 962) (541) (289 289) (298) (618 618) (666 666) (721) (393 393) (412) (866 866) (962 962) (541) (289 289) (298) (618 618) (666 666) (721) (393 393) (412) (866 866) (962 962))) :lvel (quote ((115) (69 69) (76) (105 105) (69 69) (90) (50 50) (53) (69 69) (40 40) (115) (69 69) (76) (105 105) (69 69) (90) (50 50) (53) (69 69) (40 40) (115) (69 69) (76) (105 105) (69 69) (90) (50 50) (53) (69 69) (40 40) (115) (69 69) (76) (105 105) (69 69) (90) (50 50) (53) (69 69) (40 40) (115) (69 69) (76) (105 105) (69 69) (90) (50 50) (53) (69 69) (40 40) (115) (69 69) (76) (105 105) (69 69) (90) (50 50) (53) (69 69) (40 40))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4064) (4132 4432) (4204) (3566 3866) (2750 3250) (4064) (4132 4432) (4204) (3566 3866) (2750 3250) (4064) (4132 4432) (4204) (3566 3866) (2750 3250) (4064) (4132 4432) (4204) (3566 3866) (2750 3250) (4064) (4132 4432) (4204) (3566 3866) (2750 3250) (4064) (4132 4432) (4204) (3566 3866) (2750 3250))) :lonset (quote (0 1135 1781 2485 4091 6000 7135 7781 8485 10091 12000 13135 13781 14485 16091 18000 19135 19781 20485 22091 24000 25135 25781 26485 28091 30000 31135 31781 32485 34091 35822)) :ldur (quote ((1082) (618 618) (666) (1443 1443) (1731 1731) (1082) (618 618) (666) (1443 1443) (1731 1731) (1082) (618 618) (666) (1443 1443) (1731 1731) (1082) (618 618) (666) (1443 1443) (1731 1731) (1082) (618 618) (666) (1443 1443) (1731 1731) (1082) (618 618) (666) (1443 1443) (1731 1731))) :lvel (quote ((44) (19 19) (16) (16 16) (4 4) (44) (19 19) (16) (16 16) (4 4) (44) (19 19) (16) (16 16) (4 4) (44) (19 19) (16) (16 16) (4 4) (44) (19 19) (16) (16 16) (4 4) (44) (19 19) (16) (16 16) (4 4))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 311 74) (om-make-point 980 735) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 80 30) (quote "repetitions") "" (om-make-point 427 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 53 30) (quote "voices") "" (om-make-point 370 309) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 30) (quote "speed factor") "" (om-make-point 263 309) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 449 338) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 371 338) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 288 338) (om-make-point 38 30) 3.0 "3.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU 2" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "no transp." "period-wise transp." "chord-wise transp.")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 562 314) (om-make-point 170 44) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 150 26) "untitled" :range (quote ("no transp." "period-wise transp." "chord-wise transp."))))) (om-set-selected-item-index rep (quote 2)) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "accelerando" "ritardando")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 498 275) (om-make-point 130 44) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 110 26) "untitled" :range (quote ("accelerando" "ritardando"))))) (om-set-selected-item-index rep (quote 1)) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RISSET-RHYTHM" (quote risset-rhythm) (quote ((om-load-inputfun (quote input-funbox) "chord-seq" "SELF" (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6700))) :lonset (quote (0 250 500 750 1750)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (om-load-inputfun (quote input-funbox) "number" "SPEED" 1.0) (om-load-inputfun (quote input-funbox) "integer" "VOICES" 4) (om-load-inputfun (quote input-funbox) "integer" "REP" 4) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "ONSET-MODE" 0 (list (list "accelerando" 0) (list "ritardando" 1))) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MC-MODE" 2 (list (list "preserve pitch" 0) (list "period-wise transp." 1) (list "chord-wise transp." 2))))) (om-make-point 149 378) (om-make-point 548 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pattern" (let ((copy (make-instance (quote ominstance) :name "pattern" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (5700 6000) (5900) (5400 5700) (4900 5400))) :lonset (quote (0 500 750 1000 1500 2000)) :ldur (quote ((500) (250 250) (250) (500 500) (500 500))) :lvel (quote ((127) (80 80) (90) (127 127) (90 90))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 569 273) (om-make-point 209 51) 0 1 (quote :normal) (quote t) nil))) (setf (create-info copy) (quote ("2021/05/15 8:52:11" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 207 121) "pattern" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 250)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 127 (list 80 80) 90 (list 127 127) (list 90 90))) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 210 182) (om-make-point 170 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (5700 6000) (5900) (5400 5700) (4900 5400))) :lonset (quote (0 500 750 1000 1500 2000)) :ldur (quote ((500) (250 250) (250) (500 500) (500 500))) :lvel (quote ((127) (80 80) (90) (127 127) (90 90))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 569 273) (om-make-point 209 51) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 5 1 nil 0) (16 0 14 0 nil 0) (11 0 14 1 nil 0) (10 0 14 2 nil 0) (9 0 14 3 nil 0) (13 0 14 4 nil 0) (12 0 14 5 nil 0) (15 0 16 0 nil 0))) nil 6.18))
