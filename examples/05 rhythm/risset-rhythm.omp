; OM File Header - Saved 2021/06/21 11:11:31
; (6.19 :patc (om-make-point 10 10) (om-make-point 178 25) (om-make-point 772 831) "" 183 0 "2021/05/15 8:50:02" "2021/06/21 11:11:31")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "risset-rhythm" (quote ((let ((box (om-load-boxcomment "comment 8" (om-make-point 484 98) (quote "Risset-rhythm builds a seemingly eternal accelerando/ritardando, based on an input CHORD-SEQ, a speed factor, number of voices, number of repetitions.") "" (om-make-point 20 60) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 79 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 103 10) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 132 30) (quote "transposition mode") "" (om-make-point 634 352) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 99 30) (quote "agogics mode") "" (om-make-point 497 247) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 69 459) (om-make-point 528 428) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7664) (7990 8290) (8204) (7716 8016) (7242 7742) (7768) (8094 8394) (8306) (7818 8118) (7344 7844) (7868) (8192 8492) (8404) (7914 8214) (7438 7938) (7962) (8284 8584) (8494) (8006 8306) (7528 8028) (8050) (8372 8672) (8582) (8092 8392) (7614 8114) (8134) (8454 8754) (8664) (8176 8476) (7696 8196) (8214) (8534 8834) (8744) (8254 8554) (7772 8272) (8292) (8610 8910) (8820) (8330 8630) (7848 8348) (8366) (8684 8984) (8892) (8402 8702) (7918 8418) (8436) (8754 9054) (8962) (8470 8770) (7988 8488) (8504) (8820 9120) (9028) (8538 8838) (8054 8554) (8570) (8886 9186) (9094) (8602 8902) (8116 8616) (8632) (8948 9248) (9156) (8662 8962) (8178 8678) (8694) (9008 9308) (9216) (8722 9022) (8238 8738) (8752) (9066 9366) (9274) (8780 9080) (8294 8794) (8808) (9122 9422) (9330) (8836 9136) (8350 8850) (7664) (7990 8290) (8204) (7716 8016) (7242 7742) (7768) (8094 8394) (8306) (7818 8118) (7344 7844) (7868) (8192 8492) (8404) (7914 8214) (7438 7938) (7962) (8284 8584) (8494) (8006 8306) (7528 8028) (8050) (8372 8672) (8582) (8092 8392) (7614 8114) (8134) (8454 8754) (8664) (8176 8476) (7696 8196) (8214) (8534 8834) (8744) (8254 8554) (7772 8272) (8292) (8610 8910) (8820) (8330 8630) (7848 8348) (8366) (8684 8984) (8892) (8402 8702) (7918 8418) (8436) (8754 9054) (8962) (8470 8770) (7988 8488) (8504) (8820 9120) (9028) (8538 8838) (8054 8554) (8570) (8886 9186) (9094) (8602 8902) (8116 8616) (8632) (8948 9248) (9156) (8662 8962) (8178 8678) (8694) (9008 9308) (9216) (8722 9022) (8238 8738) (8752) (9066 9366) (9274) (8780 9080) (8294 8794) (8808) (9122 9422) (9330) (8836 9136) (8350 8850) (7664) (7990 8290) (8204) (7716 8016) (7242 7742) (7768) (8094 8394) (8306) (7818 8118) (7344 7844) (7868) (8192 8492) (8404) (7914 8214) (7438 7938) (7962) (8284 8584) (8494) (8006 8306) (7528 8028) (8050) (8372 8672) (8582) (8092 8392) (7614 8114) (8134) (8454 8754) (8664) (8176 8476) (7696 8196) (8214) (8534 8834) (8744) (8254 8554) (7772 8272) (8292) (8610 8910) (8820) (8330 8630) (7848 8348) (8366) (8684 8984) (8892) (8402 8702) (7918 8418) (8436) (8754 9054) (8962) (8470 8770) (7988 8488) (8504) (8820 9120) (9028) (8538 8838) (8054 8554) (8570) (8886 9186) (9094) (8602 8902) (8116 8616) (8632) (8948 9248) (9156) (8662 8962) (8178 8678) (8694) (9008 9308) (9216) (8722 9022) (8238 8738) (8752) (9066 9366) (9274) (8780 9080) (8294 8794) (8808) (9122 9422) (9330) (8836 9136) (8350 8850) (7664) (7990 8290) (8204) (7716 8016) (7242 7742) (7768) (8094 8394) (8306) (7818 8118) (7344 7844) (7868) (8192 8492) (8404) (7914 8214) (7438 7938) (7962) (8284 8584) (8494) (8006 8306) (7528 8028) (8050) (8372 8672) (8582) (8092 8392) (7614 8114) (8134) (8454 8754) (8664) (8176 8476) (7696 8196) (8214) (8534 8834) (8744) (8254 8554) (7772 8272) (8292) (8610 8910) (8820) (8330 8630) (7848 8348) (8366) (8684 8984) (8892) (8402 8702) (7918 8418) (8436) (8754 9054) (8962) (8470 8770) (7988 8488) (8504) (8820 9120) (9028) (8538 8838) (8054 8554) (8570) (8886 9186) (9094) (8602 8902) (8116 8616) (8632) (8948 9248) (9156) (8662 8962) (8178 8678) (8694) (9008 9308) (9216) (8722 9022) (8238 8738) (8752) (9066 9366) (9274) (8780 9080) (8294 8794) (8808) (9122 9422) (9330) (8836 9136) (8350 8850) (7664) (7990 8290) (8204) (7716 8016) (7242 7742) (7768) (8094 8394) (8306) (7818 8118) (7344 7844) (7868) (8192 8492) (8404) (7914 8214) (7438 7938) (7962) (8284 8584) (8494) (8006 8306) (7528 8028) (8050) (8372 8672) (8582) (8092 8392) (7614 8114) (8134) (8454 8754) (8664) (8176 8476) (7696 8196) (8214) (8534 8834) (8744) (8254 8554) (7772 8272) (8292) (8610 8910) (8820) (8330 8630) (7848 8348) (8366) (8684 8984) (8892) (8402 8702) (7918 8418) (8436) (8754 9054) (8962) (8470 8770) (7988 8488) (8504) (8820 9120) (9028) (8538 8838) (8054 8554) (8570) (8886 9186) (9094) (8602 8902) (8116 8616) (8632) (8948 9248) (9156) (8662 8962) (8178 8678) (8694) (9008 9308) (9216) (8722 9022) (8238 8738) (8752) (9066 9366) (9274) (8780 9080) (8294 8794) (8808) (9122 9422) (9330) (8836 9136) (8350 8850) (7664) (7990 8290) (8204) (7716 8016) (7242 7742) (7768) (8094 8394) (8306) (7818 8118) (7344 7844) (7868) (8192 8492) (8404) (7914 8214) (7438 7938) (7962) (8284 8584) (8494) (8006 8306) (7528 8028) (8050) (8372 8672) (8582) (8092 8392) (7614 8114) (8134) (8454 8754) (8664) (8176 8476) (7696 8196) (8214) (8534 8834) (8744) (8254 8554) (7772 8272) (8292) (8610 8910) (8820) (8330 8630) (7848 8348) (8366) (8684 8984) (8892) (8402 8702) (7918 8418) (8436) (8754 9054) (8962) (8470 8770) (7988 8488) (8504) (8820 9120) (9028) (8538 8838) (8054 8554) (8570) (8886 9186) (9094) (8602 8902) (8116 8616) (8632) (8948 9248) (9156) (8662 8962) (8178 8678) (8694) (9008 9308) (9216) (8722 9022) (8238 8738) (8752) (9066 9366) (9274) (8780 9080) (8294 8794) (8808) (9122 9422) (9330) (8836 9136) (8350 8850))) :lonset (quote (0 134 201 266 397 525 651 714 776 898 1020 1139 1198 1257 1373 1488 1601 1657 1712 1823 1932 2039 2092 2145 2250 2354 2456 2507 2558 2658 2757 2854 2903 2951 3047 3141 3235 3281 3328 3419 3510 3599 3644 3688 3776 3863 3949 3992 4035 4119 4203 4285 4327 4368 4449 4529 4609 4649 4688 4766 4844 4921 4959 4997 5073 5148 5222 5259 5296 5369 5441 5513 5549 5584 5655 5725 5795 5829 5864 5932 6000 6134 6201 6266 6397 6525 6651 6714 6776 6898 7020 7139 7198 7257 7373 7488 7601 7657 7712 7823 7932 8039 8092 8145 8250 8354 8456 8507 8558 8658 8757 8854 8903 8951 9047 9141 9235 9281 9328 9419 9510 9599 9644 9688 9776 9863 9949 9992 10035 10119 10203 10285 10327 10368 10449 10529 10609 10649 10688 10766 10844 10921 10959 10997 11073 11148 11222 11259 11296 11369 11441 11513 11549 11584 11655 11725 11795 11829 11864 11932 12000 12134 12201 12266 12397 12525 12651 12714 12776 12898 13020 13139 13198 13257 13373 13488 13601 13657 13712 13823 13932 14039 14092 14145 14250 14354 14456 14507 14558 14658 14757 14854 14903 14951 15047 15141 15235 15281 15328 15419 15510 15599 15644 15688 15776 15863 15949 15992 16035 16119 16203 16285 16327 16368 16449 16529 16609 16649 16688 16766 16844 16921 16959 16997 17073 17148 17222 17259 17296 17369 17441 17513 17549 17584 17655 17725 17795 17829 17864 17932 18000 18134 18201 18266 18397 18525 18651 18714 18776 18898 19020 19139 19198 19257 19373 19488 19601 19657 19712 19823 19932 20039 20092 20145 20250 20354 20456 20507 20558 20658 20757 20854 20903 20951 21047 21141 21235 21281 21328 21419 21510 21599 21644 21688 21776 21863 21949 21992 22035 22119 22203 22285 22327 22368 22449 22529 22609 22649 22688 22766 22844 22921 22959 22997 23073 23148 23222 23259 23296 23369 23441 23513 23549 23584 23655 23725 23795 23829 23864 23932 24000 24134 24201 24266 24397 24525 24651 24714 24776 24898 25020 25139 25198 25257 25373 25488 25601 25657 25712 25823 25932 26039 26092 26145 26250 26354 26456 26507 26558 26658 26757 26854 26903 26951 27047 27141 27235 27281 27328 27419 27510 27599 27644 27688 27776 27863 27949 27992 28035 28119 28203 28285 28327 28368 28449 28529 28609 28649 28688 28766 28844 28921 28959 28997 29073 29148 29222 29259 29296 29369 29441 29513 29549 29584 29655 29725 29795 29829 29864 29932 30000 30134 30201 30266 30397 30525 30651 30714 30776 30898 31020 31139 31198 31257 31373 31488 31601 31657 31712 31823 31932 32039 32092 32145 32250 32354 32456 32507 32558 32658 32757 32854 32903 32951 33047 33141 33235 33281 33328 33419 33510 33599 33644 33688 33776 33863 33949 33992 34035 34119 34203 34285 34327 34368 34449 34529 34609 34649 34688 34766 34844 34921 34959 34997 35073 35148 35222 35259 35296 35369 35441 35513 35549 35584 35655 35725 35795 35829 35864 35932 36000)) :ldur (quote ((135) (67 67) (66) (131 131) (129 129) (127) (63 63) (62) (124 124) (122 122) (120) (59 59) (59) (117 117) (115 115) (114) (56 56) (56) (111 111) (110 110) (108) (53 53) (53) (106 106) (104 104) (103) (51 51) (51) (101 101) (99 99) (98) (49 49) (48) (96 96) (95 95) (94) (47 47) (46) (92 92) (91 91) (90) (45 45) (44) (88 88) (87 87) (87) (43 43) (43) (85 85) (84 84) (83) (41 41) (41) (82 82) (81 81) (80) (40 40) (40) (79 79) (78 78) (77) (38 38) (38) (76 76) (75 75) (75) (37 37) (37) (73 73) (73 73) (72) (36 36) (36) (71 71) (70 70) (70) (35 35) (34) (69 69) (68 68) (135) (67 67) (66) (131 131) (129 129) (127) (63 63) (62) (124 124) (122 122) (120) (59 59) (59) (117 117) (115 115) (114) (56 56) (56) (111 111) (110 110) (108) (53 53) (53) (106 106) (104 104) (103) (51 51) (51) (101 101) (99 99) (98) (49 49) (48) (96 96) (95 95) (94) (47 47) (46) (92 92) (91 91) (90) (45 45) (44) (88 88) (87 87) (87) (43 43) (43) (85 85) (84 84) (83) (41 41) (41) (82 82) (81 81) (80) (40 40) (40) (79 79) (78 78) (77) (38 38) (38) (76 76) (75 75) (75) (37 37) (37) (73 73) (73 73) (72) (36 36) (36) (71 71) (70 70) (70) (35 35) (34) (69 69) (68 68) (135) (67 67) (66) (131 131) (129 129) (127) (63 63) (62) (124 124) (122 122) (120) (59 59) (59) (117 117) (115 115) (114) (56 56) (56) (111 111) (110 110) (108) (53 53) (53) (106 106) (104 104) (103) (51 51) (51) (101 101) (99 99) (98) (49 49) (48) (96 96) (95 95) (94) (47 47) (46) (92 92) (91 91) (90) (45 45) (44) (88 88) (87 87) (87) (43 43) (43) (85 85) (84 84) (83) (41 41) (41) (82 82) (81 81) (80) (40 40) (40) (79 79) (78 78) (77) (38 38) (38) (76 76) (75 75) (75) (37 37) (37) (73 73) (73 73) (72) (36 36) (36) (71 71) (70 70) (70) (35 35) (34) (69 69) (68 68) (135) (67 67) (66) (131 131) (129 129) (127) (63 63) (62) (124 124) (122 122) (120) (59 59) (59) (117 117) (115 115) (114) (56 56) (56) (111 111) (110 110) (108) (53 53) (53) (106 106) (104 104) (103) (51 51) (51) (101 101) (99 99) (98) (49 49) (48) (96 96) (95 95) (94) (47 47) (46) (92 92) (91 91) (90) (45 45) (44) (88 88) (87 87) (87) (43 43) (43) (85 85) (84 84) (83) (41 41) (41) (82 82) (81 81) (80) (40 40) (40) (79 79) (78 78) (77) (38 38) (38) (76 76) (75 75) (75) (37 37) (37) (73 73) (73 73) (72) (36 36) (36) (71 71) (70 70) (70) (35 35) (34) (69 69) (68 68) (135) (67 67) (66) (131 131) (129 129) (127) (63 63) (62) (124 124) (122 122) (120) (59 59) (59) (117 117) (115 115) (114) (56 56) (56) (111 111) (110 110) (108) (53 53) (53) (106 106) (104 104) (103) (51 51) (51) (101 101) (99 99) (98) (49 49) (48) (96 96) (95 95) (94) (47 47) (46) (92 92) (91 91) (90) (45 45) (44) (88 88) (87 87) (87) (43 43) (43) (85 85) (84 84) (83) (41 41) (41) (82 82) (81 81) (80) (40 40) (40) (79 79) (78 78) (77) (38 38) (38) (76 76) (75 75) (75) (37 37) (37) (73 73) (73 73) (72) (36 36) (36) (71 71) (70 70) (70) (35 35) (34) (69 69) (68 68) (135) (67 67) (66) (131 131) (129 129) (127) (63 63) (62) (124 124) (122 122) (120) (59 59) (59) (117 117) (115 115) (114) (56 56) (56) (111 111) (110 110) (108) (53 53) (53) (106 106) (104 104) (103) (51 51) (51) (101 101) (99 99) (98) (49 49) (48) (96 96) (95 95) (94) (47 47) (46) (92 92) (91 91) (90) (45 45) (44) (88 88) (87 87) (87) (43 43) (43) (85 85) (84 84) (83) (41 41) (41) (82 82) (81 81) (80) (40 40) (40) (79 79) (78 78) (77) (38 38) (38) (76 76) (75 75) (75) (37 37) (37) (73 73) (73 73) (72) (36 36) (36) (71 71) (70 70) (70) (35 35) (34) (69 69) (68 68))) :lvel (quote ((44) (27 27) (29) (41 41) (28 28) (37) (23 23) (25) (34 34) (23 23) (32) (19 19) (21) (29 29) (20 20) (26) (16 16) (17) (24 24) (16 16) (22) (13 13) (14) (20 20) (13 13) (18) (11 11) (12) (16 16) (11 11) (14) (8 8) (9) (13 13) (8 8) (11) (7 7) (7) (10 10) (6 6) (8) (5 5) (5) (7 7) (5 5) (6) (4 4) (4) (5 5) (3 3) (4) (3 3) (3) (4 4) (2 2) (3) (2 2) (2) (2 2) (1 1) (2) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (44) (27 27) (29) (41 41) (28 28) (37) (23 23) (25) (34 34) (23 23) (32) (19 19) (21) (29 29) (20 20) (26) (16 16) (17) (24 24) (16 16) (22) (13 13) (14) (20 20) (13 13) (18) (11 11) (12) (16 16) (11 11) (14) (8 8) (9) (13 13) (8 8) (11) (7 7) (7) (10 10) (6 6) (8) (5 5) (5) (7 7) (5 5) (6) (4 4) (4) (5 5) (3 3) (4) (3 3) (3) (4 4) (2 2) (3) (2 2) (2) (2 2) (1 1) (2) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (44) (27 27) (29) (41 41) (28 28) (37) (23 23) (25) (34 34) (23 23) (32) (19 19) (21) (29 29) (20 20) (26) (16 16) (17) (24 24) (16 16) (22) (13 13) (14) (20 20) (13 13) (18) (11 11) (12) (16 16) (11 11) (14) (8 8) (9) (13 13) (8 8) (11) (7 7) (7) (10 10) (6 6) (8) (5 5) (5) (7 7) (5 5) (6) (4 4) (4) (5 5) (3 3) (4) (3 3) (3) (4 4) (2 2) (3) (2 2) (2) (2 2) (1 1) (2) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (44) (27 27) (29) (41 41) (28 28) (37) (23 23) (25) (34 34) (23 23) (32) (19 19) (21) (29 29) (20 20) (26) (16 16) (17) (24 24) (16 16) (22) (13 13) (14) (20 20) (13 13) (18) (11 11) (12) (16 16) (11 11) (14) (8 8) (9) (13 13) (8 8) (11) (7 7) (7) (10 10) (6 6) (8) (5 5) (5) (7 7) (5 5) (6) (4 4) (4) (5 5) (3 3) (4) (3 3) (3) (4 4) (2 2) (3) (2 2) (2) (2 2) (1 1) (2) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (44) (27 27) (29) (41 41) (28 28) (37) (23 23) (25) (34 34) (23 23) (32) (19 19) (21) (29 29) (20 20) (26) (16 16) (17) (24 24) (16 16) (22) (13 13) (14) (20 20) (13 13) (18) (11 11) (12) (16 16) (11 11) (14) (8 8) (9) (13 13) (8 8) (11) (7 7) (7) (10 10) (6 6) (8) (5 5) (5) (7 7) (5 5) (6) (4 4) (4) (5 5) (3 3) (4) (3 3) (3) (4 4) (2 2) (3) (2 2) (2) (2 2) (1 1) (2) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (44) (27 27) (29) (41 41) (28 28) (37) (23 23) (25) (34 34) (23 23) (32) (19 19) (21) (29 29) (20 20) (26) (16 16) (17) (24 24) (16 16) (22) (13 13) (14) (20 20) (13 13) (18) (11 11) (12) (16 16) (11 11) (14) (8 8) (9) (13 13) (8 8) (11) (7 7) (7) (10 10) (6 6) (8) (5 5) (5) (7 7) (5 5) (6) (4 4) (4) (5 5) (3 3) (4) (3 3) (3) (4 4) (2 2) (3) (2 2) (2) (2 2) (1 1) (2) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :loffset (quotelchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6464) (6816 7116) (7042) (6568 6868) (6118 6618) (6668) (7014 7314) (7238) (6762 7062) (6306 6806) (6850) (7192 7492) (7414) (6934 7234) (6476 6976) (7014) (7354 7654) (7572) (7092 7392) (6630 7130) (7166) (7502 7802) (7718) (7236 7536) (6770 7270) (7304) (7638 7938) (7854) (7370 7670) (6902 7402) (7432) (7762 8062) (7978) (7494 7794) (7022 7522) (7552) (7880 8180) (8094) (7608 7908) (7136 7636) (6464) (6816 7116) (7042) (6568 6868) (6118 6618) (6668) (7014 7314) (7238) (6762 7062) (6306 6806) (6850) (7192 7492) (7414) (6934 7234) (6476 6976) (7014) (7354 7654) (7572) (7092 7392) (6630 7130) (7166) (7502 7802) (7718) (7236 7536) (6770 7270) (7304) (7638 7938) (7854) (7370 7670) (6902 7402) (7432) (7762 8062) (7978) (7494 7794) (7022 7522) (7552) (7880 8180) (8094) (7608 7908) (7136 7636) (6464) (6816 7116) (7042) (6568 6868) (6118 6618) (6668) (7014 7314) (7238) (6762 7062) (6306 6806) (6850) (7192 7492) (7414) (6934 7234) (6476 6976) (7014) (7354 7654) (7572) (7092 7392) (6630 7130) (7166) (7502 7802) (7718) (7236 7536) (6770 7270) (7304) (7638 7938) (7854) (7370 7670) (6902 7402) (7432) (7762 8062) (7978) (7494 7794) (7022 7522) (7552) (7880 8180) (8094) (7608 7908) (7136 7636) (6464) (6816 7116) (7042) (6568 6868) (6118 6618) (6668) (7014 7314) (7238) (6762 7062) (6306 6806) (6850) (7192 7492) (7414) (6934 7234) (6476 6976) (7014) (7354 7654) (7572) (7092 7392) (6630 7130) (7166) (7502 7802) (7718) (7236 7536) (6770 7270) (7304) (7638 7938) (7854) (7370 7670) (6902 7402) (7432) (7762 8062) (7978) (7494 7794) (7022 7522) (7552) (7880 8180) (8094) (7608 7908) (7136 7636) (6464) (6816 7116) (7042) (6568 6868) (6118 6618) (6668) (7014 7314) (7238) (6762 7062) (6306 6806) (6850) (7192 7492) (7414) (6934 7234) (6476 6976) (7014) (7354 7654) (7572) (7092 7392) (6630 7130) (7166) (7502 7802) (7718) (7236 7536) (6770 7270) (7304) (7638 7938) (7854) (7370 7670) (6902 7402) (7432) (7762 8062) (7978) (7494 7794) (7022 7522) (7552) (7880 8180) (8094) (7608 7908) (7136 7636) (6464) (6816 7116) (7042) (6568 6868) (6118 6618) (6668) (7014 7314) (7238) (6762 7062) (6306 6806) (6850) (7192 7492) (7414) (6934 7234) (6476 6976) (7014) (7354 7654) (7572) (7092 7392) (6630 7130) (7166) (7502 7802) (7718) (7236 7536) (6770 7270) (7304) (7638 7938) (7854) (7370 7670) (6902 7402) (7432) (7762 8062) (7978) (7494 7794) (7022 7522) (7552) (7880 8180) (8094) (7608 7908) (7136 7636))) :lonset (quote (0 266 397 525 776 1020 1257 1373 1488 1712 1932 2145 2250 2354 2558 2757 2951 3047 3141 3328 3510 3688 3776 3863 4035 4203 4368 4449 4529 4688 4844 4997 5073 5148 5296 5441 5584 5655 5725 5864 6000 6266 6397 6525 6776 7020 7257 7373 7488 7712 7932 8145 8250 8354 8558 8757 8951 9047 9141 9328 9510 9688 9776 9863 10035 10203 10368 10449 10529 10688 10844 10997 11073 11148 11296 11441 11584 11655 11725 11864 12000 12266 12397 12525 12776 13020 13257 13373 13488 13712 13932 14145 14250 14354 14558 14757 14951 15047 15141 15328 15510 15688 15776 15863 16035 16203 16368 16449 16529 16688 16844 16997 17073 17148 17296 17441 17584 17655 17725 17864 18000 18266 18397 18525 18776 19020 19257 19373 19488 19712 19932 20145 20250 20354 20558 20757 20951 21047 21141 21328 21510 21688 21776 21863 22035 22203 22368 22449 22529 22688 22844 22997 23073 23148 23296 23441 23584 23655 23725 23864 24000 24266 24397 24525 24776 25020 25257 25373 25488 25712 25932 26145 26250 26354 26558 26757 26951 27047 27141 27328 27510 27688 27776 27863 28035 28203 28368 28449 28529 28688 28844 28997 29073 29148 29296 29441 29584 29655 29725 29864 30000 30266 30397 30525 30776 31020 31257 31373 31488 31712 31932 32145 32250 32354 32558 32757 32951 33047 33141 33328 33510 33688 33776 33863 34035 34203 34368 34449 34529 34688 34844 34997 35073 35148 35296 35441 35584 35655 35725 35864 36001)) :ldur (quote ((271) (131 131) (129) (255 255) (247 247) (240) (117 117) (115) (228 228) (222 222) (216) (106 106) (104) (206 206) (201 201) (197) (96 96) (95) (188 188) (184 184) (180) (88 88) (87) (173 173) (170 170) (166) (82 82) (81) (160 160) (157 157) (155) (76 76) (75) (149 149) (147 147) (144) (71 71) (70) (140 140) (137 137) (271) (131 131) (129) (255 255) (247 247) (240) (117 117) (115) (228 228) (222 222) (216) (106 106) (104) (206 206) (201 201) (197) (96 96) (95) (188 188) (184 184) (180) (88 88) (87) (173 173) (170 170) (166) (82 82) (81) (160 160) (157 157) (155) (76 76) (75) (149 149) (147 147) (144) (71 71) (70) (140 140) (137 137) (271) (131 131) (129) (255 255) (247 247) (240) (117 117) (115) (228 228) (222 222) (216) (106 106) (104) (206 206) (201 201) (197) (96 96) (95) (188 188) (184 184) (180) (88 88) (87) (173 173) (170 170) (166) (82 82) (81) (160 160) (157 157) (155) (76 76) (75) (149 149) (147 147) (144) (71 71) (70) (140 140) (137 137) (271) (131 131) (129) (255 255) (247 247) (240) (117 117) (115) (228 228) (222 222) (216) (106 106) (104) (206 206) (201 201) (197) (96 96) (95) (188 188) (184 184) (180) (88 88) (87) (173 173) (170 170) (166) (82 82) (81) (160 160) (157 157) (155) (76 76) (75) (149 149) (147 147) (144) (71 71) (70) (140 140) (137 137) (271) (131 131) (129) (255 255) (247 247) (240) (117 117) (115) (228 228) (222 222) (216) (106 106) (104) (206 206) (201 201) (197) (96 96) (95) (188 188) (184 184) (180) (88 88) (87) (173 173) (170 170) (166) (82 82) (81) (160 160) (157 157) (155) (76 76) (75) (149 149) (147 147) (144) (71 71) (70) (140 140) (137 137) (271) (131 131) (129) (255 255) (247 247) (240) (117 117) (115) (228 228) (222 222) (216) (106 106) (104) (206 206) (201 201) (197) (96 96) (95) (188 188) (184 184) (180) (88 88) (87) (173 173) (170 170) (166) (82 82) (81) (160 160) (157 157) (155) (76 76) (75) (149 149) (147 147) (144) (71 71) (70) (140 140) (137 137))) :lvel (quote ((115) (71 71) (79) (110 110) (77 77) (106) (65 65) (72) (101 101) (70 70) (96) (59 59) (65) (91 91) (63 63) (86) (53 53) (58) (81 81) (56 56) (77) (47 47) (52) (72 72) (49 49) (67) (41 41) (45) (63 63) (43 43) (59) (36 36) (40) (55 55) (38 38) (51) (31 31) (34) (47 47) (32 32) (115) (71 71) (79) (110 110) (77 77) (106) (65 65) (72) (101 101) (70 70) (96) (59 59) (65) (91 91) (63 63) (86) (53 53) (58) (81 81) (56 56) (77) (47 47) (52) (72 72) (49 49) (67) (41 41) (45) (63 63) (43 43) (59) (36 36) (40) (55 55) (38 38) (51) (31 31) (34) (47 47) (32 32) (115) (71 71) (79) (110 110) (77 77) (106) (65 65) (72) (101 101) (70 70) (96) (59 59) (65) (91 91) (63 63) (86) (53 53) (58) (81 81) (56 56) (77) (47 47) (52) (72 72) (49 49) (67) (41 41) (45) (63 63) (43 43) (59) (36 36) (40) (55 55) (38 38) (51) (31 31) (34) (47 47) (32 32) (115) (71 71) (79) (110 110) (77 77) (106) (65 65) (72) (101 101) (70 70) (96) (59 59) (65) (91 91) (63 63) (86) (53 53) (58) (81 81) (56 56) (77) (47 47) (52) (72 72) (49 49) (67) (41 41) (45) (63 63) (43 43) (59) (36 36) (40) (55 55) (38 38) (51) (31 31) (34) (47 47) (32 32) (115) (71 71) (79) (110 110) (77 77) (106) (65 65) (72) (101 101) (70 70) (96) (59 59) (65) (91 91) (63 63) (86) (53 53) (58) (81 81) (56 56) (77) (47 47) (52) (72 72) (49 49) (67) (41 41) (45) (63 63) (43 43) (59) (36 36) (40) (55 55) (38 38) (51) (31 31) (34) (47 47) (32 32) (115) (71 71) (79) (110 110) (77 77) (106) (65 65) (72) (101 101) (70 70) (96) (59 59) (65) (91 91) (63 63) (86) (53 53) (58) (81 81) (56 56) (77) (47 47) (52) (72 72) (49 49) (67) (41 41) (45) (63 63) (43 43) (59) (36 36) (40) (55 55) (38 38) (51) (31 31) (34) (47 47) (32 32))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5264) (5668 5968) (5918) (5468 5768) (5062 5562) (5650) (6034 6334) (6276) (5814 6114) (5392 5892) (5966) (6336 6636) (6570) (6104 6404) (5670 6170) (6232) (6594 6894) (6822) (6352 6652) (5908 6408) (5264) (5668 5968) (5918) (5468 5768) (5062 5562) (5650) (6034 6334) (6276) (5814 6114) (5392 5892) (5966) (6336 6636) (6570) (6104 6404) (5670 6170) (6232) (6594 6894) (6822) (6352 6652) (5908 6408) (5264) (5668 5968) (5918) (5468 5768) (5062 5562) (5650) (6034 6334) (6276) (5814 6114) (5392 5892) (5966) (6336 6636) (6570) (6104 6404) (5670 6170) (6232) (6594 6894) (6822) (6352 6652) (5908 6408) (5264) (5668 5968) (5918) (5468 5768) (5062 5562) (5650) (6034 6334) (6276) (5814 6114) (5392 5892) (5966) (6336 6636) (6570) (6104 6404) (5670 6170) (6232) (6594 6894) (6822) (6352 6652) (5908 6408) (5264) (5668 5968) (5918) (5468 5768) (5062 5562) (5650) (6034 6334) (6276) (5814 6114) (5392 5892) (5966) (6336 6636) (6570) (6104 6404) (5670 6170) (6232) (6594 6894) (6822) (6352 6652) (5908 6408) (5264) (5668 5968) (5918) (5468 5768) (5062 5562) (5650) (6034 6334) (6276) (5814 6114) (5392 5892) (5966) (6336 6636) (6570) (6104 6404) (5670 6170) (6232) (6594 6894) (6822) (6352 6652) (5908 6408))) :lonset (quote (0 525 776 1020 1488 1932 2354 2558 2757 3141 3510 3863 4035 4203 4529 4844 5148 5296 5441 5725 6000 6525 6776 7020 7488 7932 8354 8558 8757 9141 9510 9863 10035 10203 10529 10844 11148 11296 11441 11725 12000 12525 12776 13020 13488 13932 14354 14558 14757 15141 15510 15863 16035 16203 16529 16844 17148 17296 17441 17725 18000 18525 18776 19020 19488 19932 20354 20558 20757 21141 21510 21863 22035 22203 22529 22844 23148 23296 23441 23725 24000 24525 24776 25020 25488 25932 26354 26558 26757 27141 27510 27863 28035 28203 28529 28844 29148 29296 29441 29725 30000 30525 30776 31020 31488 31932 32354 32558 32757 33141 33510 33863 34035 34203 34529 34844 35148 35296 35441 35725 36004)) :ldur (quote ((541) (255 255) (247) (481 481) (456 456) (433) (206 206) (201) (393 393) (376 376) (361) (173 173) (170) (333 333) (321 321) (309) (149 149) (147) (289 289) (279 279) (541) (255 255) (247) (481 481) (456 456) (433) (206 206) (201) (393 393) (376 376) (361) (173 173) (170) (333 333) (321 321) (309) (149 149) (147) (289 289) (279 279) (541) (255 255) (247) (481 481) (456 456) (433) (206 206) (201) (393 393) (376 376) (361) (173 173) (170) (333 333) (321 321) (309) (149 149) (147) (289 289) (279 279) (541) (255 255) (247) (481 481) (456 456) (433) (206 206) (201) (393 393) (376 376) (361) (173 173) (170) (333 333) (321 321) (309) (149 149) (147) (289 289) (279 279) (541) (255 255) (247) (481 481) (456 456) (433) (206 206) (201) (393 393) (376 376) (361) (173 173) (170) (333 333) (321 321) (309) (149 149) (147) (289 289) (279 279) (541) (255 255) (247) (481 481) (456 456) (433) (206 206) (201) (393 393) (376 376) (361) (173 173) (170) (333 333) (321 321) (309) (149 149) (147) (289 289) (279 279))) :lvel (quote ((115) (75 75) (85) (122 122) (88 88) (125) (80 80) (90) (127 127) (90 90) (127) (79 79) (89) (125 125) (88 88) (122) (76 76) (85) (119 119) (83 83) (115) (75 75) (85) (122 122) (88 88) (125) (80 80) (90) (127 127) (90 90) (127) (79 79) (89) (125 125) (88 88) (122) (76 76) (85) (119 119) (83 83) (115) (75 75) (85) (122 122) (88 88) (125) (80 80) (90) (127 127) (90 90) (127) (79 79) (89) (125 125) (88 88) (122) (76 76) (85) (119 119) (83 83) (115) (75 75) (85) (122 122) (88 88) (125) (80 80) (90) (127 127) (90 90) (127) (79 79) (89) (125 125) (88 88) (122) (76 76) (85) (119 119) (83 83) (115) (75 75) (85) (122 122) (88 88) (125) (80 80) (90) (127 127) (90 90) (127) (79 79) (89) (125 125) (88 88) (122) (76 76) (85) (119 119) (83 83) (115) (75 75) (85) (122 122) (88 88) (125) (80 80) (90) (127 127) (90 90) (127) (79 79) (89) (125 125) (88 88) (122) (76 76) (85) (119 119) (83 83))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4064) (4568 4868) (4862) (4450 4750) (4114 4614) (4766) (5204 5504) (5470) (5032 5332) (4652 5152) (4064) (4568 4868) (4862) (4450 4750) (4114 4614) (4766) (5204 5504) (5470) (5032 5332) (4652 5152) (4064) (4568 4868) (4862) (4450 4750) (4114 4614) (4766) (5204 5504) (5470) (5032 5332) (4652 5152) (4064) (4568 4868) (4862) (4450 4750) (4114 4614) (4766) (5204 5504) (5470) (5032 5332) (4652 5152) (4064) (4568 4868) (4862) (4450 4750) (4114 4614) (4766) (5204 5504) (5470) (5032 5332) (4652 5152) (4064) (4568 4868) (4862) (4450 4750) (4114 4614) (4766) (5204 5504) (5470) (5032 5332) (4652 5152))) :lonset (quote (0 1020 1488 1932 2757 3510 4203 4529 4844 5441 6000 7020 7488 7932 8757 9510 10203 10529 10844 11441 12000 13020 13488 13932 14757 15510 16203 16529 16844 17441 18000 19020 19488 19932 20757 21510 22203 22529 22844 23441 24000 25020 25488 25932 26757 27510 28203 28529 28844 29441 30000 31020 31488 31932 32757 33510 34203 34529 34844 35441 36018)) :ldur (quote ((1082) (481 481) (456) (866 866) (787 787) (721) (333 333) (321) (618 618) (577 577) (1082) (481 481) (456) (866 866) (787 787) (721) (333 333) (321) (618 618) (577 577) (1082) (481 481) (456) (866 866) (787 787) (721) (333 333) (321) (618 618) (577 577) (1082) (481 481) (456) (866 866) (787 787) (721) (333 333) (321) (618 618) (577 577) (1082) (481 481) (456) (866 866) (787 787) (721) (333 333) (321) (618 618) (577 577) (1082) (481 481) (456) (866 866) (787 787) (721) (333 333) (321) (618 618) (577 577))) :lvel (quote ((44) (36 36) (45) (69 69) (57 57) (89) (61 61) (72) (104 104) (78 78) (44) (36 36) (45) (69 69) (57 57) (89) (61 61) (72) (104 104) (78 78) (44) (36 36) (45) (69 69) (57 57) (89) (61 61) (72) (104 104) (78 78) (44) (36 36) (45) (69 69) (57 57) (89) (61 61) (72) (104 104) (78 78) (44) (36 36) (45) (69 69) (57 57) (89) (61 61) (72) (104 104) (78 78) (44) (36 36) (45) (69 69) (57 57) (89) (61 61) (72) (104 104) (78 78))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2864) (3550 3850) (3914) (3566 3866) (3332 3832) (2864) (3550 3850) (3914) (3566 3866) (3332 3832) (2864) (3550 3850) (3914) (3566 3866) (3332 3832) (2864) (3550 3850) (3914) (3566 3866) (3332 3832) (2864) (3550 3850) (3914) (3566 3866) (3332 3832) (2864) (3550 3850) (3914) (3566 3866) (3332 3832))) :lonset (quote (0 1932 2757 3510 4844 6000 7932 8757 9510 10844 12000 13932 14757 15510 16844 18000 19932 20757 21510 22844 24000 25932 26757 27510 28844 30000 31932 32757 33510 34844 36081)) :ldur (quote ((2164) (866 866) (787) (1443 1443) (1237 1237) (2164) (866 866) (787) (1443 1443) (1237 1237) (2164) (866 866) (787) (1443 1443) (1237 1237) (2164) (866 866) (787) (1443 1443) (1237 1237) (2164) (866 866) (787) (1443 1443) (1237 1237) (2164) (866 866) (787) (1443 1443) (1237 1237))) :lvel (quote ((0) (3 3) (7) (16 16) (21 21) (0) (3 3) (7) (16 16) (21 21) (0) (3 3) (7) (16 16) (21 21) (0) (3 3) (7) (16 16) (21 21) (0) (3 3) (7) (16 16) (21 21) (0) (3 3) (7) (16 16) (21 21))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 980 735) (om-make-point 311 74) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 80 30) (quote "repetitions") "" (om-make-point 427 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 53 30) (quote "voices") "" (om-make-point 370 309) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 30) (quote "speed factor") "" (om-make-point 263 309) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 449 338) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 371 338) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 288 338) (om-make-point 38 30) 3.0 "3.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU 2" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "no transp." "period-wise transp." "chord-wise transp.")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 562 314) (om-make-point 170 44) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 150 24) "untitled" :range (quote ("no transp." "period-wise transp." "chord-wise transp."))))) (om-set-selected-item-index rep (quote 2)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "accelerando" "ritardando")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 498 275) (om-make-point 130 44) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 110 24) "untitled" :range (quote ("accelerando" "ritardando"))))) (om-set-selected-item-index rep (quote 0)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RISSET-RHYTHM" (quote risset-rhythm) (quote ((om-load-inputfun (quote input-funbox) "chord-seq" "SELF" (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6700))) :lonset (quote (0 250 500 750 1750)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (om-load-inputfun (quote input-funbox) "number" "SPEED" 1.0) (om-load-inputfun (quote input-funbox) "integer" "VOICES" 4) (om-load-inputfun (quote input-funbox) "integer" "REP" 4) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "ONSET-MODE" 0 (list (list "accelerando" 0) (list "ritardando" 1))) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MC-MODE" 2 (list (list "preserve pitch" 0) (list "period-wise transp." 1) (list "chord-wise transp." 2))))) (om-make-point 149 378) (om-make-point 548 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pattern" (let ((copy (make-instance (quote ominstance) :name "pattern" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (5700 6000) (5900) (5400 5700) (4900 5400))) :lonset (quote (0 500 750 1000 1500 2000)) :ldur (quote ((500) (250 250) (250) (500 500) (500 500))) :lvel (quote ((127) (80 80) (90) (127 127) (90 90))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 209 51) (om-make-point 569 273) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4))) (setf (create-info copy) (quote ("2021/05/15 8:52:11" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 207 121) "pattern" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 250)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 127 (list 80 80) 90 (list 127 127) (list 90 90))) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 210 182) (om-make-point 170 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (5700 6000) (5900) (5400 5700) (4900 5400))) :lonset (quote (0 500 750 1000 1500 2000)) :ldur (quote ((500) (250 250) (250) (500 500) (500 500))) :lvel (quote ((127) (80 80) (90) (127 127) (90 90))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 209 51) (om-make-point 569 273) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 5 1 nil 0) (16 0 14 0 nil 0) (11 0 14 1 nil 0) (10 0 14 2 nil 0) (9 0 14 3 nil 0) (13 0 14 4 nil 0) (12 0 14 5 nil 0) (15 0 16 0 nil 0))) nil 6.19))
