; OM File Header - Saved 2021/06/07 10:12:27
; (6.18 :patc (om-make-point 10 10) (om-make-point 336 90) (om-make-point 483 586) "" 183 0 "2021/05/18 21:49:47" "2021/06/07 10:12:27")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "nrt" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 73 30) (quote "iterations") "" (om-make-point 405 238) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 2605/7 1688/7) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 185 408) (om-make-point 62 30) (list 0 500) "(0 500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 341 99) (quote "NRT performs Neo-riemannian transformations on a starting triadic chord. The possible transformations are p, l, and r. Compound transformations are specified as lists of these 3 basic transformations.$") "" (om-make-point 20 53) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 90 1) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 75 24) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 257 30) (quote "neo-riemannian transformations (NRTs)") "" (om-make-point 124 211) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 154 242) (om-make-point 166 30) (list (quote p) (quote l) (quote r) (list (quote p) (quote r)) (list (quote r) (quote p)) (list (quote p) (quote l)) (list (quote l) (quote p))) "(p l r (p r) (r p) (p l) (l p))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-tranformations" (om-load-patch-abs1 "random-tranformations" (quote ((let ((box (om-load-boxin "times" 1 (om-make-point 199 141) "" "times" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "transformations" 0 (om-make-point 46 9) "" "transformations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 158 337) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 0) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 169 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 3))) (om-make-point 176 72) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 131 146) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 44 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 12))) (om-make-point 152 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (7 0 3 0 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (1 0 6 0 nil 0) (5 0 7 0 nil 0) (0 0 7 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 274 396)) (quote ((om-load-inputfun (quote input-funbox) "" "transformations" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1940/7 1968/7) nil (list (list (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)) (list (quote r) (quote p)))) nil "random-tranformations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-triad" (om-load-patch-abs1 "random-triad" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 89 750) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 75 680) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 100) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 86 642) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 60) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 92 595) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -6) (om-load-inputfun (quote input-funbox) "max" "HIGH" 6))) (om-make-point 137 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 11))) (om-make-point 98 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 12) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 210 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 97 451) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 131 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 198 345) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 214 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 3))) (om-make-point 195 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 158 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 70 20) (om-make-point 59 30) (list 0 4 7) "(0 4 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 2" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 101 70) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (list 0 4 7)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 82 214) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 1 nil 0) (5 0 3 1 nil 0) (7 0 5 0 nil 0) (4 0 5 1 nil 0) (9 0 6 1 nil 0) (15 0 7 0 nil 0) (6 0 7 1 nil 0) (8 0 9 0 nil 0) (10 0 9 1 nil 0) (15 0 10 0 nil 0) (14 0 12 0 nil 0) (11 0 12 1 nil 0) (13 0 14 0 nil 0) (13 0 15 0 nil 0) (12 0 15 1 nil 0))) 6.18 nil "" (om-make-point 227 88) (om-make-point 300 815)) (quote nil) (om-make-point 105/8 140) nil (list (list 5000 5300 5800)) nil "random-triad"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 150)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 500)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 90 440) (om-make-point 343 123) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000 5500 5900) (5200 5600 5900) (5300 5600 6100) (5300 5800 6200) (5500 5900 6200) (5600 5900 6400) (5600 6100 6500) (5800 6200 6500) (5900 6200 6700) (5900 6400 6800) (6100 6500 6800) (6200 6500 7000))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000)) :ldur (quote ((500 500 500) (500 500 500) (500 500 500) (500 500 500) (500 500 500) (500 500 500) (500 500 500) (500 500 500) (500 500 500) (500 500 500) (500 500 500) (500 500 500))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 596 276) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NRT" (quote nrt) (quote ((om-load-inputfun (quote input-funbox) "list" "MC" (list 6000 5500 7600 7200)) (om-load-inputfun (quote input-funbox) "list" "TRANSFORMATIONS" (list (quote r) (quote l) (list (quote l) (quote p)))))) (om-make-point 138 357) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TRIADIC CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 25 205) (om-make-point 100 141) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5300 5800)) :ldur (quote (1000 1000 1000)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 25) (om-make-point 591 293) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 8 0 nil 0) (1 0 8 1 nil 0) (11 0 10 1 nil 0) (2 0 10 2 nil 0) (12 1 11 0 nil 0) (8 0 11 1 nil 0) (9 0 12 1 nil 0))) nil 6.18))
