; OM File Header - Saved 2021/06/02 13:17:31
; (6.18 :patc (om-make-point 10 160) (om-make-point 479 68) (om-make-point 561 762) "" 183 0 "2021/03/31 10:38:43" "2021/06/02 13:17:31")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "distortion" (quote ((let ((box (om-load-boxinstance "bembon" (let ((copy (make-instance (quote ominstance) :name "bembon" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6900 3300) (8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300))) :lonset (quoteldur (quote ((174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (349 349 349 349 349 349 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174) (86 86 86 86) (86 86 86 86) (86 86 86 86) (86 86 86 86) (174 174 174 174) (174 174 174 174) (174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (174 174 174 349 349 174 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174))) :lvel (quoteloffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4))) (setf (create-info copy) (quote ("2021/06/02 13:10:39" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 52 132) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 58 694) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 204 60) (quote "distortion > 1 --> expansion$distortion < 1 --> compression$distortion = 1 --> no distortion") "" (om-make-point 293 405) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 30) (quote "distortion index") "" (om-make-point 141 381) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 90 387) (om-make-point 52 30) 1.133 "1.133" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DISTORTION" (quote distortion) (quote ((om-load-inputfun (quote input-funbox) "midicent list" "MC-LIST" (list 100 200 300 400 500)) (om-load-inputfun (quote input-funbox) "distortion index" "DIST" 1.125))) (om-make-point 54 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "DISTORTED SEQUENCE OF CHORDS" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 26 500) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8804 8352 8012 8012 8352 8804 6992 6652 7446 3934) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (8012 7446 6992 6992 7446 8012 3366) (6652) (8804 8352 8012 8012 8352 8804 6086 6992) (4272) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (3934) (8012 7446 6992 6992 7446 8012) (6652) (8804 8352 8012 8012 8352 8804 3480) (6992) (8692 8238 7672 7672 8238 8692 6878 7558) (4160) (9032 8692 8012 8012 8692 9032 3480) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8238 7786 7446 7446 7786 8238 6426 7446) (7786 7446 6878 6878 7446 7786 2800) (6878) (8352 8012 7446 7446 8012 8352 6992) (4160) (8238 7786 7446 7446 7786 8238 6878 6426 7446) (3366) (6878 6426 7446) (2800) (6878) (6652 7106) (6878 7218 4160) (6878 7332) (7332 6878 6312 6312 6878 7332 6878 6312 7332 3594) (8352 8012 7332 7332 8012 8352 7672) (8012 7672 6878 6878 7672 8012 7332 2800) (6878) (8804 8352 7786 7786 8352 8804 7332) (4160) (8692 8238 7672 7672 8238 8692 7332 6878 6652 7672) (3594) (8238 7672 7332 7332 7672 8238 6652) (7332 6878 7672) (9144 8804 8238 8238 8804 9144 2800) (9032 8692 8012 8012 8692 9032) (4160) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (6878 6538 7218 3366) (6878 6538 7218 3366) (6878 6538 7218 3366) (6878 6538 7218 3366) (6878 6538 7218 3366) (6878 6538 7446 3366) (8804 8352 8012 8012 8352 8804 6992 6652 7446 3934) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (8012 7446 6992 6992 7446 8012 3366) (6652) (8804 8352 8012 8012 8352 8804 6086 6992) (4272) (8352 8012 7446 7446 8012 8352 6992 6652 7446) (3934) (8012 7446 6992 6992 7446 8012) (6652) (8804 8352 8012 8012 8352 8804 3480) (6992) (8692 8238 7672 7672 8238 8692 6878 7558) (4160) (9032 8692 8012 8012 8692 9032 3480) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8238 7786 7446 7446 7786 8238 6426 7446) (7786 7446 6878 6878 7446 7786 2800) (6878) (8352 8012 7446 7446 8012 8352 6992) (4160) (8238 7786 7446 7446 7786 8238 6878 6426 7446) (3366) (6878 6426 7446) (2800) (6878) (6652 7106) (6878 7218 4160) (6878 7332) (7332 6878 6312 6312 6878 7332 6878 6312 7332 3594) (8352 8012 7332 7332 8012 8352 7672) (8012 7672 6878 6878 7672 8012 7332 2800) (6878) (8804 8352 7786 7786 8352 8804 7332) (4160) (8692 8238 7672 7672 8238 8692 7332 6878 6652 7672) (3594) (8238 7672 7332 7332 7672 8238 6652) (7332 6878 7672) (9144 8804 8238 8238 8804 9144 2800) (9032 8692 8012 8012 8692 9032) (4160) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366) (8804 8238 7786 7786 8238 8804 6878 6426 7446 3366))) :lonset (quoteldur (quote ((174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (349 349 349 349 349 349 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174) (86 86 86 86) (86 86 86 86) (86 86 86 86) (86 86 86 86) (174 174 174 174) (174 174 174 174) (174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (174 174 174 349 349 174 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174))) :lvel (quoteloffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "A SEQUENCE OF CHORDS" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 20 188) (om-make-point 508 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6700 3300) (6400 6100 6900 3300) (8100 7700 7400 7400 7700 8100 6500 6200 6900 3800) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (7400 6900 6500 6500 6900 7400 3300) (6200) (8100 7700 7400 7400 7700 8100 5700 6500) (4100) (7700 7400 6900 6900 7400 7700 6500 6200 6900) (3800) (7400 6900 6500 6500 6900 7400) (6200) (8100 7700 7400 7400 7700 8100 3400) (6500) (8000 7600 7100 7100 7600 8000 6400 7000) (4000) (8300 8000 7400 7400 8000 8300 3400) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (7600 7200 6900 6900 7200 7600 6000 6900) (7200 6900 6400 6400 6900 7200 2800) (6400) (7700 7400 6900 6900 7400 7700 6500) (4000) (7600 7200 6900 6900 7200 7600 6400 6000 6900) (3300) (6400 6000 6900) (2800) (6400) (6200 6600) (6400 6700 4000) (6400 6800) (6800 6400 5900 5900 6400 6800 6400 5900 6800 3500) (7700 7400 6800 6800 7400 7700 7100) (7400 7100 6400 6400 7100 7400 6800 2800) (6400) (8100 7700 7200 7200 7700 8100 6800) (4000) (8000 7600 7100 7100 7600 8000 6800 6400 6200 7100) (3500) (7600 7100 6800 6800 7100 7600 6200) (6800 6400 7100) (8400 8100 7600 7600 8100 8400 2800) (8300 8000 7400 7400 8000 8300) (4000) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300) (8100 7600 7200 7200 7600 8100 6400 6000 6900 3300))) :lonset (quoteldur (quote ((174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (349 349 349 349 349 349 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174) (86 86 86 86) (86 86 86 86) (86 86 86 86) (86 86 86 86) (174 174 174 174) (174 174 174 174) (174 174 174 174 174 174 174 174 174 261) (86 86 86 86 86 86 174 174 174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (174 174 174 174 174 174) (174) (174 174 174 174 174 174 349) (164) (174 174 174 174 174 174 261 261) (86) (86 86 86 86 86 86 86) (174 174 174 174 174 174 331 331 174 261) (86 86 86 86 86 86 331 331) (174 174 174 174 174 174 349) (86) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164) (261) (331 331 331) (349) (164) (164 164) (164 164 174) (164 164) (174 174 174 174 174 174 349 349 331 261) (86 86 86 86 86 86 164) (174 174 174 174 174 174 164 349) (164) (174 174 174 174 174 174 174) (174) (174 174 174 174 174 174 164 164 164 164) (261) (174 174 174 349 349 174 261) (996 996 996) (174 174 174 174 174 174 349) (261 261 261 261 261 261) (174) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (86 86 86 86 86 86 86 86 86 86) (174 174 174 174 174 174 174 174 174 174) (174 174 174 174 174 174 174 174 174 174))) :lvel (quoteloffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 3 3 3) (2) (11 11 11 9 8 7) (3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3 3) (2) (11 11 11 9 8 7 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3) (11 11 11 9 8 7 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3) (2) (3 3 3) (2) (3) (3 3) (3 3 2) (3 3) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3) (11 11 11 9 8 7 3 2) (3) (11 11 11 9 8 7 3) (2) (11 11 11 9 8 7 3 3 3 3) (2) (11 11 11 9 8 7 3) (3 3 3) (11 11 11 9 8 7 2) (11 11 11 9 8 7) (2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2) (11 11 11 9 8 7 3 3 3 2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 1280 397) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 374 75) (quote "distortion applies spectral distortion to a list of midicents, $given a distortion index d. In other words, it expands or $compresses the intervals in relation to the lowest midicent $value in the input list.") "" (om-make-point 14 57) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 79 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 103 11) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 0 nil 0) (7 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 0 nil 0) (0 0 7 0 nil 0))) nil 6.18))
