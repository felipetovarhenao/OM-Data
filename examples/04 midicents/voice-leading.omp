; OM File Header - Saved 2021/06/17 8:22:23
; (6.19 :patc (om-make-point 118 60) (om-make-point 377 162) (om-make-point 748 517) "" 183 0 "2021/06/17 7:53:19" "2021/06/17 8:22:20")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "voice-leading" (quote ((let ((box (om-load-boxcomment "comment 4" (om-make-point 100 30) (quote "starting chord") nil (om-make-point 25 220) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 254 30) (quote "avoid parallel unisons and perfect fifths") nil (om-make-point 473 269) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 412 272) (om-make-point 62 30) (list 0 700) "(0 700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "triads" (om-load-patch-abs1 "triads" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 301) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "maj-min" (om-load-patch-abs1 "maj-min" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 202 218) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 153 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 152 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 50 81) (om-make-point 87 30) (list 0 300 700) "(0 300 700)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" (list 0 400 700)))) (om-make-point 124 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 194 85) (om-make-point 119 30) (list 0 400 700 1000) "(0 400 700 1000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" (list 0 400 700)))) (om-make-point 184 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (6 0 2 1 nil 0) (3 0 4 0 nil 0) (1 0 4 1 nil 0) (1 0 6 0 nil 0) (5 0 6 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1144/5 424/5) nil (list nil) "l" "maj-min"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 63 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 60) (om-load-inputfun (quote input-funbox) "end " "END" 71) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 296 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 100) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 313 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 259 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 0) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 272 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (6 0 2 0 nil 0) (3 0 4 1 nil 0) (1 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 438 426)) (quote nil) (om-make-point 8599/30 3199/30) nil (list (list (list 7000 7300 7700) (list 6800 7100 7500) (list 6000 6400 6700 7000) (list 6900 7300 7600 7900) (list 6500 6800 7200) (list 7100 7400 7800) (list 6200 6500 6900) (list 6400 6800 7100 7400) (list 6800 7200 7500 7800) (list 6600 7000 7300 7600) (list 6400 6700 7100) (list 6900 7200 7600) (list 6600 6900 7300) (list 7000 7400 7700 8000) (list 6700 7000 7400) (list 7100 7500 7800 8100) (list 6000 6300 6700) (list 6100 6400 6800) (list 6300 6600 7000) (list 6300 6700 7000 7300) (list 6100 6500 6800 7100) (list 6700 7100 7400 7700) (list 6200 6600 6900 7200) (list 6500 6900 7200 7500))) nil "triads"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SEQUENCE WITH SMOOTH VOICE LEADING" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 400)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 400)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 183 379) (om-make-point 529 124) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000 5700 6200 6600) (4900 5800 6500) (5100 5900 6800) (4600 5500 6000 6400) (4500 5500 6100 6400) (4800 5300 5600 6800) (5000 5400 7100) (5000 5300 6900) (4400 5000 5900 6400) (4400 5400 6000 6300) (4600 5400 6100 6400) (4700 5500 5900 6400) (4800 5700 6400) (4900 5700 6600) (4400 5300 5800 6200) (4300 5500 5800 6200) (4500 5400 5900 6300) (4300 5500 6000 6300) (4400 5200 6100 6400) (4600 6300 6600) (4600 4900 6300 6700) (4700 4900 6500 6800) (4700 5000 6500 6700) (4800 5000 6600 6900) (4800 5100 6500 6900))) :lonset (quote (0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 5200 5600 6000 6400 6800 7200 7600 8000 8400 8800 9200 9600 10000)) :ldur (quote ((400 400 400 400) (400 400 400) (400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400) (400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400) (400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400) (400 400 400 400))) :lvel (quote ((100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 830 557) (om-make-point 551 288) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 300)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 217 177) (om-make-point 399 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000 7300 7700) (6800 7100 7500) (6000 6400 6700 7000) (6900 7300 7600 7900) (6500 6800 7200) (7100 7400 7800) (6200 6500 6900) (6400 6800 7100 7400) (6800 7200 7500 7800) (6600 7000 7300 7600) (6400 6700 7100) (6900 7200 7600) (6600 6900 7300) (7000 7400 7700 8000) (6700 7000 7400) (7100 7500 7800 8100) (6000 6300 6700) (6100 6400 6800) (6300 6600 7000) (6300 6700 7000 7300) (6100 6500 6800 7100) (6700 7100 7400 7700) (6200 6600 6900 7200) (6500 6900 7200 7500))) :lonset (quote (0 300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900 4200 4500 4800 5100 5400 5700 6000 6300 6600 6900 7200)) :ldur (quote ((300 300 300) (300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300 300) (300 300 300) (300 300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 636 356) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 75 143) (om-make-point 153 30) (list 5000 5700 6200 6600) "(5000 5700 6200 6600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 127 181) (om-make-point 77 110) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5700 6200 6600)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 25) (om-make-point 514 284) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 75 24) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 90 1) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 340 67) (quote "Voice-leading concatenates a series of chords such that the voice leading between them is optimally smooth.") "" (om-make-point 23 52) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOICE-LEADING" (quote voice-leading) (quote ((om-load-inputfun (quote input-funbox) "list" "ST-CHORD" (list 4800 5500 6000 6400 7100)) (om-load-inputfun (quote input-funbox) "list" "OTHER-CHORDS" (list (list 200 500 900) (list 0 500 900) (list 200 500 700 1100) (list 0 400))) (om-load-inputfun (quote input-funbox) "list" "PUNISH-INTERVALS" (list 0 700)))) (om-make-point 27 302) (om-make-point 551 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 4 1 nil 0) (3 0 5 1 nil 0) (6 0 7 1 nil 0) (7 1 11 0 nil 0) (5 1 11 1 nil 0) (2 0 11 2 nil 0))) nil 6.19))
