; OM File Header - Saved 2021/06/10 8:45:31
; (6.19 :patc (om-make-point 172 260) (om-make-point 252 43) (om-make-point 1229 612) "" 183 0 "2021/04/03 10:53:33" "2021/06/09 9:47:47")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "ic-cycle" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 723 519) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 118 30) (quote "interval cycle list") "" (om-make-point 124 258) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 113 30) (quote "upper bound list") "" (om-make-point 866 225) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 113 30) (quote "lower bound list") "" (om-make-point 785 154) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 118 30) (quote "interval cycle list") "" (om-make-point 615 59) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 96 30) (quote "starting pitch") "" (om-make-point 540 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 73 47) (quote "number of notes") "" (om-make-point 692 127) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 116 30) (quote "number of notes") "" (om-make-point 412 257) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 66 22) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 328 68) (quote "ic-cycle builds an interval class cycle given a starting pitch, an interval class, a lower and upper bound (range), and a number of notes.") "" (om-make-point 6 53) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 80 0) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 868 252) (om-make-point 122 30) (list 6000 7200 8400) "(6000 7200 8400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 788 179) (om-make-point 122 30) (list 4800 6000 7200) "(4800 6000 7200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 636 174) (om-make-point 48 30) 8400 "8400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "midi-channels" (om-load-patch-abs1 "midi-channels" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 501) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 330 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 362 100) (om-make-point 59 30) (list 3 2 1) "(3 2 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 340 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 297 50) (om-make-point 34 30) 75 "75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 265 80) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (4 0 5 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 5214/5 324) nil (list (list (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1) (list 3 2 1))) "x" "midi-channels"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 773 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 619 86) (om-make-point 300 30) (list (list 500 -100 -200) (list 300 200 500) (list -500 300 -300)) "((500 -100 -200) (300 200 500) (-500 300 -300))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 607 283) (om-make-point 399 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTIPLE INTERVAL CYCLES" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 120)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 80)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 80)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 691 394) (om-make-point 500 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 6000 7200) (5300 6300 7900) (5200 6500 8200) (5000 7000 7900) (5500 6100 7400) (5400 6300 7700) (5200 6800 7400) (5700 7100 8100) (5600 6100 7200) (5400 6600 8100) (5900 6900 7600) (5800 7100 7900) (5600 6400 7600) (4900 6700 8300) (4800 6900 7400) (5800 6200 8300) (5100 6500 7800) (5000 6700 8100) (4800 6000 7800) (5300 6300 7300) (5200 6500 7600) (5000 7000 7300) (5500 6100 8000) (5400 6300 8300) (5200 6800 8000) (5700 7100 7500) (5600 6100 7800) (5400 6600 7500) (5900 6900 8200) (5800 7100 7300) (5600 6400 8200) (4900 6700 7700) (4800 6900 8000) (5800 6200 7700) (5100 6500 7200) (5000 6700 7500) (4800 6000 7200) (5300 6300 7900) (5200 6500 8200) (5000 7000 7900) (5500 6100 7400) (5400 6300 7700) (5200 6800 7400) (5700 7100 8100) (5600 6100 7200) (5400 6600 8100) (5900 6900 7600) (5800 7100 7900) (5600 6400 7600) (4900 6700 8300) (4800 6900 7400) (5800 6200 8300) (5100 6500 7800) (5000 6700 8100) (4800 6000 7800) (5300 6300 7300) (5200 6500 7600) (5000 7000 7300) (5500 6100 8000) (5400 6300 8300) (5200 6800 8000) (5700 7100 7500) (5600 6100 7800) (5400 6600 7500) (5900 6900 8200) (5800 7100 7300) (5600 6400 8200) (4900 6700 7700) (4800 6900 8000) (5800 6200 7700) (5100 6500 7200) (5000 6700 7500) (4800 6000 7200) (5300 6300 7900) (5200 6500 8200))) :lonset (quote (0 120 240 360 480 600 720 840 960 1080 1200 1320 1440 1560 1680 1800 1920 2040 2160 2280 2400 2520 2640 2760 2880 3000 3120 3240 3360 3480 3600 3720 3840 3960 4080 4200 4320 4440 4560 4680 4800 4920 5040 5160 5280 5400 5520 5640 5760 5880 6000 6120 6240 6360 6480 6600 6720 6840 6960 7080 7200 7320 7440 7560 7680 7800 7920 8040 8160 8280 8400 8520 8640 8760 8880 8960)) :ldur (quotelvel (quoteloffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1) (3 2 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 380 548) (om-make-point 1280 397) 0 1000 nil 127/25 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 703 174) (om-make-point 34 30) 75 "75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IC-CYCLE 2" (quote ic-cycle) (quote ((om-load-inputfun (quote input-funbox) "number" "MC-START" 5500) (om-load-inputfun (quote input-funbox) "number" "IC" 400) (om-load-inputfun (quote input-funbox) "number" "LOWER-BOUND" 6000) (om-load-inputfun (quote input-funbox) "number" "UPPER-BOUND" 7200) (om-load-inputfun (quote input-funbox) "number" "N-TIMES" 10))) (om-make-point 643 206) (om-make-point 92 75) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 420 285) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 135 284) (om-make-point 101 30) (list 200 300 200) "(200 300 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "INITIAL PITCH" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 68 127) (om-make-point 95 103) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6500 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 573 38) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "UPPER BOUND" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 323 119) (om-make-point 95 103) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 7200 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 300 25) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "LOWER BOUND" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 238 212) (om-make-point 95 103) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 5700 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 573 38) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "INTERVAL CYCLE SEQUENCE" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 90)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 100)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 80)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 155 396) (om-make-point 500 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (6700) (7000) (6000) (6200) (6500) (6700) (5700) (6000) (6200) (6400) (6700) (6900) (7100) (6200) (6400) (6600) (5700) (5900) (6100) (6400) (6600) (6800) (7100) (6100) (6300) (6600) (6800) (5800) (6100) (6300) (6500) (6800) (7000) (6000) (6300) (6500) (6700) (5800) (6000) (6200) (6500) (6700) (6900) (6000) (6200) (6400) (6700) (5700) (5900) (6200) (6400) (6600) (6900) (7100) (6100) (6400) (6600) (6800) (5900) (6100) (6300) (6600) (6800) (7000) (6100) (6300) (6500) (6800) (5800) (6000) (6300) (6500) (6700) (7000) (6000) (6200) (6500) (6700) (5700) (6000) (6200) (6400) (6700) (6900) (7100) (6200) (6400) (6600) (5700) (5900) (6100) (6400) (6600) (6800) (7100) (6100) (6300) (6600) (6800))) :lonset (quote (0 90 180 270 360 450 540 630 720 810 900 990 1080 1170 1260 1350 1440 1530 1620 1710 1800 1890 1980 2070 2160 2250 2340 2430 2520 2610 2700 2790 2880 2970 3060 3150 3240 3330 3420 3510 3600 3690 3780 3870 3960 4050 4140 4230 4320 4410 4500 4590 4680 4770 4860 4950 5040 5130 5220 5310 5400 5490 5580 5670 5760 5850 5940 6030 6120 6210 6300 6390 6480 6570 6660 6750 6840 6930 7020 7110 7200 7290 7380 7470 7560 7650 7740 7830 7920 8010 8100 8190 8280 8370 8460 8550 8640 8730 8820 8910 9010)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 855 161) (om-make-point 1280 397) 0 1000 nil 223/100 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IC-CYCLE" (quote ic-cycle) (quote ((om-load-inputfun (quote input-funbox) "number" "MC-START" 5500) (om-load-inputfun (quote input-funbox) "number" "IC" (list 400 200 300)) (om-load-inputfun (quote input-funbox) "number" "LOWER-BOUND" 6000) (om-load-inputfun (quote input-funbox) "number" "UPPER-BOUND" 7200) (om-load-inputfun (quote input-funbox) "number" "N-TIMES" 100))) (om-make-point 13 318) (om-make-point 512 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((18 0 0 0 nil 0) (17 0 15 0 nil 0) (20 0 17 0 nil 0) (16 0 17 1 nil 0) (12 0 17 2 nil 0) (11 0 17 3 nil 0) (15 0 18 1 nil 0) (14 0 18 6 nil 0) (13 0 20 0 nil 0) (19 0 20 4 nil 0) (27 0 26 1 nil 0) (23 1 27 0 nil 0) (22 0 27 1 nil 0) (25 1 27 2 nil 0) (24 1 27 3 nil 0) (21 0 27 4 nil 0))) nil 6.18))
