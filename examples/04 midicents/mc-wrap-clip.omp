; OM File Header - Saved 2021/06/10 8:45:31
; (6.19 :patc (om-make-point 10 260) (om-make-point 384 111) (om-make-point 1044 796) "" 183 0 "2021/04/03 0:38:26" "2021/06/09 10:27:20")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "mc-wrap-clip" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 397 75) (quote "mc-wrap and mc-clip are similar in nature. mc-wrap takes $a midicent list and wraps every value by octave transpositions $around a given range, whereas mc-clip contrains/clips those $values within the range.") "" (om-make-point 30 73) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CLIPPED" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 100)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 70)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 590 523) (om-make-point 249 193) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 5100 5200 5500) (5500 6000 6300 6400) (6400 6700 7200 7500) (7200 7500 7600 7900) (7600 7900 7200 7500) (7600 7900 7200 7500) (7500 7600 7900 7200) (7200 7500 7600 7900) (6300 6400 6700 7200) (5200 5500 6000 6300) (4300 4800 5100 5200) (4800 3900 4000 4300) (3900 4000 4300 4800) (4300 4800 3900 4000) (4000 4300 4800 3900) (4000 4300 4800 3900) (4300 4800 3900 4000) (3900 4000 4300 4800) (4300 4800 3900 4000) (4000 4300 4800 5100) (5200 5500 6000 6300) (6300 6400 6700 7200) (6700 7200 7500 7600) (7500 7600 7900 7200) (7600 7900 7200 7500) (7600 7900 7200 7500) (7500 7600 7900 7200) (6700 7200 7500 7600) (6000 6300 6400 6700) (5100 5200 5500 6000) (4000 4300 4800 5100) (4300 4800 3900 4000) (4800 3900 4000 4300) (4300 4800 3900 4000) (4000 4300 4800 3900) (4000 4300 4800 3900) (4800 3900 4000 4300) (4000 4300 4800 3900) (3900 4000 4300 4800) (4800 5100 5200 5500))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4200)) :ldur (quote ((300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300))) :lvel (quoteloffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC-CLIP" (quote mc-clip) (quote ((om-load-inputfun (quote input-funbox) "list" "MC-LIST" 5500) (om-load-inputfun (quote input-funbox) "number" "LOWER-BOUND" 6000) (om-load-inputfun (quote input-funbox) "number" "UPPER-BOUND" 7200))) (om-make-point 624 435) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 100 21) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 85 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "UPPER BOUND" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 566 301) (om-make-point 95 103) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 8000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 25) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "LOWER BOUND" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 427 301) (om-make-point 95 103) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 3800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 573 38) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "midi-channels" (om-load-patch-abs1 "midi-channels" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 501) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 330 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 362 100) (om-make-point 70 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 340 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 297 50) (om-make-point 34 30) 28 "28" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 265 80) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (4 0 5 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 3729/5 444) nil (list (list (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3))) "x" "midi-channels"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC-WRAP" (quote mc-wrap) (quote ((om-load-inputfun (quote input-funbox) "list" "MC-LIST" 5500) (om-load-inputfun (quote input-funbox) "number" "LOWER-BOUND" 6000) (om-load-inputfun (quote input-funbox) "number" "UPPER-BOUND" 7200))) (om-make-point 364 435) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORIGINAL" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 100)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 70)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 58 524) (om-make-point 269 192) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 5100 5200 5500) (5500 6000 6300 6400) (6400 6700 7200 7500) (7200 7500 7600 7900) (7600 7900 8400 8700) (7600 7900 8400 8700) (7500 7600 7900 8400) (7200 7500 7600 7900) (6300 6400 6700 7200) (5200 5500 6000 6300) (4300 4800 5100 5200) (3600 3900 4000 4300) (2700 2800 3100 3600) (1900 2400 2700 2800) (1600 1900 2400 2700) (1600 1900 2400 2700) (1900 2400 2700 2800) (2700 2800 3100 3600) (3100 3600 3900 4000) (4000 4300 4800 5100) (5200 5500 6000 6300) (6300 6400 6700 7200) (6700 7200 7500 7600) (7500 7600 7900 8400) (7600 7900 8400 8700) (7600 7900 8400 8700) (7500 7600 7900 8400) (6700 7200 7500 7600) (6000 6300 6400 6700) (5100 5200 5500 6000) (4000 4300 4800 5100) (3100 3600 3900 4000) (2400 2700 2800 3100) (1900 2400 2700 2800) (1600 1900 2400 2700) (1600 1900 2400 2700) (2400 2700 2800 3100) (2800 3100 3600 3900) (3900 4000 4300 4800) (4800 5100 5200 5500))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4200)) :ldur (quote ((300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300))) :lvel (quoteloffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "WRAPPED" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 100)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 70)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 334 524) (om-make-point 249 193) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 5100 5200 5500) (5500 6000 6300 6400) (6400 6700 7200 7500) (7200 7500 7600 7900) (7600 7900 7200 3900) (7600 7900 7200 3900) (7500 7600 7900 7200) (7200 7500 7600 7900) (6300 6400 6700 7200) (5200 5500 6000 6300) (4300 4800 5100 5200) (7200 3900 4000 4300) (7500 7600 7900 7200) (6700 7200 7500 7600) (6400 6700 7200 7500) (6400 6700 7200 7500) (6700 7200 7500 7600) (7500 7600 7900 7200) (7900 7200 3900 4000) (4000 4300 4800 5100) (5200 5500 6000 6300) (6300 6400 6700 7200) (6700 7200 7500 7600) (7500 7600 7900 7200) (7600 7900 7200 3900) (7600 7900 7200 3900) (7500 7600 7900 7200) (6700 7200 7500 7600) (6000 6300 6400 6700) (5100 5200 5500 6000) (4000 4300 4800 5100) (7900 7200 3900 4000) (7200 7500 7600 7900) (6700 7200 7500 7600) (6400 6700 7200 7500) (6400 6700 7200 7500) (7200 7500 7600 7900) (7600 7900 7200 3900) (3900 4000 4300 4800) (4800 5100 5200 5500))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4200)) :ldur (quote ((300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300) (300 300 300 300))) :lvel (quoteloffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3) (1 2 3 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SHIFT-POSN" (quote shift-posn) (quote ((om-load-inputfun (quote input-funbox) "midicent list" "CHORD-LIST" (list 3600 5200 6700 7000)) (om-load-inputfun (quote input-funbox) "chordal step" "N-STEP" 1))) (om-make-point 88 356) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TARGET PC" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 36 171) (om-make-point 89 155) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5100 5200 5500)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 25) (om-make-point 685 312) 3 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 132 230) (om-make-point 182 98) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 3218 6436 9654 12872 16090 19308 22526 25744 28962 32179 35397 38615 41833 45051 48269 51487 54705 57923 61141 64359 67577 70795 74013 77231 80449 83667 86885 90103 93321 96538 99756 102974 106192 109410 112628 115846 119064 122282 125500)) (quote (0 3 6 8 10 10 9 8 5 2 -1 -4 -7 -9 -10 -10 -9 -7 -5 -2 2 5 7 9 10 10 9 7 4 1 -2 -5 -8 -9 -10 -10 -8 -6 -3 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (7 0 1 6 nil 0) (11 0 2 0 nil 0) (6 1 2 1 nil 0) (5 1 2 2 nil 0) (11 0 8 0 nil 0) (6 1 8 1 nil 0) (5 1 8 2 nil 0) (11 0 9 1 nil 0) (7 0 9 6 nil 0) (8 0 10 1 nil 0) (7 0 10 6 nil 0) (12 1 11 0 nil 0) (13 2 11 1 nil 0))) nil 6.18))
