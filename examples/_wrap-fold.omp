; OM File Header - Saved 2021/04/02 9:42:04
; (6.18 :patc (om-make-point 118 160) (om-make-point 386 32) (om-make-point 746 860) "" 183 0 "2021/03/31 11:01:20" "2021/04/02 9:42:04")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"_fill-range.omp\""))
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "_wrap-fold" (quote ((let ((box (om-load-boxcall (quote abstraction) "midi-channels" (om-load-patch-abs1 "midi-channels" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 501) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 330 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 362 100) (om-make-point 49 30) (list 1 2 3) "(1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 340 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 297 50) (om-make-point 34 30) 28 "28" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 265 80) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (4 0 5 1 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 487 626)) (quote nil) (om-make-point 3189/5 583) nil (list (list (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3) (list 1 2 3))) "x" "midi-channels"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "LOWER BOUND" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 397 431) (om-make-point 95 103) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 4800 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 573 38) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "UPPER BOUND" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 504 432) (om-make-point 95 103) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 7200 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 25) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 10 346) (om-make-point 94 30) (list 0 700 1200) "(0 700 1200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 76 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" (list 0 400 500)))) (om-make-point 44 377) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FOLDED" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 100)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 531 655) (om-make-point 190 193) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500 5800 5300) (6300 5600 5100) (6000 5300 4800) (5800 5100 5000) (5600 4900 5200) (5300 5000 5500) (5100 5200 5700) (4800 5500 6000) (5000 5700 6200) (5200 5900 6400) (5500 6200 6700) (5700 6400 6900) (6000 6700 7200) (6200 6900 7000) (6400 7100 6800) (6700 7000 6500) (6900 6800 6300) (7200 6500 6000) (7000 6300 5800) (6800 6100 5600) (6500 5800 5300) (6300 5600 5100) (6000 5300 4800) (5800 5100 5000) (5600 4900 5200) (5300 5000 5500) (5100 5200 5700) (4800 5500 6000))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 3000)) :ldur (quote ((300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "WRAPPED" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 100)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 331 656) (om-make-point 190 193) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500 6200 6700) (5700 6400 6900) (6000 6700 4800) (6200 6900 5000) (6400 7100 5200) (6700 5000 5500) (6900 5200 5700) (4800 5500 6000) (5000 5700 6200) (5200 5900 6400) (5500 6200 6700) (5700 6400 6900) (6000 6700 4800) (6200 6900 5000) (6400 7100 5200) (6700 5000 5500) (6900 5200 5700) (4800 5500 6000) (5000 5700 6200) (5200 5900 6400) (5500 6200 6700) (5700 6400 6900) (6000 6700 4800) (6200 6900 5000) (6400 7100 5200) (6700 5000 5500) (6900 5200 5700) (4800 5500 6000))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 3000)) :ldur (quote ((300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORIGINAL" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 100)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 300)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 133 656) (om-make-point 190 193) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3100 3800 4300) (3300 4000 4500) (3600 4300 4800) (3800 4500 5000) (4000 4700 5200) (4300 5000 5500) (4500 5200 5700) (4800 5500 6000) (5000 5700 6200) (5200 5900 6400) (5500 6200 6700) (5700 6400 6900) (6000 6700 7200) (6200 6900 7400) (6400 7100 7600) (6700 7400 7900) (6900 7600 8100) (7200 7900 8400) (7400 8100 8600) (7600 8300 8800) (7900 8600 9100) (8100 8800 9300) (8400 9100 9600) (8600 9300 9800) (8800 9500 10000) (9100 9800 10300) (9300 10000 10500) (9600 10300 10800))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 3000)) :ldur (quote ((300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300) (300 300 300))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3) (1 2 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 141 495) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-FOLD" (quote list-fold) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 0 1 2 3 4 5 6 7 8 9 10 11 12)) (om-load-inputfun (quote input-funbox) "integer" "LOWER-BOUND" 2) (om-load-inputfun (quote input-funbox) "integer" "UPPER-BOUND" 6))) (om-make-point 551 566) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-WRAP" (quote list-wrap) (quote ((om-load-inputfun (quote input-funbox) "list" "IN-LIST" (list 0 1 2 3 4 5 6 7 8 9 10 11 12)) (om-load-inputfun (quote input-funbox) "integer" "LOWER-BOUND" 5) (om-load-inputfun (quote input-funbox) "integer" "UPPER-BOUND" 23))) (om-make-point 347 566) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PITCH COLLECTION" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 119 217) (om-make-point 131 197) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100 3300 3600 3800 4000 4300 4500 4800 5000 5200 5500 5700 6000 6200 6400 6700 6900 7200 7400 7600 7900 8100 8400 8600 8800 9100 9300 9600)) :ldur (quote (150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 25) (om-make-point 370 280) 3 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "_fill-range" (quote ("elements" "examples" "_fill-range")) (quote nil) (om-make-point 108 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 27) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 325 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 27)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 257 319) (om-make-point 165 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 27 54 81 108 135 162 189 216 243 270 297 324 351 378 405 432 459 486 513 540 567 594 621 648 675 702 729)) (quote (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 79 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 337 75) (quote "list-wrap and list-fold are similar in nature. list-wrap $takes a list and wraps every value around a given $range, whereas list-fold reflects back those values $the range.") "" (om-make-point 21 67) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 94 21) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 4 0 nil 0) (12 1 4 1 nil 0) (3 0 5 1 nil 0) (10 0 6 1 nil 0) (0 0 6 6 nil 0) (11 0 7 1 nil 0) (0 0 7 6 nil 0) (9 0 8 1 nil 0) (0 0 8 6 nil 0) (4 0 9 0 nil 0) (15 2 9 1 nil 0) (9 0 10 0 nil 0) (1 1 10 1 nil 0) (2 1 10 2 nil 0) (9 0 11 0 nil 0) (1 1 11 1 nil 0) (2 1 11 2 nil 0) (13 0 12 0 nil 0) (14 0 15 2 nil 0))) nil 6.18))
