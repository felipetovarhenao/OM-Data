; OM File Header - Saved 2021/05/27 8:59:23
; (6.18 :patc (om-make-point 118 60) (om-make-point 148 108) (om-make-point 1081 853) "" 183 0 "2021/03/30 14:02:24" "2021/05/27 8:56:00")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "k-means-1" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 455 699) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "clusters->3dc-lib" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "clusters" nil))) (om-make-point 835 413) nil nil nil (list (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0))) (om-make-point 69 440) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj) nil nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize)) (list nil nil 1.0 2 1 1 0 (om-make-point 600 200) (om-make-point 800 800))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 154 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OPTIMAL-SORTING" (quote optimal-sorting) (quote ((om-load-inputfun (quote input-funbox) "list (initial)" "ST-LIST" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "list of lists" "OTHER-LISTS" (list (list 0 1 2 3) (list 1 2 3 4) (list 2 3 4 5))) (om-load-inputfun (quote input-funbox) "list (optional)" "WEIGHTS" nil))) (om-make-point 74 237) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 55 503) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 143 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 75 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 78 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 30 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 71 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 99 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "clusters" 0 (om-make-point 99 39) "" "clusters" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 80 579) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 6 578) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((7 0 0 1 nil 0) (6 0 0 2 nil 0) (1 0 0 3 nil 0) (8 0 1 0 nil 0) (5 0 2 0 nil 0) (4 0 2 1 nil 0) (0 0 3 0 nil 0) (9 0 4 0 nil 0) (9 0 5 0 nil 0) (8 0 6 0 nil 0) (8 0 7 0 nil 0) (2 0 8 0 nil 0) (10 0 9 0 nil 0) (3 1 11 0 nil 0) (3 0 12 0 nil 0))) 1 "clusters->3dc-lib" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLOT-POINTS 2" (quote plot-points) (quote ((om-load-inputfun (quote input-funbox) "list" "POINTS" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 51 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLOT-POINTS" (quote plot-points) (quote ((om-load-inputfun (quote input-funbox) "list" "POINTS" (list (list -2 2) (list 0 0) (list 1 -1) (list -1 1) (list -4 3) (list -3 4))))) (om-make-point 529 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 202 30) (quote "(double-click to visualize data)") "" (om-make-point 381 640) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CLUSTERED 3D DATA" (quote 3dc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of 3DC objects" "bpf-list" (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj))))) (om-make-point 726 475) (om-make-point 238 164) (if (find-class (quote 3dc-lib) nil) (make-instance (quote 3dc-lib) :bpf-list (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-17 -18 -16 -16 -14 -15 -12 -10)) (quote (-16 -18 -14 -11 -8 -12 -18 -15)) (quote (-7 -10 -12 -12 -9 -8 -8 -13)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -7 -10 -12 -12 -9 -8 -8 -13))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-14 -12 -9 -9 -9 -8 -15 -15)) (quote (17 15 13 14 16 18 12 7)) (quote (-13 -16 -16 -11 -10 -11 -11 -17)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -13 -16 -16 -11 -10 -11 -11 -17))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-12 -9 -9 -10 -10 -14)) (quote (-16 -17 -16 -12 -14 -17)) (quote (15 13 16 17 12 10)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 15 13 16 17 12 10))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (7 8 15 11 17)) (quote (11 9 12 17 18)) (quote (-10 -9 -16 -15 -12)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -10 -9 -16 -15 -12))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (9 10 8 11 12 12)) (quote (-9 -10 -7 -9 -9 -18)) (quote (7 9 12 14 18 8)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 7 9 12 14 18 8))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-12 -12 -11 -7 -7 -11 -16)) (quote (8 13 14 17 10 18 17)) (quote (7 8 9 7 12 15 8)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 7 8 9 7 12 15 8))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (13 14 15 9)) (quote (-9 -8 -14 -17)) (quote (-15 -14 -11 -16)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -15 -14 -11 -16))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (16 18 16 10 9 7)) (quote (9 8 11 9 15 16)) (quote (15 13 7 13 11 12)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 15 13 7 13 11 12))) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos mode show-axes show-room room-size line-width bg-color picture)) (list (om-make-point 800 800) (om-make-point 600 200) 0 1 1 2 1.0 nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RAW 3D DATA" (quote 3dc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of 3DC objects" "bpf-list" (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote nil) (quote nil) (quote nil) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) nil)) newobj))))) (om-make-point 482 474) (om-make-point 238 164) (if (find-class (quote 3dc-lib) nil) (make-instance (quote 3dc-lib) :bpf-list (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.118638546 -0.118638546)) (quote (0.082739175 0.082739175)) (quote (0.06701487 0.06701487)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.06701487 0.06701487))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.1140136 -0.1140136)) (quote (0.1825589 0.1825589)) (quote (0.15130863 0.15130863)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.15130863 0.15130863))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.13691496 -0.13691496)) (quote (0.16858386 0.16858386)) (quote (-0.13491135 -0.13491135)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.13491135 -0.13491135))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.08607564 0.08607564)) (quote (-0.0908691 -0.0908691)) (quote (0.074059226 0.074059226)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.074059226 0.074059226))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.15721071 0.15721071)) (quote (0.09344616 0.09344616)) (quote (0.15378817 0.15378817)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.15378817 0.15378817))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.17488118 -0.17488118)) (quote (-0.16255909 -0.16255909)) (quote (-0.07111746 -0.07111746)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.07111746 -0.07111746))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.16229739 -0.16229739)) (quote (-0.10603653 -0.10603653)) (quote (-0.12110771 -0.12110771)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.12110771 -0.12110771))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.06709417 0.06709417)) (quote (0.107910045 0.107910045)) (quote (-0.096649684 -0.096649684)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.096649684 -0.096649684))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.15141426 0.15141426)) (quote (0.117022515 0.117022515)) (quote (-0.16208089 -0.16208089)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.16208089 -0.16208089))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.0805175 -0.0805175)) (quote (0.17950037 0.17950037)) (quote (-0.11092883 -0.11092883)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.11092883 -0.11092883))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.17593807 -0.17593807)) (quote (-0.17506016 -0.17506016)) (quote (-0.10372042 -0.10372042)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.10372042 -0.10372042))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.11849447 0.11849447)) (quote (-0.08838368 -0.08838368)) (quote (0.18189553 0.18189553)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.18189553 0.18189553))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.10631807 -0.10631807)) (quote (0.14038909 0.14038909)) (quote (0.08685707 0.08685707)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.08685707 0.08685707))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.18099317 0.18099317)) (quote (0.082126335 0.082126335)) (quote (0.1300645 0.1300645)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.1300645 0.1300645))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.16378476 0.16378476)) (quote (0.11220296 0.11220296)) (quote (0.06668843 0.06668843)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.06668843 0.06668843))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.13178809 0.13178809)) (quote (-0.08648508 -0.08648508)) (quote (-0.15223593 -0.15223593)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.15223593 -0.15223593))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.09664395 -0.09664395)) (quote (-0.15466549 -0.15466549)) (quote (-0.13399385 -0.13399385)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.13399385 -0.13399385))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.12105496 -0.12105496)) (quote (-0.16196014 -0.16196014)) (quote (0.15281472 0.15281472)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.15281472 0.15281472))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.15245658 -0.15245658)) (quote (0.117541164 0.117541164)) (quote (-0.105378054 -0.105378054)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.105378054 -0.105378054))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.14124619 -0.14124619)) (quote (-0.16578368 -0.16578368)) (quote (0.09993244 0.09993244)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.09993244 0.09993244))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.07929303 0.07929303)) (quote (-0.07349415 -0.07349415)) (quote (0.124695644 0.124695644)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.124695644 0.124695644))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.15158546 -0.15158546)) (quote (0.066711776 0.066711776)) (quote (-0.17156035 -0.17156035)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.17156035 -0.17156035))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.11802136 -0.11802136)) (quote (-0.17750508 -0.17750508)) (quote (-0.07687105 -0.07687105)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.07687105 -0.07687105))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.1390344 -0.1390344)) (quote (-0.080270916 -0.080270916)) (quote (-0.0871496 -0.0871496)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.0871496 -0.0871496))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.16379188 -0.16379188)) (quote (-0.13592747 -0.13592747)) (quote (-0.119419076 -0.119419076)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.119419076 -0.119419076))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.1426578 0.1426578)) (quote (-0.07942631 -0.07942631)) (quote (-0.13879462 -0.13879462)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.13879462 -0.13879462))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.09098304 -0.09098304)) (quote (0.13867912 0.13867912)) (quote (-0.10853588 -0.10853588)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.10853588 -0.10853588))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.08517935 -0.08517935)) (quote (-0.1594856 -0.1594856)) (quote (0.16446577 0.16446577)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.16446577 0.16446577))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.11504843 -0.11504843)) (quote (0.15318848 0.15318848)) (quote (-0.16300015 -0.16300015)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.16300015 -0.16300015))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.08819668 -0.08819668)) (quote (-0.16516494 -0.16516494)) (quote (0.13447437 0.13447437)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.13447437 0.13447437))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.06935794 -0.06935794)) (quote (0.10116345 0.10116345)) (quote (0.11598789 0.11598789)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.11598789 0.11598789))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.06769317 0.06769317)) (quote (0.16071396 0.16071396)) (quote (0.1174015 0.1174015)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.1174015 0.1174015))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.10721899 0.10721899)) (quote (0.17283616 0.17283616)) (quote (-0.15332984 -0.15332984)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.15332984 -0.15332984))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.14620179 0.14620179)) (quote (-0.13916447 -0.13916447)) (quote (-0.1125853 -0.1125853)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.1125853 -0.1125853))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.08563867 0.08563867)) (quote (-0.167723 -0.167723)) (quote (-0.16377472 -0.16377472)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.16377472 -0.16377472))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.15539669 -0.15539669)) (quote (0.1687842 0.1687842)) (quote (0.08006509 0.08006509)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.08006509 0.08006509))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.08028639 0.08028639)) (quote (0.08548754 0.08548754)) (quote (-0.08888708 -0.08888708)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.08888708 -0.08888708))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.06901558 -0.06901558)) (quote (0.17163497 0.17163497)) (quote (0.069709376 0.069709376)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.069709376 0.069709376))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.089522876 -0.089522876)) (quote (0.16415222 0.16415222)) (quote (-0.10305372 -0.10305372)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.10305372 -0.10305372))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.11858357 0.11858357)) (quote (-0.18198338 -0.18198338)) (quote (0.07575511 0.07575511)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.07575511 0.07575511))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.11124384 0.11124384)) (quote (-0.08939686 -0.08939686)) (quote (0.14287587 0.14287587)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.14287587 0.14287587))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.10069209 -0.10069209)) (quote (-0.121642076 -0.121642076)) (quote (0.1711286 0.1711286)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.1711286 0.1711286))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.1465275 -0.1465275)) (quote (-0.12117615 -0.12117615)) (quote (-0.076148175 -0.076148175)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.076148175 -0.076148175))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.11759625 -0.11759625)) (quote (0.1290454 0.1290454)) (quote (0.07653161 0.07653161)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.07653161 0.07653161))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.17067723 0.17067723)) (quote (0.17500218 0.17500218)) (quote (-0.11534949 -0.11534949)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.11534949 -0.11534949))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.1023871 0.1023871)) (quote (0.0851701 0.0851701)) (quote (0.13323723 0.13323723)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.13323723 0.13323723))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.08616949 0.08616949)) (quote (0.15202779 0.15202779)) (quote (0.10600244 0.10600244)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.10600244 0.10600244))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.08783248 -0.08783248)) (quote (0.13422443 0.13422443)) (quote (-0.16433797 -0.16433797)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list -0.16433797 -0.16433797))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.09787178 -0.09787178)) (quote (-0.13725436 -0.13725436)) (quote (0.11983024 0.11983024)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.11983024 0.11983024))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.098152444 0.098152444)) (quote (-0.103379056 -0.103379056)) (quote (0.08682274 0.08682274)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.08682274 0.08682274))) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos mode show-axes show-room room-size line-width bg-color picture)) (list (om-make-point 800 800) (om-make-point 600 200) 0 1 1 2 1.0 nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-3D-data" (om-load-patch-abs1 "random-3D-data" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0.5))) (om-make-point 36 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 58 188) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -6.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 6.0))) (om-make-point 70 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 3))) (om-make-point 48 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n-data" 0 (om-make-point 113 227) "" "n-data" 20 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 78 386) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 74 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 25))) (om-make-point 37 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 9 42) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (7 0 1 0 nil 0) (2 0 1 1 nil 0) (1 0 3 0 nil 0) (6 0 5 0 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0) (0 0 7 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 200 451)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 710 233) nil (list (list (list -11.863854 8.273917 6.7014876) (list -11.40136 18.25589 15.130862) (list -13.691496 16.858386 -13.491135) (list 8.607564 -9.08691 7.405923) (list 15.721071 9.344616 15.378817) (list -17.488118 -16.255909 -7.111746) (list -16.229739 -10.603653 -12.110771) (list 6.709417 10.791004 -9.6649685) (list 15.141426 11.702251 -16.208088) (list -8.05175 17.950037 -11.092883) (list -17.593808 -17.506016 -10.372042) (list 11.849447 -8.838368 18.189553) (list -10.631807 14.038908 8.685707) (list 18.099318 8.212633 13.006451) (list 16.378476 11.220296 6.6688433) (list 13.178809 -8.648508 -15.223593) (list -9.664394 -15.466549 -13.399385) (list -12.105496 -16.196015 15.281471) (list -15.245659 11.754116 -10.537806) (list -14.124619 -16.578368 9.993244) (list 7.9293027 -7.349415 12.469564) (list -15.158546 6.671178 -17.156035) (list -11.802136 -17.750508 -7.687105) (list -13.90344 -8.027092 -8.71496) (list -16.379189 -13.592747 -11.941908) (list 14.2657795 -7.942631 -13.879462) (list -9.098304 13.867912 -10.853588) (list -8.517935 -15.948559 16.446578) (list -11.504843 15.318848 -16.300015) (list -8.819668 -16.516493 13.447436) (list -6.935794 10.116344 11.598789) (list 6.7693167 16.071396 11.74015) (list 10.721899 17.283616 -15.332983) (list 14.620178 -13.916447 -11.25853) (list 8.563868 -16.7723 -16.377472) (list -15.539669 16.87842 8.006509) (list 8.028639 8.548754 -8.888708) (list -6.901558 17.163498 6.9709373) (list -8.952288 16.415223 -10.305372) (list 11.858356 -18.198338 7.5755115) (list 11.124384 -8.939686 14.287586) (list -10.069209 -12.164207 17.11286) (list -14.65275 -12.117616 -7.6148176) (list -11.7596245 12.90454 7.653161) (list 17.067723 17.500218 -11.534948) (list 10.23871 8.51701 13.323723) (list 8.616949 15.202778 10.6002445) (list -8.783248 13.422443 -16.433796) (list -9.787178 -13.725435 11.983025) (list 9.815245 -10.337906 8.682274))) "x" "random-3D-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 745 202) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "K-MEANS 2" (quote k-means) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list (list 0 1 0) (list -3 -1 2) (list 4 0 9) (list -3 -5 -1) (list 0 4 -3) (list 2 1 -4))) (om-load-inputfun (quote input-funbox) "k (integer)" "K" 2) (om-load-inputfun (quote input-funbox) "weights (optional)" "WEIGHTS" nil))) (om-make-point 869 334) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 885 282) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 74 30) (quote "k clusters") "" (om-make-point 866 252) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 74 30) (quote "data items") "" (om-make-point 780 198) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 74 1) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 319 135) (quote "k-means is an unsupervised clustering algorithm. $It takes a data set and groups it into k groups, $where k is the number of assumed classes in the $data. The clustering can be optionally weighted. $By default, all elements have equal weights.$$The weights and every data item/list must have $the same length.") "" (om-make-point 14 57) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 59 24) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 74 30) (quote "data items") "" (om-make-point 302 198) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 74 30) (quote "k clusters") "" (om-make-point 381 252) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CLUSTERED 2D DATA" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 243 474) (om-make-point 233 165) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-30.435 -30.32 -29.53 -28.959 -28.011 -25.386 -24.65 -19.531)) (quote (-25.078 -27.756 -23.93 -30.023 -25.905 -26.592 -23.953 -22.422)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-28.8 -27.945 -27.443 -24.422)) (quote (-5.794 5.075 3.687 3.039)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-29.866 -26.438 -25.584 -25.54 -25.323 -19.093)) (quote (19.376 22.295 24.093 29.344 20.292 25.24)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-5.872 -5.546 -1.062 -0.214 2.376 3.359)) (quote (-26.218 -19.348 -21.631 -22.341 -25.769 -27.896)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-5.441 -4.534 -3.88 -3.768 -1.372 -1.37 2.985)) (quote (24.384 25.04 24.006 24.318 28.071 24.883 20.185)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-5.267 -4.187 -1.337 -0.82)) (quote (-4.953 -4.866 -5.135 3.101)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (20.595 23.751)) (quote (5.721 -4.161)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (20.446 21.192 23.187 25.89 26.501 29.159)) (quote (27.393 20.89 20.154 26.338 20.511 22.358)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (20.155 21.119 22.5 22.924 27.235 27.527 29.916)) (quote (-23.636 -27.767 -25.162 -23.811 -24.514 -23.319 -25.718)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "clusters->bpf-lib" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "clusters" nil))) (om-make-point 351 414) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OPTIMAL-SORTING" (quote optimal-sorting) (quote ((om-load-inputfun (quote input-funbox) "list (initial)" "ST-LIST" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "list of lists" "OTHER-LISTS" (list (list 0 1 2 3) (list 1 2 3 4) (list 2 3 4 5))) (om-load-inputfun (quote input-funbox) "list (optional)" "WEIGHTS" nil))) (om-make-point 64 227) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 64 502) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 133 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 65 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 80 440) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 656 289) (om-make-point 10 40) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 112 386) (om-make-point 46 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 64 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 76 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 89 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "clusters" 0 (om-make-point 89 29) "" "clusters" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 89 578) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 15 577) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (4 0 1 0 nil 0) (8 0 2 0 nil 0) (8 0 3 0 nil 0) (6 0 4 1 nil 0) (5 0 4 2 nil 0) (7 0 5 0 nil 0) (7 0 6 0 nil 0) (0 0 7 0 nil 0) (9 0 8 0 nil 0) (1 1 10 0 nil 0) (1 0 11 0 nil 0))) 1 "clusters->bpf-lib" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 400 282) (om-make-point 27 30) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "K-MEANS" (quote k-means) (quote ((om-load-inputfun (quote input-funbox) "list" "DATA" (list (list 0 1 0) (list -3 -1 2) (list 4 0 9) (list -3 -5 -1) (list 0 4 -3) (list 2 1 -4))) (om-load-inputfun (quote input-funbox) "k (integer)" "K" 2) (om-load-inputfun (quote input-funbox) "weights (optional)" "WEIGHTS" nil))) (om-make-point 384 334) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RAW 2D DATA" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 5 474) (om-make-point 233 165) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.28011137 -0.28011137)) (quote (-0.25905216 -0.25905216)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02375969 0.02375969)) (quote (-0.25768828 -0.25768828)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.20446334 0.20446334)) (quote (0.27392733 0.27392733)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.04186997 -0.04186997)) (quote (-0.048663296 -0.048663296)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.29866347 -0.29866347)) (quote (0.19376093 0.19376093)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.27945346 -0.27945346)) (quote (0.050747536 0.050747536)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.013704858 -0.013704858)) (quote (0.24883285 0.24883285)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.013373852 -0.013373852)) (quote (-0.0513502 -0.0513502)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22923818 0.22923818)) (quote (-0.2381109 -0.2381109)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.013717318 -0.013717318)) (quote (0.28071412 0.28071412)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.0021368694 -0.0021368694)) (quote (-0.223408 -0.223408)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.3043477 -0.3043477)) (quote (-0.25077564 -0.25077564)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.055464808 -0.055464808)) (quote (-0.1934841 -0.1934841)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.054406915 -0.054406915)) (quote (0.24384275 0.24384275)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.058719665 -0.058719665)) (quote (-0.26217723 -0.26217723)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.20595053 0.20595053)) (quote (0.057213106 0.057213106)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.24649863 -0.24649863)) (quote (-0.23953125 -0.23953125)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27526942 0.27526942)) (quote (-0.23319313 -0.23319313)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.029846706 0.029846706)) (quote (0.20185043 0.20185043)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21119385 0.21119385)) (quote (-0.2776728 -0.2776728)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23750739 0.23750739)) (quote (-0.041608185 -0.041608185)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.28799912 -0.28799912)) (quote (-0.057944484 -0.057944484)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03358615 0.03358615)) (quote (-0.2789608 -0.2789608)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.29529625 -0.29529625)) (quote (-0.23929908 -0.23929908)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2915902 0.2915902)) (quote (0.2235809 0.2235809)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22499691 0.22499691)) (quote (-0.2516236 -0.2516236)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.03768352 -0.03768352)) (quote (0.2431778 0.2431778)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26500997 0.26500997)) (quote (0.20511422 0.20511422)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2723546 0.2723546)) (quote (-0.24514121 -0.24514121)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.2532302 -0.2532302)) (quote (0.20292212 0.20292212)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.045342066 -0.045342066)) (quote (0.25039595 0.25039595)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.25539556 -0.25539556)) (quote (0.29343987 0.29343987)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.20154612 0.20154612)) (quote (-0.23635899 -0.23635899)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.28958523 -0.28958523)) (quote (-0.3002319 -0.3002319)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.038803324 -0.038803324)) (quote (0.24005571 0.24005571)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.27442622 -0.27442622)) (quote (0.036873415 0.036873415)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.010623408 -0.010623408)) (quote (-0.2163097 -0.2163097)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21191517 0.21191517)) (quote (0.20890492 0.20890492)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.19531279 -0.19531279)) (quote (-0.2242206 -0.2242206)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.052668184 -0.052668184)) (quote (-0.049528312 -0.049528312)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.2643787 -0.2643787)) (quote (0.222947 0.222947)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23187018 0.23187018)) (quote (0.2015444 0.2015444)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.25583693 -0.25583693)) (quote (0.24093092 0.24093092)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.24421728 -0.24421728)) (quote (0.030393258 0.030393258)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29916358 0.29916358)) (quote (-0.2571832 -0.2571832)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.30319884 -0.30319884)) (quote (-0.2775615 -0.2775615)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.25385606 -0.25385606)) (quote (-0.26592386 -0.26592386)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2589022 0.2589022)) (quote (0.2633781 0.2633781)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.008199105 -0.008199105)) (quote (0.031007223 0.031007223)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.19093438 -0.19093438)) (quote (0.25240123 0.25240123)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 851 541) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 267 202) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random-2D-data" (om-load-patch-abs1 "random-2D-data" (quote ((let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 68 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -6.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 6.0))) (om-make-point 90 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0) (om-load-inputfun (quote input-funbox) "times" "N" 2))) (om-make-point 58 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n-data" 0 (om-make-point 153 282) "" "n-data" 20 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 98 431) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 10))) (om-make-point 94 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 25))) (om-make-point 47 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 20 62) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (1 0 0 1 nil 0) (0 0 2 0 nil 0) (5 0 4 0 nil 0) (2 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 438 534)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 232 233) nil (list (list (list -28.011137 -25.905217) (list 2.375969 -25.76883) (list 20.446333 27.392735) (list -4.186997 -4.8663297) (list -29.866347 19.376093) (list -27.945345 5.0747538) (list -1.3704858 24.883286) (list -1.3373852 -5.13502) (list 22.923819 -23.81109) (list -1.3717318 28.071412) (list -0.21368695 -22.3408) (list -30.434769 -25.077563) (list -5.5464807 -19.34841) (list -5.4406915 24.384276) (list -5.8719664 -26.217724) (list 20.595053 5.7213106) (list -24.649863 -23.953125) (list 27.526942 -23.319314) (list 2.9846707 20.185044) (list 21.119385 -27.767279) (list 23.750739 -4.1608186) (list -28.799914 -5.7944484) (list 3.358615 -27.89608) (list -29.529625 -23.929907) (list 29.159022 22.35809) (list 22.499691 -25.162362) (list -3.768352 24.31778) (list 26.500998 20.511422) (list 27.23546 -24.51412) (list -25.323023 20.292212) (list -4.5342064 25.039597) (list -25.539557 29.343987) (list 20.154612 -23.635899) (list -28.958523 -30.023192) (list -3.8803325 24.005572) (list -27.442624 3.6873417) (list -1.0623407 -21.63097) (list 21.191517 20.890492) (list -19.531279 -22.42206) (list -5.2668185 -4.9528313) (list -26.43787 22.2947) (list 23.187018 20.15444) (list -25.583693 24.093092) (list -24.421729 3.0393257) (list 29.916359 -25.718319) (list -30.319886 -27.75615) (list -25.385605 -26.592387) (list 25.89022 26.337813) (list -0.8199105 3.1007223) (list -19.093438 25.240124))) "x" "random-2D-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((22 0 0 0 nil 0) (18 0 0 1 nil 0) (6 0 0 2 nil 0) (5 0 0 3 nil 0) (9 0 1 0 nil 0) (24 0 2 0 nil 0) (7 0 3 0 nil 0) (1 0 5 1 nil 0) (3 0 6 0 nil 0) (8 0 7 0 nil 0) (7 0 9 0 nil 0) (10 0 9 1 nil 0) (19 0 18 1 nil 0) (21 0 19 0 nil 0) (24 0 21 0 nil 0) (20 0 21 1 nil 0) (2 0 22 0 nil 0) (23 0 24 0 nil 0))) nil 6.18))
