; OM File Header - Saved 2021/04/25 15:09:47
; (6.18 :patc (om-make-point 10 60) (om-make-point 50 50) (om-make-point 627 885) "" 183 0 "2021/04/25 12:11:04" "2021/04/25 15:09:47")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "_rhythmicon" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 146 30) (quote "fundamental duration") nil (om-make-point 50 299) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 125 30) (quote "spectral distortion") nil (om-make-point 214 232) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 126 196) (om-make-point 27 30) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "end " "END" 7) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 106 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 118 30) (quote "rhythmic partials") nil (om-make-point 82 169) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 249 262) (om-make-point 45 30) 1.33 "1.33" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 119 30) (quote "number of cycles") nil (om-make-point 258 306) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 306 333) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 105 326) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" (list 0 1 2 3 4)) (om-load-inputfun (quote input-funbox) "number or list" "B" 1.33))) (om-make-point 211 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RHYTHMICON" (quote rhythmicon) (quote ((om-load-inputfun (quote input-funbox) "number" "BASE-DUR" 5000) (om-load-inputfun (quote input-funbox) "list" "SUBDIVISIONS" (list 1 2 3 4 5 6 7)) (om-load-inputfun (quote input-funbox) "integer" "TIMES" 4))) (om-make-point 183 363) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 20 440) (om-make-point 588 440) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (0 323 646 969 1291 1614 1937 2260 2583 2906 3229 3551 3874 4197 4520 4843 5166 5489 5811 6134 6457 6780 7103 7426 7749 8071 8394 8717 9040 9363 9686 10009 10331 10654 10977 11300 11623 11946 12269 12591 12914 13237 13560 13883 14206 14529 14851 15174 15497 15820 16143 16466 16788 17111 17434 17757 18080 18403 18726 19048 19371 19694 20017 20340 20663 20986 21308 21631 21954 22277 22600 22923 23246 23568 23891 24000)) :ldur (quote ((323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (323) (109))) :lvel (quote ((30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088) (8088))) :lonset (quote (0 378 755 1133 1510 1888 2266 2643 3021 3398 3776 4154 4531 4909 5287 5664 6042 6419 6797 7175 7552 7930 8307 8685 9063 9440 9818 10195 10573 10951 11328 11706 12083 12461 12839 13216 13594 13972 14349 14727 15104 15482 15860 16237 16615 16992 17370 17748 18125 18503 18880 19258 19636 20013 20391 20768 21146 21524 21901 22279 22656 23034 23412 23789 24000)) :ldur (quote ((378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (378) (211))) :lvel (quote ((44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44) (44))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780) (7780))) :lonset (quote (0 451 902 1353 1804 2255 2706 3157 3608 4059 4510 4961 5412 5863 6314 6765 7216 7667 8118 8569 9020 9471 9922 10373 10824 11275 11726 12177 12628 13079 13530 13981 14432 14883 15334 15785 16236 16687 17138 17589 18040 18491 18942 19393 19844 20295 20746 21197 21648 22099 22550 23001 23452 23903 24000)) :ldur (quote ((451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (451) (97))) :lvel (quote ((57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57) (57))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426) (7426))) :lonset (quote (0 554 1107 1661 2214 2768 3322 3875 4429 4983 5536 6090 6643 7197 7751 8304 8858 9412 9965 10519 11072 11626 12180 12733 13287 13840 14394 14948 15501 16055 16609 17162 17716 18269 18823 19377 19930 20484 21037 21591 22145 22698 23252 23806 24000)) :ldur (quote ((554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (554) (194))) :lvel (quote ((70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70) (70))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006) (7006))) :lonset (quote (0 706 1411 2117 2822 3528 4233 4939 5644 6350 7055 7761 8466 9172 9878 10583 11289 11994 12700 13405 14111 14816 15522 16227 16933 17638 18344 19050 19755 20461 21166 21872 22577 23283 23988 24000)) :ldur (quote ((706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (706) (12))) :lvel (quote ((82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82) (82))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492) (6492))) :lonset (quote (0 949 1899 2848 3797 4747 5696 6645 7595 8544 9493 10442 11392 12341 13290 14240 15189 16138 17088 18037 18986 19936 20885 21834 22784 23733 24000)) :ldur (quote ((949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (949) (267))) :lvel (quote ((93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93) (93))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830) (5830))) :lonset (quote (0 1392 2784 4175 5567 6959 8351 9743 11134 12526 13918 15310 16702 18094 19485 20877 22269 23661 24000)) :ldur (quote ((1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (1392) (339))) :lvel (quote ((103) (103) (103) (103) (103) (103) (103) (103) (103) (103) (103) (103) (103) (103) (103) (103) (103) (103))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4896) (4896) (4896) (4896) (4896) (4896) (4896) (4896) (4896) (4896) (4896))) :lonset (quote (0 2387 4773 7160 9546 11933 14320 16706 19093 21479 23866 24000)) :ldur (quote ((2387) (2387) (2387) (2387) (2387) (2387) (2387) (2387) (2387) (2387) (134))) :lvel (quote ((112) (112) (112) (112) (112) (112) (112) (112) (112) (112) (112))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3300) (3300) (3300) (3300))) :lonset (quote (0 6000 12000 18000 24000)) :ldur (quote ((6000) (6000) (6000) (6000))) :lvel (quote ((120) (120) (120) (120))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 3 0 (om-make-point 400 25) (om-make-point 1007 842) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 166 42) (quote "OM-Data tutorials") "" (om-make-point 103 21) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 30) (quote "[www.felipe-tovar-henao.com]") "" (om-make-point 79 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 484 98) (quote "rhythmicon outputs n-cycles of rhythmicon as a MULTI-SEQ, given a fundamental duration (ms), a list of subdivisions, and a number of cycles. The subdivisions do not need to be whole numbers.$rhythmicon automatically assigns the pitch corresponding to each rhythmic partial.") "" (om-make-point 34 77) nil (om-make-color 0.1404733 0.44938862 0.6792451) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 1 nil 0) (3 0 9 0 nil 0) (5 0 9 1 nil 0) (8 0 10 0 nil 0) (9 0 10 1 nil 0) (7 0 10 2 nil 0) (10 0 11 0 nil 0))) nil 6.18))
