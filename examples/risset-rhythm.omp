; OM File Header - Saved 2021/05/27 8:59:23
; (6.18 :patc (om-make-point 10 10) (om-make-point 178 25) (om-make-point 772 831) "" 183 0 "2021/05/15 8:50:02" "2021/05/25 17:19:11")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Data")))(setf *om-current-persistent* (om-load-patch1 "risset-rhythm" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 132 30) (quote "transposition mode") "" (om-make-point 634 282) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 99 30) (quote "agogics mode") "" (om-make-point 497 177) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 69 389) (om-make-point 528 428) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7166) (7518 7818) (7744) (7270 7570) (6820 7320) (7370) (7716 8016) (7940) (7462 7762) (7008 7508) (7552) (7894 8194) (8116) (7636 7936) (7176 7676) (7716) (8056 8356) (8274) (7794 8094) (7330 7830) (7868) (8204 8504) (8420) (7938 8238) (7472 7972) (8006) (8338 8638) (8556) (8072 8372) (7604 8104) (8134) (8464 8764) (8680) (8196 8496) (7724 8224) (8254) (8582 8882) (8796) (8310 8610) (7838 8338) (7166) (7518 7818) (7744) (7270 7570) (6820 7320) (7370) (7716 8016) (7940) (7462 7762) (7008 7508) (7552) (7894 8194) (8116) (7636 7936) (7176 7676) (7716) (8056 8356) (8274) (7794 8094) (7330 7830) (7868) (8204 8504) (8420) (7938 8238) (7472 7972) (8006) (8338 8638) (8556) (8072 8372) (7604 8104) (8134) (8464 8764) (8680) (8196 8496) (7724 8224) (8254) (8582 8882) (8796) (8310 8610) (7838 8338) (7166) (7518 7818) (7744) (7270 7570) (6820 7320) (7370) (7716 8016) (7940) (7462 7762) (7008 7508) (7552) (7894 8194) (8116) (7636 7936) (7176 7676) (7716) (8056 8356) (8274) (7794 8094) (7330 7830) (7868) (8204 8504) (8420) (7938 8238) (7472 7972) (8006) (8338 8638) (8556) (8072 8372) (7604 8104) (8134) (8464 8764) (8680) (8196 8496) (7724 8224) (8254) (8582 8882) (8796) (8310 8610) (7838 8338) (7166) (7518 7818) (7744) (7270 7570) (6820 7320) (7370) (7716 8016) (7940) (7462 7762) (7008 7508) (7552) (7894 8194) (8116) (7636 7936) (7176 7676) (7716) (8056 8356) (8274) (7794 8094) (7330 7830) (7868) (8204 8504) (8420) (7938 8238) (7472 7972) (8006) (8338 8638) (8556) (8072 8372) (7604 8104) (8134) (8464 8764) (8680) (8196 8496) (7724 8224) (8254) (8582 8882) (8796) (8310 8610) (7838 8338) (7166) (7518 7818) (7744) (7270 7570) (6820 7320) (7370) (7716 8016) (7940) (7462 7762) (7008 7508) (7552) (7894 8194) (8116) (7636 7936) (7176 7676) (7716) (8056 8356) (8274) (7794 8094) (7330 7830) (7868) (8204 8504) (8420) (7938 8238) (7472 7972) (8006) (8338 8638) (8556) (8072 8372) (7604 8104) (8134) (8464 8764) (8680) (8196 8496) (7724 8224) (8254) (8582 8882) (8796) (8310 8610) (7838 8338) (7166) (7518 7818) (7744) (7270 7570) (6820 7320) (7370) (7716 8016) (7940) (7462 7762) (7008 7508) (7552) (7894 8194) (8116) (7636 7936) (7176 7676) (7716) (8056 8356) (8274) (7794 8094) (7330 7830) (7868) (8204 8504) (8420) (7938 8238) (7472 7972) (8006) (8338 8638) (8556) (8072 8372) (7604 8104) (8134) (8464 8764) (8680) (8196 8496) (7724 8224) (8254) (8582 8882) (8796) (8310 8610) (7838 8338))) :lonset (quote (0 178 264 350 517 680 838 915 992 1142 1288 1430 1500 1569 1705 1838 1967 2031 2094 2218 2340 2459 2517 2575 2690 2802 2912 2966 3020 3125 3229 3332 3382 3432 3531 3628 3723 3770 3817 3909 4000 4178 4264 4350 4517 4680 4838 4915 4992 5142 5288 5430 5500 5569 5705 5838 5967 6031 6094 6218 6340 6459 6517 6575 6690 6802 6912 6966 7020 7125 7229 7332 7382 7432 7531 7628 7723 7770 7817 7909 8000 8178 8264 8350 8517 8680 8838 8915 8992 9142 9288 9430 9500 9569 9705 9838 9967 10031 10094 10218 10340 10459 10517 10575 10690 10802 10912 10966 11020 11125 11229 11332 11382 11432 11531 11628 11723 11770 11817 11909 12000 12178 12264 12350 12517 12680 12838 12915 12992 13142 13288 13430 13500 13569 13705 13838 13967 14031 14094 14218 14340 14459 14517 14575 14690 14802 14912 14966 15020 15125 15229 15332 15382 15432 15531 15628 15723 15770 15817 15909 16000 16178 16264 16350 16517 16680 16838 16915 16992 17142 17288 17430 17500 17569 17705 17838 17967 18031 18094 18218 18340 18459 18517 18575 18690 18802 18912 18966 19020 19125 19229 19332 19382 19432 19531 19628 19723 19770 19817 19909 20000 20178 20264 20350 20517 20680 20838 20915 20992 21142 21288 21430 21500 21569 21705 21838 21967 22031 22094 22218 22340 22459 22517 22575 22690 22802 22912 22966 23020 23125 23229 23332 23382 23432 23531 23628 23723 23770 23817 23909 24001)) :ldur (quote ((180) (87 87) (86) (170 170) (165 165) (160) (78 78) (77) (152 152) (148 148) (144) (70 70) (70) (137 137) (134 134) (131) (64 64) (63) (125 125) (123 123) (120) (59 59) (58) (115 115) (113 113) (111) (54 54) (54) (107 107) (105 105) (103) (51 51) (50) (99 99) (98 98) (96) (47 47) (47) (93 93) (92 92) (180) (87 87) (86) (170 170) (165 165) (160) (78 78) (77) (152 152) (148 148) (144) (70 70) (70) (137 137) (134 134) (131) (64 64) (63) (125 125) (123 123) (120) (59 59) (58) (115 115) (113 113) (111) (54 54) (54) (107 107) (105 105) (103) (51 51) (50) (99 99) (98 98) (96) (47 47) (47) (93 93) (92 92) (180) (87 87) (86) (170 170) (165 165) (160) (78 78) (77) (152 152) (148 148) (144) (70 70) (70) (137 137) (134 134) (131) (64 64) (63) (125 125) (123 123) (120) (59 59) (58) (115 115) (113 113) (111) (54 54) (54) (107 107) (105 105) (103) (51 51) (50) (99 99) (98 98) (96) (47 47) (47) (93 93) (92 92) (180) (87 87) (86) (170 170) (165 165) (160) (78 78) (77) (152 152) (148 148) (144) (70 70) (70) (137 137) (134 134) (131) (64 64) (63) (125 125) (123 123) (120) (59 59) (58) (115 115) (113 113) (111) (54 54) (54) (107 107) (105 105) (103) (51 51) (50) (99 99) (98 98) (96) (47 47) (47) (93 93) (92 92) (180) (87 87) (86) (170 170) (165 165) (160) (78 78) (77) (152 152) (148 148) (144) (70 70) (70) (137 137) (134 134) (131) (64 64) (63) (125 125) (123 123) (120) (59 59) (58) (115 115) (113 113) (111) (54 54) (54) (107 107) (105 105) (103) (51 51) (50) (99 99) (98 98) (96) (47 47) (47) (93 93) (92 92) (180) (87 87) (86) (170 170) (165 165) (160) (78 78) (77) (152 152) (148 148) (144) (70 70) (70) (137 137) (134 134) (131) (64 64) (63) (125 125) (123 123) (120) (59 59) (58) (115 115) (113 113) (111) (54 54) (54) (107 107) (105 105) (103) (51 51) (50) (99 99) (98 98) (96) (47 47) (47) (93 93) (92 92))) :lvel (quote ((64) (37 37) (40) (55 55) (36 36) (47) (27 27) (29) (39 39) (25 25) (33) (19 19) (20) (27 27) (17 17) (22) (12 12) (13) (17 17) (11 11) (13) (7 7) (7) (10 10) (6 6) (7) (4 4) (4) (5 5) (3 3) (3) (1 1) (1) (2 2) (1 1) (1) (0 0) (0) (0 0) (0 0) (64) (37 37) (40) (55 55) (36 36) (47) (27 27) (29) (39 39) (25 25) (33) (19 19) (20) (27 27) (17 17) (22) (12 12) (13) (17 17) (11 11) (13) (7 7) (7) (10 10) (6 6) (7) (4 4) (4) (5 5) (3 3) (3) (1 1) (1) (2 2) (1 1) (1) (0 0) (0) (0 0) (0 0) (64) (37 37) (40) (55 55) (36 36) (47) (27 27) (29) (39 39) (25 25) (33) (19 19) (20) (27 27) (17 17) (22) (12 12) (13) (17 17) (11 11) (13) (7 7) (7) (10 10) (6 6) (7) (4 4) (4) (5 5) (3 3) (3) (1 1) (1) (2 2) (1 1) (1) (0 0) (0) (0 0) (0 0) (64) (37 37) (40) (55 55) (36 36) (47) (27 27) (29) (39 39) (25 25) (33) (19 19) (20) (27 27) (17 17) (22) (12 12) (13) (17 17) (11 11) (13) (7 7) (7) (10 10) (6 6) (7) (4 4) (4) (5 5) (3 3) (3) (1 1) (1) (2 2) (1 1) (1) (0 0) (0) (0 0) (0 0) (64) (37 37) (40) (55 55) (36 36) (47) (27 27) (29) (39 39) (25 25) (33) (19 19) (20) (27 27) (17 17) (22) (12 12) (13) (17 17) (11 11) (13) (7 7) (7) (10 10) (6 6) (7) (4 4) (4) (5 5) (3 3) (3) (1 1) (1) (2 2) (1 1) (1) (0 0) (0) (0 0) (0 0) (64) (37 37) (40) (55 55) (36 36) (47) (27 27) (29) (39 39) (25 25) (33) (19 19) (20) (27 27) (17 17) (22) (12 12) (13) (17 17) (11 11) (13) (7 7) (7) (10 10) (6 6) (7) (4 4) (4) (5 5) (3 3) (3) (1 1) (1) (2 2) (1 1) (1) (0 0) (0) (0 0) (0 0))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5966) (6370 6670) (6620) (6170 6470) (5762 6262) (6352) (6736 7036) (6976) (6516 6816) (6094 6594) (6668) (7038 7338) (7272) (6806 7106) (6372 6872) (6934) (7296 7596) (7524) (7054 7354) (6610 7110) (5966) (6370 6670) (6620) (6170 6470) (5762 6262) (6352) (6736 7036) (6976) (6516 6816) (6094 6594) (6668) (7038 7338) (7272) (6806 7106) (6372 6872) (6934) (7296 7596) (7524) (7054 7354) (6610 7110) (5966) (6370 6670) (6620) (6170 6470) (5762 6262) (6352) (6736 7036) (6976) (6516 6816) (6094 6594) (6668) (7038 7338) (7272) (6806 7106) (6372 6872) (6934) (7296 7596) (7524) (7054 7354) (6610 7110) (5966) (6370 6670) (6620) (6170 6470) (5762 6262) (6352) (6736 7036) (6976) (6516 6816) (6094 6594) (6668) (7038 7338) (7272) (6806 7106) (6372 6872) (6934) (7296 7596) (7524) (7054 7354) (6610 7110) (5966) (6370 6670) (6620) (6170 6470) (5762 6262) (6352) (6736 7036) (6976) (6516 6816) (6094 6594) (6668) (7038 7338) (7272) (6806 7106) (6372 6872) (6934) (7296 7596) (7524) (7054 7354) (6610 7110) (5966) (6370 6670) (6620) (6170 6470) (5762 6262) (6352) (6736 7036) (6976) (6516 6816) (6094 6594) (6668) (7038 7338) (7272) (6806 7106) (6372 6872) (6934) (7296 7596) (7524) (7054 7354) (6610 7110))) :lonset (quote (0 350 517 680 992 1288 1569 1705 1838 2094 2340 2575 2690 2802 3020 3229 3432 3531 3628 3817 4000 4350 4517 4680 4992 5288 5569 5705 5838 6094 6340 6575 6690 6802 7020 7229 7432 7531 7628 7817 8000 8350 8517 8680 8992 9288 9569 9705 9838 10094 10340 10575 10690 10802 11020 11229 11432 11531 11628 11817 12000 12350 12517 12680 12992 13288 13569 13705 13838 14094 14340 14575 14690 14802 15020 15229 15432 15531 15628 15817 16000 16350 16517 16680 16992 17288 17569 17705 17838 18094 18340 18575 18690 18802 19020 19229 19432 19531 19628 19817 20000 20350 20517 20680 20992 21288 21569 21705 21838 22094 22340 22575 22690 22802 23020 23229 23432 23531 23628 23817 24003)) :ldur (quote ((361) (170 170) (165) (321 321) (304 304) (289) (137 137) (134) (262 262) (251 251) (240) (115 115) (113) (222 222) (214 214) (206) (99 99) (98) (192 192) (186 186) (361) (170 170) (165) (321 321) (304 304) (289) (137 137) (134) (262 262) (251 251) (240) (115 115) (113) (222 222) (214 214) (206) (99 99) (98) (192 192) (186 186) (361) (170 170) (165) (321 321) (304 304) (289) (137 137) (134) (262 262) (251 251) (240) (115 115) (113) (222 222) (214 214) (206) (99 99) (98) (192 192) (186 186) (361) (170 170) (165) (321 321) (304 304) (289) (137 137) (134) (262 262) (251 251) (240) (115 115) (113) (222 222) (214 214) (206) (99 99) (98) (192 192) (186 186) (361) (170 170) (165) (321 321) (304 304) (289) (137 137) (134) (262 262) (251 251) (240) (115 115) (113) (222 222) (214 214) (206) (99 99) (98) (192 192) (186 186) (361) (170 170) (165) (321 321) (304 304) (289) (137 137) (134) (262 262) (251 251) (240) (115 115) (113) (222 222) (214 214) (206) (99 99) (98) (192 192) (186 186))) :lvel (quote ((127) (80 80) (89) (125 125) (87 87) (119) (73 73) (80) (111 111) (76 76) (102) (61 61) (67) (92 92) (62 62) (82) (49 49) (53) (73 73) (48 48) (127) (80 80) (89) (125 125) (87 87) (119) (73 73) (80) (111 111) (76 76) (102) (61 61) (67) (92 92) (62 62) (82) (49 49) (53) (73 73) (48 48) (127) (80 80) (89) (125 125) (87 87) (119) (73 73) (80) (111 111) (76 76) (102) (61 61) (67) (92 92) (62 62) (82) (49 49) (53) (73 73) (48 48) (127) (80 80) (89) (125 125) (87 87) (119) (73 73) (80) (111 111) (76 76) (102) (61 61) (67) (92 92) (62 62) (82) (49 49) (53) (73 73) (48 48) (127) (80 80) (89) (125 125) (87 87) (119) (73 73) (80) (111 111) (76 76) (102) (61 61) (67) (92 92) (62 62) (82) (49 49) (53) (73 73) (48 48) (127) (80 80) (89) (125 125) (87 87) (119) (73 73) (80) (111 111) (76 76) (102) (61 61) (67) (92 92) (62 62) (82) (49 49) (53) (73 73) (48 48))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4766) (5270 5570) (5562) (5152 5452) (4816 5316) (5468) (5906 6206) (6172) (5734 6034) (5354 5854) (4766) (5270 5570) (5562) (5152 5452) (4816 5316) (5468) (5906 6206) (6172) (5734 6034) (5354 5854) (4766) (5270 5570) (5562) (5152 5452) (4816 5316) (5468) (5906 6206) (6172) (5734 6034) (5354 5854) (4766) (5270 5570) (5562) (5152 5452) (4816 5316) (5468) (5906 6206) (6172) (5734 6034) (5354 5854) (4766) (5270 5570) (5562) (5152 5452) (4816 5316) (5468) (5906 6206) (6172) (5734 6034) (5354 5854) (4766) (5270 5570) (5562) (5152 5452) (4816 5316) (5468) (5906 6206) (6172) (5734 6034) (5354 5854))) :lonset (quote (0 680 992 1288 1838 2340 2802 3020 3229 3628 4000 4680 4992 5288 5838 6340 6802 7020 7229 7628 8000 8680 8992 9288 9838 10340 10802 11020 11229 11628 12000 12680 12992 13288 13838 14340 14802 15020 15229 15628 16000 16680 16992 17288 17838 18340 18802 19020 19229 19628 20000 20680 20992 21288 21838 22340 22802 23020 23229 23628 24013)) :ldur (quote ((721) (321 321) (304) (577 577) (525 525) (481) (222 222) (214) (412 412) (385 385) (721) (321 321) (304) (577 577) (525 525) (481) (222 222) (214) (412 412) (385 385) (721) (321 321) (304) (577 577) (525 525) (481) (222 222) (214) (412 412) (385 385) (721) (321 321) (304) (577 577) (525 525) (481) (222 222) (214) (412 412) (385 385) (721) (321 321) (304) (577 577) (525 525) (481) (222 222) (214) (412 412) (385 385) (721) (321 321) (304) (577 577) (525 525) (481) (222 222) (214) (412 412) (385 385))) :lvel (quote ((63) (51 51) (62) (94 94) (75 75) (114) (76 76) (87) (124 124) (90 90) (63) (51 51) (62) (94 94) (75 75) (114) (76 76) (87) (124 124) (90 90) (63) (51 51) (62) (94 94) (75 75) (114) (76 76) (87) (124 124) (90 90) (63) (51 51) (62) (94 94) (75 75) (114) (76 76) (87) (124 124) (90 90) (63) (51 51) (62) (94 94) (75 75) (114) (76 76) (87) (124 124) (90 90) (63) (51 51) (62) (94 94) (75 75) (114) (76 76) (87) (124 124) (90 90))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3566) (4252 4552) (4616) (4268 4568) (4034 4534) (3566) (4252 4552) (4616) (4268 4568) (4034 4534) (3566) (4252 4552) (4616) (4268 4568) (4034 4534) (3566) (4252 4552) (4616) (4268 4568) (4034 4534) (3566) (4252 4552) (4616) (4268 4568) (4034 4534) (3566) (4252 4552) (4616) (4268 4568) (4034 4534))) :lonset (quote (0 1288 1838 2340 3229 4000 5288 5838 6340 7229 8000 9288 9838 10340 11229 12000 13288 13838 14340 15229 16000 17288 17838 18340 19229 20000 21288 21838 22340 23229 24053)) :ldur (quote ((1443) (577 577) (525) (962 962) (824 824) (1443) (577 577) (525) (962 962) (824 824) (1443) (577 577) (525) (962 962) (824 824) (1443) (577 577) (525) (962 962) (824 824) (1443) (577 577) (525) (962 962) (824 824) (1443) (577 577) (525) (962 962) (824 824))) :lvel (quote ((0) (5 5) (11) (25 25) (32 32) (0) (5 5) (11) (25 25) (32 32) (0) (5 5) (11) (25 25) (32 32) (0) (5 5) (11) (25 25) (32 32) (0) (5 5) (11) (25 25) (32 32) (0) (5 5) (11) (25 25) (32 32))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5) (1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (list (quote gf) (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 980 735) (om-make-point 311 74) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 80 30) (quote "repetitions") "" (om-make-point 427 240) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 53 30) (quote "voices") "" (om-make-point 370 239) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 30) (quote "speed factor") "" (om-make-point 263 239) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 449 268) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 371 268) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 288 268) (om-make-point 38 30) 2.0 "2.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU 2" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "no transp." "period-wise transp." "chord-wise transp.")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 562 244) (om-make-point 170 44) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 150 24) "untitled" :range (quote ("no transp." "period-wise transp." "chord-wise transp."))))) (om-set-selected-item-index rep (quote 2)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "accelerando" "ritardando")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 498 205) (om-make-point 130 44) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 110 24) "untitled" :range (quote ("accelerando" "ritardando"))))) (om-set-selected-item-index rep (quote 0)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RISSET-RHYTHM" (quote risset-rhythm) (quote ((om-load-inputfun (quote input-funbox) "chord-seq" "SELF" (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6700))) :lonset (quote (0 250 500 750 1750)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (om-load-inputfun (quote input-funbox) "number" "SPEED" 1.0) (om-load-inputfun (quote input-funbox) "integer" "VOICES" 4) (om-load-inputfun (quote input-funbox) "integer" "REP" 4) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "ONSET-MODE" 0 (list (list "accelerando" 0) (list "ritardando" 1))) (om-load-inputfunmenu1 (quote input-funmenu) "menu" "MC-MODE" 2 (list (list "preserve pitch" 0) (list "period-wise transp." 1) (list "chord-wise transp." 2))))) (om-make-point 149 308) (om-make-point 548 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pattern" (let ((copy (make-instance (quote ominstance) :name "pattern" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (5700 6000) (5900) (5400 5700) (4900 5400))) :lonset (quote (0 500 750 1000 1500 2000)) :ldur (quote ((500) (250 250) (250) (500 500) (500 500))) :lvel (quote ((127) (80 80) (90) (127 127) (90 90))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 209 51) (om-make-point 569 273) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4))) (setf (create-info copy) (quote ("2021/05/15 8:52:11" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 207 51) "pattern" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 250)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 127 (list 80 80) 90 (list 127 127) (list 90 90))) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 210 112) (om-make-point 170 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (5700 6000) (5900) (5400 5700) (4900 5400))) :lonset (quote (0 500 750 1000 1500 2000)) :ldur (quote ((500) (250 250) (250) (500 500) (500 500))) :lvel (quote ((127) (80 80) (90) (127 127) (90 90))) :loffset (quote ((0) (0 0) (0) (0 0) (0 0))) :lchan (quote ((1) (2 2) (3) (4 4) (5 5))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 209 51) (om-make-point 569 273) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 2 1 nil 0) (13 0 11 0 nil 0) (8 0 11 1 nil 0) (7 0 11 2 nil 0) (6 0 11 3 nil 0) (10 0 11 4 nil 0) (9 0 11 5 nil 0) (12 0 13 0 nil 0))) nil 6.18))
